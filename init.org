#+TITLE: init.org
#+STARTUP: content
#
#  _______ _______ _______    _______ _______ _______ ______ _______
# |     __|    |  |   |   |  |    ___|   |   |   _   |      |     __|
# |    |  |       |   |   |  |    ___|       |       |   ---|__     |
# |_______|__|____|_______|  |_______|__|_|__|___|___|______|_______|
#
# On the planet emacs in the holy control tower and among the stars aboard
# the evil flagship. -- Spacemacs

#+PROPERTY: header-args  :tangle init.el :shebang ";; -*- lexical-binding: t -*-"
#+PROPERTY: header-args+ :comments link :mkdirp yes :noweb yes :hlines no

* Config
  This is the root configuration branch for my emacs config.

  Everything that's defined here is intended to be used across all the other
  branches. This includes a listing of all the configuration options available,
  any modules that can be toggled and any helper methods to control the
  configuration.

  As you can see my entire emacs configuration is an org-mode file. It's not a file
  that's loaded at startup, instead its one that needs to be tangled prior to being
  run.
  This can be done manually (run ~emacs~, find this file and then ~M-x org-babel-tangle-file~)
  however the recommended approach is my tangle script (found at [[file:bin/emacs-tangle][bin/emacs-tangle]]).
  The script spawns a headless emacs instance that performs the tangling process in
  the background, this has the added benefit of avoiding any configuration options
  and packages you may have that could slow down the tangling process.

  Due to being implemented as an org-branch the options from this branch need to be
  loaded both when emacs is loaded without my config (and is trying to tangle the
  desired org blocks into their appropriate files) and when starting a new emacs
  instance with my config.

  I'm getting org-mode to-do this by wrapping each section that needs to be loaded
  into a src-code block, tangling it to my ~init.el~ *and* calling those blocks right
  now before anything has been tangled.
  This is done using the /noweb/ reference syntax.

  *Note*: This branch only contains the *default* configuration options any permanent
  ones must be placed in [[elisp:(find-file (etc! "+config.el"))][etc/+config.el]].

  #+BEGIN_SRC emacs-lisp
    ;; <<setup-paths()>>
    ;; <<eval-default-config()>>
    ;; <<load-config()>>
  #+END_SRC

  #+NAME: eval-default-config
  #+BEGIN_SRC emacs-lisp :results values :tangle (lisp! "+config-default.el")
    <<config-modules>>
    <<config-options>>

    (provide '+config-default)
  #+END_SRC

** modules
   Optionally enable or disable entire configuration sections.
   These generally have a one to one mapping with packages that are to be installed.

   #+NAME: config-modules
   #+BEGIN_SRC emacs-lisp :tangle no
     (defvar +modules
       '(;; apheleia                                                       ; Automatic buffer formatting after save.
         abbrev                                                            ; Enable automatic in text substitutions
         magit                                                             ; It's git... but magical ÔÉê ,
         link-hint                                                         ; Jump to links in the current buffer through an avy interface
         ;; adaptive-wrap                                                  ; Visually wrap long lines. doesn't alter what you write.
         anzu                                                              ; Show the number of search results incrementally
         ;; beacon                                                         ; Highlight suddens jumps (changes in point) using a beacon
         browse-at-remote                                                  ; Open the current file on github/gitlab/etc.
         ;; auto-highlight-symbol                                          ; Automatically highlight the symbol at point
         browser-edit                                                      ; Interface emacs with [[https://www.chromium.org/][chromium]]
         company                                                           ; Dynamic completion previews through popup dialogs
         ;; command-log-mode                                               ; Echo commands as you enter them
         dashboard                                                         ; A feature full emacs dashboard
         ;; dash                                                           ; Offline documentation browser using either dash or zeal
         ;; deft                                                           ; Note management system based on multiple org files
         ;; devdocs                                                        ; Offline documentation browser
         ;; ebdb                                                           ; A contact management database for emacs
         ;; ebuku                                                          ; Interface to the, ebuku, bookmark manager
         engine-mode                                                       ; Run a search on a given search engine and view in brower
         ;; eshell                                                         ; A nice lispy shell
         ;; expand-region                                                  ; Expand visual mode by semantic units
         eyebrowse                                                         ; Provides switchable window configurations
         ;; flycheck                                                       ; A better buffer linter and error-checker package
         ;; hide-comnt                                                     ; Minor mode to disable rendering of comments
         ;; neotree                                                        ; Tree like directory viewer for emacs
         ;; notmuch                                                        ; Mail client and manager
         imenu                                                             ; Interactively jump to points of interest in this buffer
         ;; indent-guide                                                   ; Show guides for leading indents
         ;; olivetti                                                       ; A nice writing environment for emacs
         ;; pdf-tools                                                      ; Use emacs as quick and dirty pdf viewer
         ;; piper                                                          ; Interactive shell pipelines with emacs
         rainbow-mode                                                      ; Automatically color/highlight css color names
         skeletor                                                          ; Project skeleton generator package
         undo-tree                                                         ; Undo system based on vim with tree like visualiser
         ;; rake                                                           ; Run rake tasks
         ;; vi-tilde-fringe                                                ; Show tildes at the end of the buffer
         ;; vlc-rc                                                         ; Control [[https://www.videolan.org/vlc/index.en-GB.html][VLC]] from emacs
         ;; tab-bar                                                        ; Enable browser like tabs showing buffer information
         ;; vterm                                                          ; A virtual terminal emulator... interfaced with emacs
         vimish-fold                                                       ; Fold regions of code just like vim.
         ;; ztree                                                          ; Directory tree viewer, think NERDTree
         git-gutter                                                        ; Show version control information in the window fringe.

     ;;; Completion frameworks
         ;; selectrum                                                      ; An clean completion-framework designed to be more consistent and predictable
         vertico                                                           ; A more-minimalist selectrum alternative aiming to be completing-read compatible

     ;;; Completion Assistants
         prescient                                                         ; Sorting/Filtering based on frequency and proximity.
         orderless                                                         ; Blazingly fast completion regexp generator using space seperated patterns
         ;; hotfuzz                                                        ; Approximate string matching completion style based on fuzzy finding

     ;;; Buffer Menus
         ;; buffer-menu                                                    ; The (default) builtin buffer menu
         ibuffer                                                           ; An improved buffer menu
         ;; bufler                                                         ; A butler for your buffers

     ;;; LSP Clients
         eglot                                                             ; A light weight and clean LSP client
         ;; lsp-mode                                                       ; A comprehensive and feature full client

     ;;; Interactive Diffs
         ;; ediff                                                          ; The builtin alternative, it has decades worth of bloat.
         vdiff                                                             ; A diff tool inspired by [[https://github.com/justbur/emacs-vdiff][vimdiff]]

     ;;; Package Enhancements
         ;; diredfl                                                        ; Make dired /extra/ colorful
         ;; image-dired                                                    ; View images in dired like sessions
         edit-indirect                                                     ; Edit regions of a buffer in another mode.
         ;; hydra-posframe                                                 ; Show hydras in a posframe
         ;; ebib                                                           ; Nice emacs based interface for editing bibtex files
                                                                           ; NOTE: This package requires bibtex to be enabled
         ;; tramp-term                                                     ; Make term work seamlessly in tramp sessions
         ibuffer-vc                                                        ; Filter ibuffer buffers by version-control repos
         ibuffer-tramp                                                     ; Only show ibuffer buffers in remote tramp sessions
         ibuffer-projectile                                                ; Filter ibuffer buffers by active projects
         ;; company-emoji                                                  ; Show emojis in company-completion candidates
         ;; citeproc                                                       ; Standard for citation links used with org-ref
         evil-tty-cursor                                                   ; Make emacs change terminal cursors based on evil-state.
         ;; hindent                                                        ; Intelligent indentation control for haskell

     ;;; language-support
         ;; ggtags                                                         ; GNU Global source code tagging system
         ;; ycmd                                                           ; A language-server for most languages. written in python.
         ;; tree-sitter                                                    ; Incremental parsing of your source code asynchronously.

     ;;; Languages
         ;; assembly
         bibtex
         c
         ;; csharp
         clojure
         ;; crystal
         ;; cmake
         css
         csv
         ;; docker
         elisp
         git-langs
         ;; haskell
         ;; ledger
         html
         ;; haml
         ;; java
         ;; golang
         javascript
         ;; typescript                                                     ; NOTE requires javascript to also be enabled
         json
         ;; jupyter
         ;; kotlin
         ;; glsl
         ;; log
         latex
         ;; lua
         makefile
         markdown
         ;; nim
         org
         ;; perl
         python
         ;; php
         ;; powershell
         ;; restclient
         ;; ruby
         ;; rust
         sh-script
         sql
         ssh-config
         ;; vimlang
         xml
         yaml
         ;; yarn
         )
       "Packages I want setup on startup.")
   #+END_SRC

** options
   Editor variables used for customisation.

   This branch declares and initialises these values so that their visible to the
   emacs byte-compiler, but you can require and/or modify them in your local config
   file.

   #+NAME: config-options
   #+BEGIN_SRC emacs-lisp :tangle no
     (defvar +man-command (if (member system-type '(cygwin ms-dos windows-nt)) 'woman 'man)
       "Preferred command used for manuals.")

     (defvar +icons-available t
       "When true `all-the-icons' will be available even in terminal emacs.")

     (defvar +icons-prefer-nerd-font t
       "When true override `all-the-icons' fonts with nerd-fonts.
     Set to a string to use that as nerd-font font family.")

     (defvar +find-file-ignore-regexp
       (rx (or (and ".#" (one-or-more any))
               (and bol "flycheck_")
               (and ".class" eol)
               (and ".o" eol)
               (and "node_modules")
               (and ".git" (zero-or-one "/") eol)
               (and ".elc" eol)
               (and ".bundle/")
               (and "~" eol)
               (and (any ?. ?-) "lock" (zero-or-one ".json") eol))))

     (defvar +TeX-view-in-emacs nil
       "When true, view latex documents in emacs PDFTools.
     This variable should be set before requiring Auctex.")

     (defvar +browser-edit-package 'edit-with-emacs
       "The extension with which I connect emacs to my browser.
     Set to atomic to use atomic-chrome and edit-with-emacs to use
     edit-with-emacs.

     Personally I prefer edit-with-emacs because it lets you a cancel
     an edit session and revert to the original (or last saved) text.
     It also has the option of binding M-<enter> in chrome to edit with
     emacs.

     Atomic chrome reflects changes live, which is pretty cool if you
     expect emacs to crash whilst writing... but otherwise isn't too
     useful.")

     (defvar +browser-edit-mode initial-major-mode
       "Default major mode for a browser edit session.")

     (defvar +browser-edit-mode-alist
       `(("^github.com/" . ,#'markdown-mode)
         ("^gitlab.com/" . ,#'markdown-mode))
       "Association list of url regexps against mode-functions.")

     (defvar +lsp-maybe-connect `((python-mode . :global)
                                  (sh-mode . nil)
                                  (t . :local))
       "Alist configuring whether we should connect a buffer to an LSP server or not.
     The format is (MODE . COND) where mode is a `major-mode' for the buffer and COND
     is a predicate used to decide whether to connect or not. As a special case a
     MODE value of t can be used as a fallback when no other suitable MODE is found.

     COND can be one of a symbol nil/t, a keyword :global/:local or a function which is
     called and should return one of the aforementioned values.
     - :local means connect only if there's an already running server in the current
       workspace.
     - :global means only connect if there's a server running in ANY of the manged
       workspaces.

     This configuration options allows you to continue editing files/buffers without
     the overhead of an LSP server starting unintentionally whenever you switch to a
     file. It gives you the flexibility to continue existing LSP sessions, but avoid
     spawning new ones unless you actively want them.")

     (defvar +indirect-edit-save-buffers t
       "When true saving changes from an `edit-indirect' buffer saves the buffer file.
     This applies both to the `edit-indirect' package and `org-edit-src-save', and
     makes commiting consistent between the two packages.")

     (defvar +org-capture-function 'org-capture
       "Function to call to start an `org-capture' session.")

     (defvar +mail-default-conf
       `((user . "mohkale")
         (host . "gmail.com")
         (sent-dir . "local/Sent")
         (signature-file . ,(etc! "signatures" "mohkale@kisara.moe"))
         ;; SMTP configuration should match `smtpmail-multi-accounts'.
         (smtp-host . "smtp.gmail.com")
         (smtp-args . (587 header starttls nil nil nil)))
       "Default configuration options for `+mail-conf'.")

     (defvar +mail-conf
       `((main
          (user . "mohkale")
          (host . "kisara.moe")
          (sent-dir . "kisara/Sent")
          (smtp-host . "kisara.moe"))
         (work
          (user . "mohkalex")
          (sent-dir . "mohkalex/[Gmail]/Sent Mail")
          (signature-file . ,(etc! "signatures" "mohkalex@gmail.com")))
         (personal
          (user . "mohkalsin")
          (sent-dir . "mohkalsin/[Gmail]/Sent Mail")
          (signature-file . ,(etc! "signatures" "mohkalex@gmail.com"))))
       "The comprehensive mail configuration reference.
     There's a bunch of different mail extensions I have setup and each
     seem to redefine or re-reference the same core variables so I define
     and reference them from this variable to minimise the duplication.")

     (defvar +completions-icon t
       "When true enable `all-the-icons' for minibuffer completion.")
   #+END_SRC

** require
   This branch actually requires and sets up my configuration.

   I've also placed any helpers needed by my configuration in here, all of the
   functions in [[load-config]] will be available while tangling.
   I recommend trying to keep the following code-block bare. If it contains something
   that isn't needed while tangling, put that configuration into a separate code-block.

   First we need to ensure paths are setup properly so subsequent requires can
   find files on my system.

   #+begin_src emacs-lisp
     <<setup-paths>>
   #+end_src

   #+NAME: load-config
   #+BEGIN_SRC emacs-lisp :results values
     (unless (or (load (etc! "+config.el") t t)
                 (require '+config-default nil t)
                 ;; See [[file:bin/emacs-tangle-targets][emacs-tangle-targets]] and [[file:bin/emacs-tangle][emacs-tangle]].
                 (bound-and-true-p checking-tangle-targets+)
                 (bound-and-true-p tangling+))
       (warn "Failed to load emacs configuration file, using default"))

     ;;; package!
     ;; This section sets up a macro for quickly asserting whether an optional module
     ;; or feature needs to be enabled. This can let you selectively include or exclude
     ;; code-blocks from tangling based on the users emacs-configuration.
     (defvar +modules)
     (defun package-build-cond+ (pkgs)
       "Build conditions for `package!'.
     This isn't implemented directly in `package!' because that would require
     a recursively defined macro that pushes the complexity of building a pkg
     expression to compile/eval time when it can be done at call-time."
       (unless (consp pkgs)
         (setq pkgs (list pkgs)))
       (let (pkg res)
         (while (prog1 (setq pkg (car pkgs))
                  (setq pkgs (cdr pkgs)))
           (if (consp pkg)
               (cl-case (car pkg)
                 ('not (push `(not ,(package-build-cond+ (cdr pkg))) res))
                 ('or  (push `(or
                               ,@(mapcar #'package-build-cond+ (cdr pkg)))
                             res))
                 ('and (push `(and
                               ,@(mapcar #'package-build-cond+ (cdr pkg)))
                             res))
                 (t (warn "`package!' got an unexpected conditional argument %s" (car pkg))))
             (cond ((eq pkg :lsp)
                    (push `(or ,(package-build-cond+ 'lsp-mode)
                               ,(package-build-cond+ 'eglot))
                          res))
                   ((eq pkg :consult)
                    (push `(or (member (quote consult) +modules)
                               ,(package-build-cond+ 'selectrum)
                               ,(package-build-cond+ 'vertico))
                          res))
                   ((keywordp pkg)
                    (warn "`package!' got unknown keyword argument %s" pkg)
                    (push nil res))
                   (t (push `(member (quote ,pkg) +modules) res)))))
         (if (eq 1 (length res))
             (car res)
           `(and ,@(nreverse res)))))

     (defmacro package! (&rest pkgs)
       "Assert whther all the packages in PKGS are to be installed.
     This is a recursively expanded macro and supports nested conditionals
     such as `or' or `and' and `not'.

     Each argument in PKGS must be a symbol, a keyword, or a list beginning
     with a conditional operator as described above.
     The resulting pkg queries will be parsed and compiled into a conditional
     that asserts them."
       (package-build-cond+ pkgs))

     (defmacro package-yes! (&rest pkgs)
       `(if (package! ,@pkgs) "yes" "no"))

     (defmacro package-no! (&rest pkgs)
       `(if (package! ,@pkgs) "no" "yes"))

     (defmacro package-str! (str &rest pkgs)
       `(if (package! ,@pkgs) ,str "no"))

     nil
   #+END_SRC

   [[*lsp-mode][lsp]] refers to the language-server-protocol and it's how editors such as [[https://code.visualstudio.com/][VSCode]]
   provide such fast and performant language support across so many languages.
   Emacs has 2 packages for this but I don't like kick-starting a language-server
   every time I visit a file. The ~+lsp-maybe-connect~ configuration option lets you
   conditionally connect to a server depending on the current workspace and whether
   or not a server is already running. These helper methods initialise this feature.

   #+begin_src emacs-lisp
     (defun +lsp-should-connect (mode check-workspace check-all-workspaces)
       (when-let ((enable (alist-get mode +lsp-maybe-connect
                                     (alist-get t +lsp-maybe-connect))))
         (when (functionp enable)
           (setq enable (funcall enable)))

         (cond
          ((eq enable :local)
           (funcall check-workspace mode))
          ((eq enable :global)
           (funcall check-all-workspaces mode))
          (t enable))))

     (defconst +lsp-command
       (cond ((package! eglot)
              (when (package! lsp-mode)
                (warn "You've enabled both lsp and eglot, defaulting to eglot."))

              (defun eglot-ensure-maybe+ ()
                "LSP connector for `eglot'."
                (when (+lsp-should-connect
                       major-mode
                       #'eglot-mode-server-p+
                       #'eglot-mode-server-all-p+)
                  (eglot-ensure))))

             ((package! lsp-mode)
              (defun +lsp-connect ()
                "LSP connector for `lsp-mode'."
                (when (+lsp-should-connect
                       major-mode
                       #'lsp-mode-server-p+
                       #'lsp-mode-server-all-p+)
                  (lsp-deferred)))))
       "Command used to start a language server.
     Can be attached as a mode-hook and will decide how best to start a language
     server in the current mode.")
   #+end_src

   ~$REPO_PATH~ is a ~PATH~ like environment variable and it's how I like to reference
   repository locations in my dotfiles.
   This helper provides an interface to this functionality from within emacs, that
   can be used in packages such as ~projectile~ or ~magit~.

   #+begin_src emacs-lisp
     (defun +repo-path (repo-path)
       "Parse REPO-PATH into a list of paths.
     The output will be a collection of conses of the form (PATH . DEPTH)
     specifying we want to look in any directory upto DEPTH paths down in
     PATH. The result of this can be set to `magit-repository-directories'."
       (cl-loop for path in (split-string (or repo-path "") ":")
                with depth = nil
                do (setq depth 0)
                if (string-suffix-p "/" path)
                do (setq depth 1)
                and do (while (string-suffix-p "/*/" path)
                         (setq depth (1+ depth)
                               path (substring path 0 -2)))
                unless (string-empty-p path)
                collect (cons (string-remove-suffix "/" path) depth)))
   #+end_src

   This is the command I use to kick-start on the fly linting. In general when
   flycheck is enabled I prefer it, otherwise I go with the built-in flymake.

   #+begin_src emacs-lisp
     (defun +flylint ()
       (interactive)
       (funcall
        (if (called-interactively-p 'interactive)
            #'funcall-interactively
          #'funcall)
        (cond ((package! flycheck)
               'flycheck-mode)
              (t
               'flymake-mode))
        'toggle))
   #+end_src

   I manage mail configurations from the ~+mail-conf~ variable. Here I define some
   helper methods to make accessing the configuration data in it much simpler.

   #+begin_src emacs-lisp
     (defun +mail-conf-get (key &optional conf)
       (or (alist-get key conf)
           (alist-get key +mail-default-conf)))

     (defun +mail-conf-email (&optional conf)
       (concat (+mail-conf-get 'user conf)
               "@"
               (+mail-conf-get 'host conf)))

     (defun +mail-conf-from-header (&optional conf)
       (concat user-full-name " <" (+mail-conf-email conf) ">"))
   #+end_src

   Lastly here's a little helper sourced from [[https://emacs.stackexchange.com/questions/16890/how-to-find-out-where-a-file-is-being-required][here]] which gives you a tree like
   overview of all the files emacs requires while starting up.
   It's helpful for figuring out what's forcing a deferred package to be loaded.

   #+BEGIN_SRC emacs-lisp :tangle no
     (defvar +require-tree nil)
     (advice-add 'require :around
                 (defun require--advice (orig-fun feature &rest args)
                   (setq +require-tree
                         (append +require-tree
                                 (list (let ((+require-tree (list feature)))
                                         (apply orig-fun feature args)
                                         +require-tree))))))
   #+END_SRC

* Setup
** early-init
   :PROPERTIES:
   :header-args+: :tangle early-init.el
   :END:

   [[https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=24acb31c04b4048b85311d794e600ecd7ce60d3b][early-init]] is automatically sourced by emacs since 27 forward, before any other
   enhancements or packages have been sourced. Let's make sure it's loaded on older
   emacs versions as well.

   #+BEGIN_SRC emacs-lisp :tangle init.el
     (when (version< emacs-version "27")
       (load (concat user-emacs-directory "early-init.el")))
   #+END_SRC

   Prevent the new [[https://akrl.sdf.org/gccemacs.html][gccemacs]] native-compile feature from infesting my home-directory.
   This needs to be done early (and for extra thoroughness I've removed the existing
   eln path) to prevent the directory being made and then removed.

   NOTE: Technically this should be first thing in my config but seeing as
   ~early-init.el~ is loaded before my actual config and gccemacs is only relevant in
   versions after which ~early-init~ is supported, I can put it here with no troubles.

   #+BEGIN_SRC emacs-lisp :var cache-dir=(cache! "eln-cache")
     (setq native-comp-eln-load-path (append (list cache-dir)
                                             (cdr (bound-and-true-p native-comp-eln-load-path))))
   #+END_SRC

   Let's give the garbage collector free reign to take up as much memory as it needs
   so that we can speed up startup times. Source [[https://github.com/hlissner/doom-emacs/issues/310][doom]].

   #+BEGIN_SRC emacs-lisp
     (defconst default-gc-cons-threshold 100000000 ; 100mb
       "My default desired value of `gc-cons-threshold'
     during normal emacs operations.")

     ;; make garbage collector less invasive
     (setq gc-cons-threshold  most-positive-fixnum
           gc-cons-percentage 0.6)
   #+END_SRC

   Also raise the maximum chunk of output we choose to read from a sub-process.
   Should vastly speed up performance with [[https://emacs-lsp.github.io/lsp-mode/page/performance/][language-servers]].

   #+BEGIN_SRC emacs-lisp
     (setq read-process-output-max (* 1024 1024)) ;; 1mb
   #+END_SRC

   Let's disable some of the unnecessary GUI enhancements, you can re-enable them at
   runtime +but I don't like them anyways+. Disabling them early also prevents GUI
   enhancements being partially visible at startup and then immediately disabled.

   #+BEGIN_SRC emacs-lisp
      ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
      (menu-bar-mode -1)     ; dropdown menu list below frame title
      (tool-bar-mode -1)     ; short mini menu shown below the menu bar
      (push '(vertical-scroll-bars) default-frame-alist)
   #+END_SRC

   We have to disable ~scroll-bar-mode~ the direct way, not just in ~early-init~, or else
   spaceline gets truncated on the right hand side.

   #+BEGIN_SRC emacs-lisp :tangle init.el
     (scroll-bar-mode -1)   ; scroll bar shown on frames right side
   #+END_SRC

   Also erase ~file-name-handler-alist~ for startup.

   #+BEGIN_SRC emacs-lisp
     (defconst default-file-name-handler-alist+ file-name-handler-alist)
     (setq file-name-handler-alist nil)
   #+END_SRC

   And then make sure these changes are undone after emacs has started.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook
               (defun emacs-startup-reset-defaults+ ()
                 (setq gc-cons-threshold default-gc-cons-threshold
                       gc-cons-percentage 0.1
                       file-name-handler-alist default-file-name-handler-alist+)

                 ;; delete no longer necessary startup variable
                 (makunbound 'default-file-name-handler-alist)))
   #+END_SRC

** paths
   :PROPERTIES:
   :header-args+: :tangle no
   :END:
   Configure file system paths and try my utmost to keep my emacs home-directory as
   clean as possible. These utilities are tangled at the very beginning of my init
   file but their placed here for brevity.

   Initialise shortcut functions for accessing different paths in my emacs directory.

   #+NAME: setup-paths
   #+begin_src emacs-lisp
     <<setup-path-xdg>>
     <<setup-path-builders>>
     <<setup-path-defaults>>
   #+end_src

   #+NAME: setup-path-xdg
   #+begin_src emacs-lisp
     ;; See [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html][location of init file]].
     (require 'subr-x)
     (when (member system-type '(cygwin ms-dos windows-nt))
       (setenv "HOME" (string-remove-suffix "\\AppData\\Roaming" (getenv "HOME"))))

     (require 'xdg)

     (defun xdg-documents-dir ()
       "Return the base directory for user specific cache files."
       (xdg--dir-home "XDG_DOCUMENTS_DIR" "~/Documents"))

     (defun xdg-state-home ()
       "Return the base directory for user specific cache files."
       (xdg--dir-home "XDG_STATE_HOME" "~/.local/state"))
   #+end_src

   #+NAME: setup-path-builders
   #+BEGIN_SRC emacs-lisp
     (defun join-path (root path &rest rest)
       "Like python' os.path.join, join a series of paths together."
       (setq path (if (file-name-absolute-p path)
                      path
                    (concat root
                            (unless (string-suffix-p "/" root)
                              "/")
                            path)))
       (if rest (apply 'join-path path rest) path))

     (defmacro dotemacs-initialise-path! (path-type path)
       "Initialise a constant for PATH and a function to join onto PATH.
     The function will be of the form dotemacs-join-PATH-TYPE-path and will have
     an alias of the form PATH-TYPE!"
       (setq path (eval path))
       (let* ((path-type-name (symbol-name path-type))
              (alias (intern (concat path-type-name "!")))
              (path-sym (intern (concat "dotemacs-"      path-type-name "-path")))
              (func-sym (intern (concat "dotemacs-join-" path-type-name "-path"))))
         `(progn
            (defconst ,path-sym
              (eval-when-compile (join-path (expand-file-name user-emacs-directory) ,path)))

            (eval-when-compile
              (unless (file-exists-p ,path-sym)
                (mkdir ,path-sym t)))

            (defun ,func-sym (path &rest args)
              ,(concat "join args onto directory: " path)
              (apply 'join-path ,path-sym path args))

            (when (quote ,alias)
              (defalias (quote ,alias) (symbol-function (quote ,func-sym)))))))

     (dotemacs-initialise-path! bin "bin")
     (dotemacs-initialise-path! etc "etc")
     (dotemacs-initialise-path! share (join-path (xdg-data-home)  "emacs"))
     (dotemacs-initialise-path! cache (join-path (xdg-cache-home) "emacs"))
     (dotemacs-initialise-path! state (join-path (xdg-state-home) "emacs"))
     (dotemacs-initialise-path! lisp  (cache! "site-lisp"))
   #+END_SRC

   Now let's set the default paths for a bunch of emacs builtins, see [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering.el]].

   #+NAME: setup-path-defaults
   #+BEGIN_SRC emacs-lisp
     (defconst +notes-home (join-path (xdg-documents-dir) "notes")
       "Base directory containing notes files.")

     (defconst +bib-home (join-path (xdg-documents-dir) "bib")
       "Base directory containing bibliography files.")

     (defvar org-roam-directory (join-path (xdg-documents-dir) "brain"))

     (defconst +docs-home (join-path (xdg-documents-dir) "books/")
       "Base directory containing bib documents.")

     (setq
     ;;; Package Directories
      package-user-dir                                   (cache! "elpa")

      auto-save-list-file-prefix                         (state! "auto-save/")
      auth-sources                                       (let ((default-directory (xdg-config-home)))
                                                           (append (list (expand-file-name "authinfo")
                                                                         (expand-file-name "authinfo.gpg")
                                                                         (expand-file-name "netrc"))
                                                                   (bound-and-true-p auth-sources)))
      custom-file                                        (etc! "custom.el")
      custom-theme-directory                             (etc! "themes")
      org-directory                                      +notes-home
      org-clock-persist-file                             (state! "org/clock-persist.el")
      org-id-locations-file                              (state! "org/id-locations.el")
      org-publish-timestamp-directory                    (state! "org/timestamps/")
      org-registry-file                                  (state! "org/registry.el")
      org-default-notes-file                             (join-path +notes-home "index.org")
      projectile-org-projects-directory+                 (join-path +notes-home "projects/")
      org-projectile-projects-directory                  projectile-org-projects-directory+
      org-projectile-projects-file                       (join-path +notes-home "projects/global.org")
      org-preview-latex-image-directory                  (cache! "org/latex")
      package-quickstart-file                            (state! "package-qs.el")
      server-auth-dir                                    (state! "server/")
      shared-game-score-directory                        (share! "gamescore/")
      tramp-auto-save-directory                          (share! "tramp/auto-save/")
      tramp-persistency-file-name                        (state! "private/tramp/history.el")
      url-cache-directory                                (cache! "url/cache/")
      url-configuration-directory                        (share! "url/configuration/")
      nsm-settings-file                                  (share! "network-security.data")
      )

     (defconst +dashboard-banners-directory (etc! "banners/"))

     (add-to-list 'load-path dotemacs-lisp-path)
     (add-to-list 'load-path (lisp! "core"))
   #+END_SRC

** utils
   Define some macros and helpers to assist with later configurations.

   Check emacs versions:
   #+BEGIN_SRC emacs-lisp
     (defmacro emacs= (version)
       `(version= emacs-version ,version))

     (defmacro emacs< (version)
       `(version< emacs-version ,version))

     (defmacro emacs<= (version)
       `(version<= emacs-version ,version))

     (defmacro emacs>= (version)
       `(not (emacs< ,version)))

     (defmacro emacs> (version)
       `(not (emacs<= ,version)))
   #+END_SRC

   Check operating-system/host-environment.
   #+BEGIN_SRC emacs-lisp
     (defun windows-p ()
       (member system-type '(cygwin ms-dos windows-nt)))

     (defun macos-p ()
       (eq system-type 'darwin))

     (defun unix-p ()
       (member system-type '(gnu gnu/linux gnu/kfreebsd)))
   #+END_SRC

  [[https://github.com/hlissner/doom-emacs/blob/develop/core/core-lib.el#L458][doom just keeps providing]], a transient-hook is a hook that's run only once and then
  promptly erases itself. can be bound to either a function or a hook variable.

  #+BEGIN_SRC emacs-lisp
    (defvar +transient-hook-counter 0
      "used to generate a unique function-name for a transient hook.")

    (defmacro add-transient-hook! (hook-or-function &rest forms)
      "Attaches a self-removing function to HOOK-OR-FUNCTION.
    FORMS are evaluated once, when that function/hook is first invoked, then never
    again.
    HOOK-OR-FUNCTION can be a quoted hook or a sharp-quoted function (which will be
    advised)."
      (declare (indent 1))
      (let ((append (if (eq (car forms) :after) (pop forms)))
            ;; Avoid `make-symbol' and `gensym' here because an interned symbol is
            ;; easier to debug in backtraces (and is visible to `describe-function')
            (fn (intern (format "emacs--transient-hook-%d-h"
                                (cl-incf +transient-hook-counter)))))
        `(let ((sym ,hook-or-function))
           (defun ,fn (&rest _)
             ,(format "Transient hook for %S" hook-or-function)
             ,@forms
             (let ((sym ,hook-or-function))
               (cond ((functionp sym) (advice-remove sym #',fn))
                     ((symbolp sym)   (remove-hook sym #',fn))))
             (unintern ',fn nil))
           (cond ((functionp sym)
                  (advice-add ,hook-or-function ,(if append :after :before) #',fn))
                 ((symbolp sym)
                  (put ',fn 'permanent-local-hook t)
                  (add-hook sym #',fn ,append))))))
  #+END_SRC

  This should be in core but I need it pretty early on so I've moved it here.

  #+BEGIN_SRC emacs-lisp
    (defmacro plist-pop! (list prop &optional default)
      "delete PROP from plist LIST, returning value of PROP.
        if PROP isn't in LIST, DEFAULT will be returned."
      `(prog1
           (or (plist-get ,list ,prop) ,default)
         (cl-remf ,list ,prop)))
  #+END_SRC

** packages
   Let's setup the packages needed to bootstrap my dotfiles, we're gonna need:

   ~package.el~, [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][not on my watch, criminal scum!]].

   #+BEGIN_SRC emacs-lisp
     (setq package-enable-at-startup  nil
           package--init-file-ensured nil
           package-quickstart         nil)
   #+END_SRC

   Some packages are out of date and thus their PGP signatures don't work.
   I could go over them manually, but for the sake of my sanity, let's just
   disable signature checks. *WARN* this isn't safe, proceed at your own risk.

   #+BEGIN_SRC emacs-lisp
     (setq package-check-signature nil)
   #+END_SRC

   Specify the package archives to be used by ~package.el~.

   #+NAME: package-archives
   | name  | URL                           |
   |-------+-------------------------------|
   | MELPA | https://melpa.org/packages/   |
   | gnu   | http://elpa.gnu.org/packages/ |

   #+BEGIN_SRC emacs-lisp :var archives=package-archives :results value :tangle no
     (setq package-archives
           (cl-loop for (name source) in archives
                    collect (cons name source)))
   #+END_SRC

   Configure package-managers and configuration declarations.

   #+BEGIN_SRC emacs-lisp
     (setq straight-use-package-by-default nil
           use-package-always-ensure nil
           use-package-always-defer t
           ; straight-recipes-gnu-elpa-use-mirror nil
           ; straight-recipes-emacsmirror-use-mirror nil
           straight-allow-recipe-inheritance t
           straight-disable-native-compile nil
           straight-process-buffer " *straight*"
           straight-check-for-modifications '(check-on-save find-when-checking))
   #+END_SRC

   For my config I'll be using [[https://github.com/raxod502/straight.el][straight]], the modern package manager for emacs.

   Now by default straight is a self hosting package manager, all of it is contained
   within ~straight-base-dir~ including version lockfiles, but I'm not a big fan of
   having to commit configurations into runtime directories so I've advised straight
   to place them in my ~dotmeacs-etc-path~.

   #+NAME: setup-straight-pacman
   #+BEGIN_SRC emacs-lisp
     (with-no-warnings
       (defvaralias 'straight-base-dir 'dotemacs-cache-path)
       (defvaralias 'straight-install-dir 'straight-base-dir))

     ;; Place lockfiles into etc instead of into lisp.
     (defun straight-override-version-path (func &rest args)
       (let ((straight-base-dir dotemacs-etc-path))                                  ; Goes to (etc! "straight/versions").
         (apply func args)))
     (advice-add #'straight--versions-dir  :around #'straight-override-version-path)
     (advice-add #'straight--versions-file :around #'straight-override-version-path)

     (let ((bootstrap-file (join-path straight-install-dir "straight/repos/straight.el/bootstrap.el"))
           (bootstrap-version 5))
       bootstrap-version
       (unless (file-exists-p bootstrap-file)
         (message "Installing the straight package manager")
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+END_SRC

   Finally, install base packages +took you long enough :tongue:.

   #+NAME: setup-packages
   #+BEGIN_SRC emacs-lisp
     (dolist (pkg '(use-package
                    general
                    delight
                    diminish
                    dash
                    s
                    f))
       (straight-use-package pkg)
       (require pkg))
   #+END_SRC

** editor
   Make emacs a saner, friendlier development environment.

*** aliases
    #+BEGIN_SRC emacs-lisp
      (defalias 'regexp-string-match #'string-match)

      (defalias 'path-basename                   #'file-name-nondirectory)
      (defalias 'path-dirname                    #'file-name-directory)
      (defalias 'path-extension                  #'file-name-extension)
      (defalias 'path-without-extension          #'file-name-sans-extension)
      (defalias 'path-basename-without-extension #'file-name-base)

      (defalias 'gnu-debugger     #'gdb)
      (defalias 'gud-gnu-debugger #'gud-gdb)
      (defalias 'perl-debugger    #'perldb)
      (defalias 'java-debugger    #'jdb)
      (defalias 'write-autosave 'do-auto-save)
    #+END_SRC

*** options
     #+BEGIN_SRC emacs-lisp
       (setq delete-old-versions t                                                  ; delete excess backup versions silently
             version-control t                                                      ; use version control
             vc-make-backup-files t                                                 ; make backups in vc as well
             vc-follow-symlinks t                                                   ; no confirmation when opening symlinks
             ring-bell-function 'ignore                                             ; NO ANNOYING RINGS!!!
             sentence-end-double-space nil                                          ; sentence SHOULD end with only a fullstop
             delete-by-moving-to-trash t                                            ; don't rm, trash my garbage please :)
             search-whitespace-regexp nil                                           ; SPC means SPC, not any amount of spaces
             enable-local-variables t                                               ; allow safe variables, even alongside unsafe ones
             auto-save-interval 50                                                  ; auto-save as frequently as possible
             backup-by-copying t                                                    ; don't clobber symlinks
             kill-whole-line t                                                      ; kill-line includes eol
             help-window-select t                                                   ; always select the help window when it pops up
             enable-recursive-minibuffers t                                         ; allow entering minibuffer, when already in minibuffer
             find-file-suppress-same-file-warnings t                                ; don't warn when finding a file that's already open.
             completion-ignore-case t                                               ; make completion case insensitive, holding down shift is annoying.
             use-short-answers t                                                    ; never use `yes-or-no-p', prefer `y-or-n-p'.
             frame-resize-pixelwise t                                               ; Fix weird gaps around windows in GUI frames through X.
             remote-file-name-inhibit-locks t
             read-file-name-completion-ignore-case t
             read-buffer-completion-ignore-case t
             completions-detailed t                                                 ; show annotations for certain completion candidates
             Man-notify-method 'pushy                                               ; Open manual buffer in the current window
             inhibit-startup-echo-area-message t                                    ; Don't tell me I'm in GNU emacs... I think I'll know
             confirm-nonexistent-file-or-buffer nil                                 ; Don't require confirmation when creating a new file
             history-length 1000                                                    ; Maximum size of a history variable for completing-read
             recenter-positions '(top middle bottom)
             user-mail-address "mohkale@kisara.moe"
             user-full-name "Mohsin Kaleem")
     #+END_SRC

     Set the default fill column for ~auto-fill-mode~.

     #+BEGIN_SRC emacs-lisp
       (setq-default
        ;; default-fill-column 150                                                ; toggle wrapping text at given character
        fill-column 85                                                            ; the default line length allowed by auto-fill-mode
        )
     #+END_SRC

    Backup behaviour of emacs. *NOTE* ~kept-new-versions~ and ~kept-old-versions~ are
    both used to determine the allowed number of backups. Emacs will keep at most
    ~kept-new-versions~ + ~kept-old-versions~ backups.

    #+BEGIN_SRC emacs-lisp
      (setq
       kept-new-versions 15                                                   ; keep this many latest versions of file.
       kept-old-versions 5                                                    ; keep this many early versions of file.
       )
    #+END_SRC

    The default major mode; used for eg. in newly made files with an unknown file-type.

    #+BEGIN_SRC emacs-lisp
      (setq-default major-mode 'text-mode)
    #+END_SRC

    Default encodings for files, this changes depending on platform so lets force it
    to go the UNIX route.

    #+BEGIN_SRC emacs-lisp
      (setq-default
       default-buffer-file-coding-system 'utf-8-unix
       buffer-file-coding-system 'utf-8-unix)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil                                           ; Use spaces, not tabs
                    show-trailing-whitespace nil
                    truncate-lines t                                               ; Don't split long lines onto next lines
                    scroll-conservatively 101                                      ; Smooth... enough scrolling going line by line
                    scroll-preserve-screen-position t
                    cursor-in-non-selected-windows nil                             ; Don't show the cursor in inactive windows
                    echo-keystrokes 0.02                                           ; Print inputted prefix keys after a pause.
                    )
    #+END_SRC

    Completion ignored extensions lets you exclude files or directories suffixed with
    certain patterns. This is useful for omitting stuff you'll never want to find like
    c object files.

    #+begin_src emacs-lisp
      (push "node_modules/" completion-ignored-extensions)
      (push "__pycache__/" completion-ignored-extensions)
      (push "CMakeCache.txt" completion-ignored-extensions)
      (push "cmake_install.cmake" completion-ignored-extensions)
      (push "CMakeFiles/" completion-ignored-extensions)
      (push "eln-cache/" completion-ignored-extensions)
      (push "#" completion-ignored-extensions)
    #+end_src

    Set the string shown on the title bar of emacs frames.

    #+BEGIN_SRC emacs-lisp
      (setq frame-title-format
            ;; sets the title string displayed on the frame above. Format of the command is
            ;; a printf like string. Wrap any code you want evaluated conditionally into a list
            ;; and if the first value of that list is a string, it will be evaluated. You can
            ;; include variables anywhere in the string, including sublists, but no functions.
            ;;
            ;; See the format guide here: https://www.emacswiki.org/emacs/FrameTitle
            `("emacs@"
              ,(system-name)
              " [%*] %m"
              (:eval (when (derived-mode-p 'pdf-view-mode)
                       (format "(%d/%d)"
                               (pdf-view-current-page)
                               (pdf-cache-number-of-pages))))
              (buffer-file-name " : %f")))
    #+END_SRC

    Auto saves and backup files, both important parts of emacs

    #+BEGIN_SRC emacs-lisp
      (setq
       ;; Where do autosave files get stored.
       auto-save-file-name-transforms
       (let ((auto-save-dir (state! "auto-save" "sessions/")))
         (mkdir auto-save-dir t)
         `((".*" ,auto-save-dir t)))

       ;; Where do backup files get stored.
       backup-directory-alist `(("." . ,(state! "backups/")))

       ;; How to format lock files, for our use cases just append
       ;; a "#" to the end of it so we can exclude it from `find-file'.
       ;; A ".#" will also be prepended to it automatically.
       lock-file-name-transforms `(("$" "#")))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defvar undo-skip-autosave-regex+
       (rx
        (or
         ;; match extensions in filename
         (and (or ".pdf" ".log") eol)
         ;; match exact file paths
         (and
          (or
           ;; wildcard regexp match. any match is a valid match.
           (and "[*Org Src")
           ;; match from the beginning of the line
           (and bol (or
                     (eval temporary-file-directory)
                     (eval dotemacs-state-path)
                     (eval dotemacs-cache-path)
                     (eval dotemacs-share-path)
                     (eval (concat straight-base-dir "straight/"))
                     (eval package-user-dir)
                     (eval +dashboard-banners-directory)))))))
       "Skip undo backups for files matching this regexp")
   #+END_SRC

    load any variables in my ~custom.el~ file

    #+BEGIN_SRC emacs-lisp
      (and (file-exists-p custom-file) (load custom-file t t))
    #+END_SRC

*** user-interface
    Disable GUI enhancements, some of these are taken care of in [[*early-init][early-init]].

    Let's stop the cursor blinking annoyingly.

    #+BEGIN_SRC emacs-lisp
      (blink-cursor-mode -1)
    #+END_SRC

    Let's also prevent the pointless startup message.

    #+BEGIN_SRC emacs-lisp
      (advice-add 'display-startup-echo-area-message :override #'ignore)
    #+END_SRC

    Make emacs less verbose in some places.

    #+BEGIN_SRC emacs-lisp
      (setq command-error-function
            (defun command-error-function+ (data context caller)
              "hide some error message"
              (when (not (memq (car data) '(;; buffer-read-only
                                            beginning-of-buffer
                                            end-of-buffer)))
                (command-error-default-function data context caller))))
    #+END_SRC

*** term
    Classical terminals [[https://emacs.stackexchange.com/questions/32294/how-to-make-emacs-recognise-c-shift-combinations-in-terminal-mode?rq=1][don't support]] extended, GUI like keybindings. It's a shame,
    but modern terminals are starting to work around it, for eg. *Xterm*.

    [[https://wiki.archlinux.org/index.php/Tmux][TMUX]] (the terminal multiplexer) supports Xterm bindings, but emacs doesn't accept
    them. Let's change that, courtesy of the [[https://wiki.archlinux.org/index.php/Emacs#Shift_.2B_Arrow_keys_not_working_in_emacs_within_tmux][arch wiki]].

    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (require 'term/xterm))

      (advice-add 'terminal-init-screen :before
                  (defun tmux (&rest _)
                    "Apply xterm keymap, allowing use of keys passed through tmux."
                    (when (getenv "TMUX")
                      (let ((map (copy-keymap xterm-function-map)))
                        (set-keymap-parent map (keymap-parent input-decode-map))
                        (set-keymap-parent input-decode-map map)))))
    #+END_SRC

    Emacs also comes with an ~xterm-mouse-mode~, which lets you use the mouse to
    select things in the terminal, like you would in GUI emacs. By default you have
    to enable it manually, let's enable it when an xterm like terminal is initialised.

    #+BEGIN_SRC emacs-lisp
      (defun enable-xterm-mouse-mode+ ()
        (xterm-mouse-mode +1))

      (advice-add 'terminal-init-xterm :after #'enable-xterm-mouse-mode+)
      (advice-add 'terminal-init-tmux  :after #'enable-xterm-mouse-mode+)
    #+END_SRC

    Because of Xterm's extended key-codes, you can reclaim some of the key-codes which have
    been taken by emacs. I've defined a function which adds some more key-codes to the
    Xterm keymap and reclaims some bindings that conventional terminals have repurposed.

    Here's an overview of where we stand.

    | reclaimed | key       | num | name | terminal-key | notes                       |
    |-----------+-----------+-----+------+--------------+-----------------------------|
    | [ ]       | backspace | 127 | DEL  | Ctrl+?       | Maybe translated to Ctrl+h  |
    | [X]       | tab       |   9 | TAB  | Ctrl+I       |                             |
    | [ ]       | linefeed  |  10 | LFD  | Ctrl+j       | Few keyboards have this key |
    | [X]       | return    |  13 | RET  | Ctrl+m       |                             |
    | [X]       | escape    |  27 | ESC  | Ctrl+[       |                             |

    *NOTE*: in GUI, the behaviour shouldn't have changed. The following keys haven't
    been reclaimed, but the GUI variants override the term versions anyways, so you
    shouldn't really notice.

    #+BEGIN_SRC emacs-lisp
      (defun term-setup-frame-bindings+ (&optional frame)
        (with-selected-frame (or frame (selected-frame))
          ;; for some reason, C-/ is remapped to C-_, but (kbd "C-/") isn't C-_,
          ;; it's this bizarre vector here.
          (define-key input-decode-map "" [67108911])

          ;; reclaim key combinations from terminal. See initial source [[https://emacs.stackexchange.com/questions/220/how-to-bind-c-i-as-different-from-tab][here]].
          ;; WARN for this to work, you can't use (kbd key) because that automatically
          ;; gets translated to the original keys. You'll have to use [key] directly.
          ;; You'll also need to declare some input combination to be (effectively) key
          ;; for your terminal, see the xterm eg below.
          (define-key input-decode-map [?\C-i] [C-i]) ;; was TAB
          (if (display-graphic-p)
              ;; GUI specific remappings
              (progn
                (define-key input-decode-map "	"  [C-i])
                (define-key input-decode-map [?\C-m] [C-m]))
            ;; terminal remappings
            (define-key input-decode-map "	"    nil))

          ;; evaluate the following to translate reclaimed bindings back for
          ;; terminals which don't specify any special key combinations for the
          ;; reclaimed keys :cry:.
          ;; (define-key function-key-map [C-i]  "	")
          ;; (define-key function-key-map [C-m]  "")
          (define-key function-key-map [C-\[] "")                             ; I don't mind this being taken

          ;; some extra bindings I've got in st, see term/xterm.el
          (when (featurep 'xterm)
            (define-key xterm-function-map "\e[127;2u" [S-backspace])
            (define-key xterm-function-map "\e[127;5u" [C-backspace])
            (define-key xterm-function-map "\e[127;6u" [C-S-backspace])
            (define-key xterm-function-map "\e[13;2u"  [S-return])
            (define-key xterm-function-map "\e[13;8u"  [C-M-S-return])
            (define-key xterm-function-map "\eOB"      [down])
            (define-key xterm-function-map "\eOA"      [up])
            (define-key xterm-function-map "\eOD"      [left])
            (define-key xterm-function-map "\eOC"      [right])
            (define-key xterm-function-map "\e[1;2B"   [S-down])
            (define-key xterm-function-map "\e[1;2A"   [S-up])
            (define-key xterm-function-map "\e[1;2D"   [S-left])
            (define-key xterm-function-map "\e[1;2C"   [S-right])
            (define-key xterm-function-map "\e[1;5Z"   [C-S-tab])
            (define-key xterm-function-map "\e[127;7u" (kbd "C-M-DEL"))
            (define-key xterm-function-map "\e[49;5u"  (kbd "C-1"))
            (define-key xterm-function-map "\e[50;5u"  (kbd "C-2"))
            (define-key xterm-function-map "\e[51;5u"  (kbd "C-3"))
            (define-key xterm-function-map "\e[52;5u"  (kbd "C-4"))
            (define-key xterm-function-map "\e[53;5u"  (kbd "C-5"))
            (define-key xterm-function-map "\e[54;5u"  (kbd "C-6"))
            (define-key xterm-function-map "\e[55;5u"  (kbd "C-7"))
            (define-key xterm-function-map "\e[56;5u"  (kbd "C-8"))
            (define-key xterm-function-map "\e[57;5u"  (kbd "C-9"))
            (define-key xterm-function-map "\e[48;5u"  (kbd "C-0"))
            (define-key xterm-function-map "\e[32;2u"  (kbd "S-SPC"))
            (define-key xterm-function-map "\e[37;4u"  (kbd "M-%"))
            (define-key xterm-function-map "\e[58;4u"  (kbd "M-:"))
            (define-key xterm-function-map "\e[58;6u"  (kbd "C-:"))
            (define-key xterm-function-map "\e[124;6u" (kbd "C-|"))
            (define-key xterm-function-map "\e[124;8u" (kbd "C-M-|"))
            (define-key xterm-function-map "\e[94;6u"  (kbd "C-^"))
            (define-key xterm-function-map "\e[60;4u"  (kbd "M-<"))
            (define-key xterm-function-map "\e[62;4u"  (kbd "M->"))
            (define-key xterm-function-map "\e[62;6u"  (kbd "C->"))
            (define-key xterm-function-map "\e[60;6u"  (kbd "C-<"))
            (define-key xterm-function-map "\e[38;4u"  (kbd "M-&"))
            (define-key xterm-function-map "\e[105;7u" (kbd "C-M-i"))
            (define-key xterm-function-map "\e[27;3u"  (kbd "M-ESC"))
            (define-key xterm-function-map "\e[27;5u"  (kbd "C-ESC"))

            ;; define xterm codes for ctrl+shift alphabet keys
            (cl-loop for (i . char) in (-zip (number-sequence 65 90)
                                             (append (number-sequence 97 105)
                                                     '(107 106)                               ; for some reason, J & K are switched
                                                     (number-sequence 108 122)))
                     do (define-key xterm-function-map
                          (concat "\e[" (number-to-string i) ";2u")
                          (kbd (concat "C-S-" (string char))))
                     do (define-key xterm-function-map
                          (concat "\e[" (number-to-string i) ";6u")
                          (kbd (concat "C-S-" (string char))))))

          ;; NOTE: reclaimed key combinations, see source [[https://emacs.stackexchange.com/questions/220/how-to-bind-c-i-as-different-from-tab/20290#20290][here]].
          (define-key input-decode-map "\e[105;5u" [C-i])
          (define-key input-decode-map "\e[109;5u" [C-m])
          (define-key input-decode-map "\e[91;5u"  [C-\[])))

      (add-hook 'after-make-frame-functions #'term-setup-frame-bindings+)
    #+END_SRC

    If however you're running emacs from outside of the daemon (eg. ~emacs -nw -c~),
    ~after-make-frame-functions~ won't be invoked on your current frame, you'll have
    to invoke it manually; or preferably invoke it right now.

    #+BEGIN_SRC emacs-lisp
      (unless (daemonp)
        (add-hook 'emacs-startup-hook #'term-setup-frame-bindings+))
    #+END_SRC

    Try to enable clipboard support, these settings should do something... but
    they don't seem to work for me :cry:.

    #+BEGIN_SRC emacs-lisp :tangle no
      (setq x-select-request-type     '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
            x-select-enable-clipboard t
            x-select-enable-primary   t
            x-stretch-cursor          t)
    #+END_SRC

    As a last resort, let's defer to an excellent external package which takes care
    of this for you automatically... assuming you have the right tools on your host.

    #+BEGIN_SRC emacs-lisp
      (use-package xclip
        :straight t
        :init
        (xclip-mode +1))
    #+END_SRC

*** enabled
    Re-enable some emacs features that emacs disables by default because they're
    thought to be confusing.

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil)
    #+END_SRC

*** leader
    Some variables related to prefixes in which leader keys should be placed.

    TODO: Fix bug in spaceleader where if a keymap with override-state 'all is
    activated and it ends up overriding the leader-key, then some of
    the leader-key bindings are just non-existent in the buffer :?
    For example see ~magit-blame-read-only-map~.

    #+BEGIN_SRC emacs-lisp
      (defconst leader-minor-mode-leader-prefix "q"
        "leader key for minor mode bindings.
      this leader prefix is expected to be muddled and unreliable...
      due to tonnes of different minor modes collabratively binding to it.

      That said... I need a place to put minor-mode keys and this was
      unoccupied.")

      (defconst leader-server-leader-prefix "l"
        "put leader keys related to active servers under this prefix.")

      (defconst leader-diff-leader-prefix "d"
        "leader prefix under which diff bindings are assigned.")
    #+END_SRC

    Setup [[https://github.com/mohkale/spaceleader][spaceleader]], my own leader-key package designed to work like [[https://www.spacemacs.org/][spacemacs]].

    #+BEGIN_SRC emacs-lisp
      (use-package bind-map
        :straight t)

      (use-package spaceleader
        :straight (spaceleader :host github :repo "mohkale/spaceleader")
        :demand t
        :config
        (require 'spaceleader-use-package)
        (leader-declare-prefix leader-server-leader-prefix "lang-server")
        (leader-declare-prefix leader-minor-mode-leader-prefix "minor-modes")

        :general
        ("C-@" (general-simulate-key "C-SPC")) ;; C-SPC in terminal
        ;; Make my none-normal leader key active even in normal states.
        (:states leader-norm-states
         "C-SPC" (eval `(general-simulate-key ,leader-key)))
        ;; Setup C-, to trigger my major-mode leader-keys in both insert and normal states.
        (:keymaps 'override
         :states leader-norm-states
         "C-," (eval `(general-simulate-key ,(concat leader-key " " leader-major-mode-prefix))))
        (:keymaps 'override
         :states leader-nnorm-states
         "C-," (eval `(general-simulate-key ,(concat leader-nnorm-key " " leader-major-mode-prefix)))))
    #+END_SRC

**** base
     Here we setup the base leader-key bindings we have always available, regardless
     of later configurations or overrides.

     #+begin_src emacs-lisp
       (leader-set-keys
         "TAB" '(switch-to-last-buffer+ :wk "last-buffer")
         "SPC" '(execute-extended-command-for-buffer :wk "M-x")
         "<escape>" 'abort-recursive-edit
         "DEL"      'exit-recursive-edit

         ":" 'repeat-complex-command
         "!" 'shell-command
         "&" 'async-shell-command
         "." 'repeat
         "u" 'universal-argument)

       (leader-set-keys
         "a" '(:ignore t :wk "applications")
         "a:" 'eshell
         "ad" 'calendar
         "af" 'describe-face
         "aX" 'customize
         "al" 'find-library
         "aL" 'load-library
         "at" 'load-theme
         "am" +man-command
         "ae" 'list-processes

         "ap" '(:ignore t :wk "packages")
         "api" 'straight-use-package
         "apU" 'straight-pull-all
         "apu" 'straight-pull-package-and-deps
         "apf" 'straight-fetch-package-and-deps
         "apF" 'straight-fetch-all
         "apx" 'straight-prune-build
         "apR" 'straight-rebuild-all
         "apr" 'straight-rebuild-package
         "apz" 'straight-freeze-versions
         "apt" 'straight-thaw-versions)

       (leader-set-keys
         "b" '(:ignore t :wk "buffers")
         "bb" 'switch-to-buffer
         "bB" 'switch-to-buffer-other-window
         "bd" 'kill-this-buffer
         "bm" 'buffer-menu
         "bn" 'next-buffer
         "bp" 'previous-buffer
         "br" 'rename-buffer
         "bR" 'rename-uniquely
         "bo" 'occur
         "b DEL" 'bury-buffer
         "bE" '(safe-erase-buffer+ :wk "safe-erase-buffer")
         "bH" 'htmlfontify-buffer
         "bk" 'kill-this-buffer
         "bK" 'kill-this-buffer-and-window-maybe+
         "bM" '(switch-to-messages-buffer+ :wk "switch-to-messages"))

       (leader-set-keys
         "c" '(:ignore t :wk "compile/comments")
         "cx" 'kill-compilation
         "cr" 'recompile
         "ck" 'comment-kill
         "c[" 'comment-box
         "ci" 'comment-indent
         "cb" 'display-compilation-buffer
         "cy" 'yank-and-comment
         "cc" 'compile)

       (leader-set-keys
         "e" '(:ignore t :wk "errors")
         "e1" 'first-error
         "en" 'next-error
         "ep" 'previous-error)

       (leader-set-keys
         "g" '(:ignore t :wk "git/vc"))

       (leader-set-keys
         "h" '(:ignore t :wk "help")
         "hh" 'display-local-help
         "hn" 'view-emacs-news
         "h/" 'apropos-command
         "hg" 'describe-gnu-project
         "hl" 'view-lossage                                                            ; show last few entered commands
         "hw" 'where-is                                                                ; show where a command is bound
         "hp" 'view-emacs-problems
         "ht" 'view-emacs-todo
         "h RET" 'view-order-manuals

         "hd" '(:ignore t :wk "help-describe")
         "hdd" 'shortdoc-display-group
         "hdx" 'describe-command
         "hdo" 'describe-symbol
         "hdi" 'describe-input-method
         "hdL" 'describe-language-environment
         "hdb" 'describe-bindings
         "hdc" 'describe-char
         "hdu" 'describe-coding-system
         "hdk" 'describe-key
         "hdK" 'describe-keymap
         "hdm" 'describe-mode
         "hdp" 'describe-package
         "hdP" 'finder-by-keyword
         "hds" 'describe-syntax
         "hdt" 'describe-theme
         "hdv" 'describe-variable
         "hdf" 'describe-function
         "hdv" 'describe-variable)

       (leader-set-keys
         "i" '(:ignore t :wk "insert")
         "ic" 'insert-char)

       (leader-set-keys
         "tm" '(:ignore t :wk "mode")
         "tmz" 'zone
         "tml" 'emacs-lisp-mode
         "tmL" 'lisp-interaction-mode
         "tmc" 'c++-mode
         "tmC" 'c-mode
         "tmf" 'flyspell-mode
         "tmF" 'follow-mode
         "tmt" 'text-mode
         "tmp" 'python-mode
         "tmr" 'ruby-mode
         "tms" 'shell-script-mode
         "tmw" 'whitespace-mode
         "tmo" 'org-mode
         "tmx" 'hexl-mode
         "tm?" 'toggle-rot13-mode
         "tmv" 'visual-line-mode
         "tmD" 'decipher
         "tmF" 'flyspell-prog-mode)

       (leader-set-keys
         "n" '(:ignore t :wk "narrrow/numbers")
         "nr" 'narrow-to-region
         "np" 'narrow-to-page
         "nw" 'widen)

       (leader-set-keys
         "r" '(:ignore t :wk "registers"))

       (leader-set-keys
         "x" '(:ignore t :wk "edit-text")
         "xa" 'describe-text-properties
         "xf" 'list-faces
         "xt" 'delete-trailing-whitespace)

       (leader-set-keys
         "s" '(:ignore t :wk "search/symbol")
         "sg" 'rgrep
         "sF" 'find-dired
         "sf" 'find-grep-dired
         "ss" 'isearch-forward)

       (leader-set-keys
         "8" '(:ignore t :wk "calculator")
         "8." 'calc-dispatch
         "88" 'calc
         "8p" '(calc-copy-to-buffer :wk "calc-paste"))

       (leader-set-keys
         "t" '(:ignore t :wk "toggles")
         "t-" 'toggle-buffer-header
         "ta" 'toggle-text-mode-auto-fill
         "tb" 'toggle-indicate-empty-lines
         "tc" 'toggle-case-fold-search
         "td" 'toggle-debug-on-error
         "te" '(read-only-mode :wk "toggle-read-only")
         "tf" '(+flylint :wk "toggle-linting")
         "ti" 'toggle-input-method
         "tL" 'toggle-lexical-binding
         "tl" 'toggle-truncate-lines
         "tn" '(display-line-numbers-mode :wk "toggle-line-numbers")
         "tq" 'toggle-debug-on-quit
         ;; "tr" 'toggle-relative-linum
         "tr" '(auto-revert-mode :wk "toggle-auto-revert")
         "tu" 'toggle-uniquify-buffer-names
         "tw" 'toggle-word-wrap
         "t TAB" 'set-indent-offset

         "tg" '(:ignore t :wk "gui")
         "tg|" 'toggle-scroll-bar
         "tg-" 'toggle-horizontal-scroll-bar
         "tgt" 'toggle-tool-bar-mode-from-frame
         "tgm" 'toggle-menu-bar-mode-from-frame)

       (leader-set-keys
         "f" '(:ignore t :wk "files/frames")
         "ff" 'find-file
         "fc" 'copy-file
         "fh" 'find-file-at-point
         "f\"" 'recover-this-file
         "f'" 'recover-file
         "fl" 'find-file-literally
         ;; frame
         "fx" 'delete-frame
         "fX" 'delete-other-frames
         "fm" '(make-frame-command :wk "new-frame")
         "f RET" '(make-frame-command :wk "new-frame")
         "f TAB" 'other-frame
         "f DEL" 'save-buffers-kill-emacs
         "fn" 'set-frame-name
         "fg" 'select-frame-by-name

         "fe" '(:ignore t :wk "emacs")
         "fev" 'emacs-version

         "fv" '(:ignore t :wk "variables")
         "fvd" 'add-dir-local-variable
         "fvs" 'add-file-local-variable
         "fvl" 'add-file-local-variable-prop-line

         "fvc" '(:ignore t :wk "copy")
         "fvcf" 'copy-dir-locals-to-file-locals
         "fvcd" 'copy-file-locals-to-dir-locals
         "fvcl" 'copy-dir-locals-to-file-locals-prop-line

         "fvr" '(:ignore t :wk "remove")
         "fvrv" 'kill-local-variable
         "fvrd" 'delete-dir-local-variable
         "fvrf" 'delete-file-local-variable
         "fvrl" 'delete-file-local-variable-prop-line)

       (leader-set-keys
         "j" '(:ignore t :wk "jump")
         "jx" 'goto-char
         "jl" 'goto-line
         "j TAB" '(move-to-column :wk "goto-column")
         "jd" '(dired-jump :wk "jump-to-directory")
         "jD" '(dired-jump-other-window :wk "jump-to-directory-other-window"))
     #+end_src

     #+BEGIN_SRC emacs-lisp
       (defconst emacs-window-map (make-sparse-keymap)
         "My keymap to interact with emacs windows.")

       (leader-set-keys
         "w" '(:ignore t :wk "windows")
         "w" emacs-window-map)

       (general-define-key
        :keymaps 'emacs-window-map
        "'" 'window-configuration-to-register)
     #+END_SRC

*** bindings
    where I put global bindings.

    *WARN*: never bind ESC, it *BREAKS EVERYTHING!*.

    Firstly, specify some defaults for the bindings I reclaimed from the terminal,
    this should just be the same keys they would have if they were not reclaimed.

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       [C-i] 'indent-for-tab-command
       [C-m] "RET" ; 'newline-and-indent
       )

      (general-define-key
       :states 'motion
       ;; evil doesn't seem to have a default for tab.
       ;; [C-i] 'indent-for-tab-command
       [C-m] 'evil-ret)
    #+END_SRC

    Let's also make some terminal exclusive bindings have the same affect in GUI emacs.

    #+BEGIN_SRC emacs-lisp
      (general-define-key "C-S-v" 'yank)
    #+END_SRC

    Now let's unbind some undesired emacs global keys

    #+BEGIN_SRC emacs-lisp
      (general-define-key
        "M-h"    nil                            ; was backward-kill-sentence
        "C-M-\\" nil                            ; was indent-region
        "M-b"    nil                            ; was backward-word
        "M-f"    nil                            ; was forward-word
        "C-k"    nil
        )
    #+END_SRC

    Now for global keys.

    Shell command bindings.

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       "C-!" 'shell-command
       "M-!" 'async-shell-command
       "C-|" 'shell-command-on-region+
       "M-|" 'async-shell-command-on-region+
       "C-:" 'completion-at-point)
    #+END_SRC

    Shell compatibility with vim

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       "C-z" 'suspend-frame)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       ;; char variants, can be found on C-h & C-l
       "C-b" 'backward-word
       "C-f" 'forward-word

       ;; rebound to default-indent-new-line in emacs>=27 and that's
       ;; bugged out in org mode.
       "C-M-j" 'indent-new-comment-line

       "M-l"             'recenter-top-bottom ;; was kill-sentence
       "M-L"             'downcase-word
       "M-H"             'upcase-word
       "C-M-a"           'mark-whole-buffer
       "C-/"             'toggle-comment-at-point
       "C-S-/"           'toggle-comment-at-point-alt
       "C-M--"           'indent-region
       "C-M-h"           'left-word
       "C-M-l"           'right-word
       "C-s"             'isearch-forward
       "M-j"             'custom-insert-line-below
       "M-k"             'custom-insert-line-above
       "M-r"             'revert-buffer
       ;; "C-q"             'quit-window
       "C-v"             'quoted-insert
       "C-j"             "RET"
       "C-<tab>"         'next-buffer
       "C-S-<tab>"       'previous-buffer
       "C-<iso-lefttab>" 'previous-buffer
       "RET"             'newline
       "<C-M-return>"    'comment-indent-new-line
       "<C-backspace>"   'evil-delete-backward-word
       "M-DEL"           'delete-forward-char
       "<C-S-backspace>" 'kill-word)
    #+END_SRC

    Root level remaps.

    #+begin_src emacs-lisp
      (when (functionp 'revert-buffer-quick)
        (general-define-key
         [remap revert-buffer] 'revert-buffer-quick                                   ; Why ever be prompted if nothings been modified?
         ))
    #+end_src

    My window map, like ~C-w~ in vim.

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       :states '(motion emacs)
       "C-w" emacs-window-map)

      (general-define-key
       :keymaps 'emacs-window-map
       "m"   'window-zen+
       "RET" 'window-zen+
       [C-m] 'window-zen+
       "M"   'window-zen-restore+
       "M-m" 'window-zen-restore+)

      ;; tmux leader compatability
      (general-define-key
       :states 'insert
       "C-q" (general-simulate-key "C-w" :state 'normal))

      (general-define-key
       :states '(normal motion emacs)
       "C-q" (general-simulate-key "C-w"))
    #+END_SRC

*** hooks
    Run a hook on buffer change

    #+BEGIN_SRC emacs-lisp
      (defvar switch-to-buffer-hook nil
        "Hook run when you switch to a buffer.")

      (advice-add 'switch-to-buffer
                  :after (defun switch-to-buffer--execute-hook (&rest args)
                           (apply 'run-hook-with-args 'switch-to-buffer-hook args)))
    #+END_SRC

    Run a hook when emacs changes themes.

    #+BEGIN_SRC emacs-lisp
      (defvar after-load-theme-hook nil
        "hook which is executed after loading a theme")

      (advice-add 'load-theme
                  :after (defun load-theme-execute-hooks (&rest _)
                           (run-hooks 'after-load-theme-hook)))
    #+END_SRC

*** search-recenter
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun +search-recenter (&rest args)
        "Recenter the current window after a search operation.
      This is a smart recentering command. If you're at the end of a buffer and a
      recentering to the middle ends up showing more trailing (empty) lines then
      it recenters to avoid them. Similair logic is in place for the start of the
      buffer. Otherwise it recenters to the middle."
        (let ((current-line (line-number-at-pos (point)))
              (window-height-2 (/ (window-body-height) 2))
              (first-line (line-number-at-pos (point-min)))
              (last-line (line-number-at-pos (max 0 (- (point-max) 1)))))
          (cl-destructuring-bind (line . recenter-positions)
              (cond ((>= (+ current-line window-height-2) last-line)
                     (cons last-line '(bottom)))
                    ((<= (- current-line window-height-2) first-line)
                     (cons first-line '(top)))
                    (t (cons nil '(middle))))
            (save-excursion
              (when line
                (goto-line line))
              (recenter-top-bottom)))))

      ;; Advise all search commands to perform a recentering.
      (advice-add 'evil-ex-search-forward  :after #'+search-recenter)
      (advice-add 'evil-ex-search-next     :after #'+search-recenter)
      (advice-add 'evil-ex-search-previous :after #'+search-recenter)
    #+END_SRC

*** display-buffer
    Customises how popup windows are shown/represented by emacs.

    Firstly lets add some display-buffer commands to show a window to the left/right
    of the current window.

    These functions have been adapted from [[https://stackoverflow.com/a/21544307/6247387][this]] stackoverflow answer.

    #+BEGIN_SRC emacs-lisp
      (defun display-buffer-left (buffer alist)
        "Display a buffer to the left of the current buffer.
      (1) If `buffer` is already displayed, then display it again in the same window.
      (2) If `buffer` is not already displayed, and if there is a window to the left,
          then display that `buffer` in said window.
      (3) If `buffer` is not already displayed, and if there is a window to the right, then
          use the selected window.
      (4) If all else fails, then create a new window to the left and display `buffer` there.
      (5) Select the target window which displays `buffer`."
        (let ((window
               (cond
                ((get-buffer-window buffer (selected-frame)))
                ;; ((window-in-direction 'above))
                ((window-in-direction 'left))
                ((window-in-direction 'right)
                 (selected-window))
                (t
                 (split-window (selected-window) nil 'left)))))
          (window--display-buffer buffer window 'window alist)))

      (defun display-buffer-right (buffer alist)
        "Display a buffer to the right of the current buffer.
      (1) If `buffer` is already displayed, then display it again in the same window.
      (2) If `buffer` is not already displayed, and if there is a window to the right,
          then display that `buffer` in said window.
      (3) If `buffer` is not already displayed, and if there is a window to the left, then
          use the selected window.
      (4) If all else fails, then create a new window to the right and display `buffer` there.
      (5) Select the target window which displays `buffer`."
        (let ((window
               (cond
                ((get-buffer-window buffer (selected-frame)))
                ;; ((window-in-direction 'above))
                ((window-in-direction 'right))
                ((window-in-direction 'left)
                 (selected-window))
                (t
                 (split-window (selected-window) nil 'right)))))
          (window--display-buffer buffer window 'window alist)))
    #+END_SRC

    Now lets add variants of all the builtin display-buffer commands to switch
    focus to windows after displaying-them. Personally I prefer this because it
    makes quitting windows easier (often just ~q~ after it pops up).

    *NOTE*: You can also get this affect by simply setting
    ~(body-function . select-window)~ in the configuration alist for a display-buffer
    action, but these give you the flexibility to select with one action or not select
    with another.

    #+BEGIN_SRC emacs-lisp
      (defmacro display-buffer-create-focus-method+ (func)
        `(defun ,(intern (concat (symbol-name func) "-and-focus")) (buffer alist)
           (when-let ((window (,func buffer alist)))
             (select-window window))))

      (display-buffer-create-focus-method+ display-buffer--maybe-same-window)
      (display-buffer-create-focus-method+ display-buffer-reuse-window)
      (display-buffer-create-focus-method+ display-buffer--maybe-pop-up-frame-or-window)
      (display-buffer-create-focus-method+ display-buffer-in-previous-window)
      (display-buffer-create-focus-method+ display-buffer-in-side-window)
      (display-buffer-create-focus-method+ display-buffer-use-some-window)
      (display-buffer-create-focus-method+ display-buffer-pop-up-frame)
      (display-buffer-create-focus-method+ display-buffer-below-selected)

      (display-buffer-create-focus-method+ display-buffer-left)
      (display-buffer-create-focus-method+ display-buffer-right)
    #+END_SRC

    By default I'd rather switch focus so lets enable it.

    #+BEGIN_SRC emacs-lisp
      (defmacro with-display-buffer-no-select-window (&rest body)
        "Within the scope of `body' update `display-buffer-fallback-action' to not
      select the displayed window by default."
        (declare (indent defun))
        `(let ((display-buffer-fallback-action
                (append (list (car display-buffer-fallback-action))
                        (list '(body-function . nil))
                        (cdr display-buffer-fallback-action))))
           ,@body))

      (defun display-buffer-no-select-window-advice (func &rest args)
        "Restore the default display buffer actions used by emacs."
        (with-display-buffer-no-select-window
          (apply func args)))

      ;; Make the default body-function for `display-buffer' select the
      ;; displayed window. You can override this in `display-buffer-alist'
      ;; by setting (body-function . nil) in the actions configuration.
      ;;
      ;; WARN This is a finnicky solution. If you ever decide to use a
      ;; different body-function or if you only want to select the window
      ;; with a specific handler instead of the global one then you'll
      ;; probably have to defer to one of the display+select actions defined
      ;; above.
      (setq display-buffer-fallback-action
            `(,@display-buffer-fallback-action
              (body-function . select-window)))
    #+END_SRC

    Firstly lets disable automatic selection for any buffers matching the following
    pattern. In some cases it makes sense to not select popups, such as those that are
    automatically shown (example: /flycheck-error-messages/) and will automatically
    close themselves.

    #+BEGIN_SRC emacs-lisp
      (push `(,(rx
                (or "*image-dired-display-image*"
                    "*Anaconda*"
                    "magit-diff: "
                    "*Bug Help*"
                    "*Flycheck error messages*"
                    (and bol "org-roam: ")
                    "*org-roam*"
                    "*HTTP Response*"
                    "*Compile-Log*"
                    (and bol "tree-sitter: ")
                    (and "*eglot-help for " (+ any) "*")))
              ,(car display-buffer-fallback-action)
              (body-function . nil)
              ,@(cdr display-buffer-fallback-action))
            display-buffer-alist)
    #+END_SRC

    Make compilation buffers take focus *unless* they're already open, in which case
    just keep them where they are. This lets me re-run compilations without constantly
    switching to the compilation-buffer.

    #+BEGIN_SRC emacs-lisp
      (push `(,(rx
                (or "*Async Shell Command*"
                    "*compilation*"
                    "*rustic-compilation*"
                    "*cargo-test*"))
              (display-buffer-reuse-window
               display-buffer--maybe-pop-up-frame-or-window-and-focus
               display-buffer-in-side-window-and-focus)
              (side . bottom)
              (window-height . 0.5)
              (reusable-frames . t)
              (body-function . nil))
            display-buffer-alist)
    #+END_SRC

    Some commands like ~next-error~ rely on the compilation-buffer being open and
    visible so they try to display them, but don't account for the buffer being
    open in a separate window.

    #+BEGIN_SRC emacs-lisp
      ;; Nice way to keep the compilation buffer open in a separate
      ;; frame but still update it as you move forward or back with
      ;; `next-error' and `previous-error'.
      (push `(,(defun next-error-hide-compilation-buffer+ (_buffer _action)
                 "Make `next-error' work when the compilation buffer is hidden
      or open in separate frame.
      By default `next-error' and it's derivatives pop open a compilation
      buffer or have this annoying bug where they keep showing the same
      buffer in new windows if the compilation-buffer isn't visible."
                 (member this-command '(next-error
                                        previous-error
                                        first-error
                                        compile-goto-error)))
              (display-buffer--maybe-same-window
               display-buffer-reuse-window
               display-buffer-no-window)
              ;; Allow reuse-window to check other [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Functions.html][frames]] and don't
              ;; switch frames by default.
              (reusable-frames . t)
              (inhibit-switch-frame . t)
              (body-function . nil))
            display-buffer-alist)
    #+END_SRC

    The warnings buffer is a special case. When emacs is starting up you don't want
    it to get selected (switched to) because after emacs starts it'll place the
    ~initial-buffer-choice~ into the currently selected window in which case you'll
    just get a split view of your initial buffer and no warnings.

    #+begin_src emacs-lisp
      (let ((pattern (rx "*Warnings*")))
        (push `(,pattern
                ,(car display-buffer-fallback-action)
                (body-function . nil)
                ,@(cdr display-buffer-fallback-action))
              display-buffer-alist)

        (add-hook 'emacs-startup-hook
                  (defun display-buffer-remove-warnings-handler+ ()
                    ;; A variant of `display-buffer-fallback-action' that only selects
                    ;; when the warnings window is not already visible. Makes it a whole
                    ;; lot less annoying.
                    (setf (cdr (assoc (rx "*Warnings*") display-buffer-alist))
                          `((display-buffer--maybe-same-window
                             display-buffer-reuse-window
                             display-buffer--maybe-pop-up-frame-or-window-and-focus
                             display-buffer-in-previous-window-and-focus
                             display-buffer-use-some-window-and-focus
                             display-buffer-pop-up-frame-and-focus)
                            (reusable-frames . t)
                            (side . right)
                            (window-width . 0.5)
                            (body-function . nil))))))
    #+end_src

*** uniarg
    #+BEGIN_SRC emacs-lisp
      (defmacro defun-universal-argument-operation (name docstring &rest body)
        `(defun ,name ()
           ,(eval docstring)
           (interactive)
           (prefix-command-preserve-state)
           (if (not prefix-arg)
               (universal-argument)
             ,@body)

           (when prefix-arg
             (universal-argument--mode))))
      (put 'defun-universal-argument-operation 'lisp-indent-function 'defun)

      (defun-universal-argument-operation smart-universal-argument
        "combine both universal-argument and universal-argument-more
      into a single invokeable command. for some reason, calling simply
      more before a regular prefix has been specified, will result in no
      overall prefix being set :("
        (universal-argument-more prefix-arg))

      ;; I'm not sure why universal-argument-more multiplies
      ;; the prefix arg by a factor of 4. I mean, 4 to 16 is
      ;; fine, but 16 to 64 is pretty unlikely to be what you
      ;; wanted. Adding by 4 would be more useful, especially
      ;; if you're using it to gauge indents.
      (defun-universal-argument-operation universal-argument-batch-increment
        "increment the current prefix-arg by 4"
        (let* ((prefix-value (prefix-numeric-value prefix-arg)))
          (setq prefix-arg
                (+ prefix-value 4))))

      (defun-universal-argument-operation universal-argument-batch-decrement
        "decrement the current prefix-arg by 4"
        (let* ((prefix-value (prefix-numeric-value prefix-arg)))
          (setq prefix-arg (- prefix-value 4))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (leader-set-keys
        "U" 'universal-argument
        "u" 'smart-universal-argument)

      (general-define-key
       :keymaps 'universal-argument-map
       "M-u" 'universal-argument-batch-increment
       "M-U" 'universal-argument-batch-decrement)
    #+END_SRC

*** multi-scratch
    An extension of the persistent scratch function which provides functions to create a new
    scratch buffer and interactively switch to one.

    *WARN* multi-scratch doesn't save the first scratch buffer. That's a real scratch buffer,
    which is expected to get erased every time emacs is killed. All other scratch buffers
    are properly restored though.

    First we define what a scratch buffer should look like, and add facilities for
    creating a new scratch buffer interactively.

    #+BEGIN_SRC emacs-lisp
      (defconst scratch-buffer-name "*scratch*"
        "Name of users scratch buffer")

      (defun scratch-buffer-p (&optional buffer)
        (string-match
         (regexp-quote scratch-buffer-name)
         (buffer-name buffer) 0))

      (defun create-new-empty-buffer (&optional buffer-name)
        "Creates and returns a new empty scratch like buffer
      with prefix it prompts you for the name of the buffer.
      if called interactively, the new buffer is switched to."
        (interactive "P")
        (let* ((def-buf-name scratch-buffer-name)
               (buffer-name
                (cond
                 ((stringp buffer-name) buffer-name)
                 (buffer-name (read-buffer "buffer name: " def-buf-name))
                 (t def-buf-name)))
               (buffer-name (generate-new-buffer-name buffer-name))
               (buffer (get-buffer-create buffer-name)))
          (with-current-buffer buffer
            (funcall-interactively initial-major-mode))
          (when (called-interactively-p 'interactive)
            (switch-to-buffer buffer))
          buffer))
    #+END_SRC

    Now a command to list and jump to scratch buffers.

    #+BEGIN_SRC emacs-lisp
      (defun scratch-buffers ()
        (require 'persistent-scratch)                                                               ; Make sure scratches have been restored
        (sort
         (seq-filter #'scratch-buffer-p (buffer-list))
         (lambda (x y) (string< (buffer-name x) (buffer-name y)))))

      (defun switch-to-scratch-buffer (&optional prefix)
        "Switch to the scratch buffer
      with prefix, prompts for which buffer named like the scratch
      buffer to switch to. If none exists, a new scratch buffer will
      be made. If only one exists, it will be switched to and if more
      than one exists then prompts for it."
        (interactive "P")
        (let ((buf
               (if prefix
                   (let* ((buffer-list (scratch-buffers))
                          (buffer-names (mapcar #'buffer-name buffer-list)))
                     (cond
                      ((zerop (length buffer-list))
                       (create-new-empty-buffer))
                      ((eq 1 (length buffer-list))
                       (car buffer-list))
                      (t (completing-read "Switch to buffer: " buffer-names))))
                 (or (get-buffer scratch-buffer-name)
                     (call-interactively 'create-new-empty-buffer)))))
          (when (called-interactively-p 'any)
            (switch-to-buffer buf))
          buf))
    #+END_SRC

    Setup persistent scratch support. allows scratch buffers to survive emacs sessions.

    #+BEGIN_SRC emacs-lisp
      (use-package persistent-scratch
        :straight t
        :init
        (defun multiscratch-scratch-buffer-p (&optional buffer)
          "Persist all but the main scratch buffer."
          (and (not (string= (buffer-name buffer) scratch-buffer-name))
               (scratch-buffer-p buffer)))

        (setq persistent-scratch-save-file (share! "scratch.el")
              persistent-scratch-autosave-interval 800
              persistent-scratch-scratch-buffer-p-function #'multiscratch-scratch-buffer-p)

        (let* ((loaded)
               (handle (lambda ()
                         (when (and (not loaded)
                                    (file-exists-p persistent-scratch-save-file))
                           (persistent-scratch-restore)
                           (setq loaded t)))))
          (add-transient-hook! #'scratch-buffers         (funcall handle))
          (add-transient-hook! #'create-new-empty-buffer (funcall handle)))

        :config
        (add-hook 'kill-emacs-hook #'persistent-scratch-save)

        :leader
        ("bs"    'switch-to-scratch-buffer
         "b RET" 'create-new-empty-buffer))
    #+END_SRC

*** birthday
    #+BEGIN_SRC emacs-lisp
      (when (string-equal (format-time-string "%d.%m" (current-time))
                          "08.12")
        (add-hook 'emacs-startup-hook 'animate-birthday-present))
    #+END_SRC

* Core
  core functions needed to edit with emacs and basic syntax sugar functions, inspired
  by [[https://github.com/hlissner/doom-emacs/blob/develop/core/core-lib.el][doom]].

  This macro lets you create basic interactive lambdas that take no arguments easily.

  #+begin_src emacs-lisp
    (defmacro lambda! (&rest body)
      "Expands to (lambda () (interactive) ,@body).
    A factory for quickly producing interaction commands, particularly for keybinds
    or aliases."
      (declare (doc-string 1) (pure t) (side-effect-free t) (indent defun))
      `(lambda () (interactive) ,@body))
  #+end_src

  Convert keywords to symbols.

  #+BEGIN_SRC emacs-lisp
    (defun keyword-sym-normalise! (sym)
      "convert a keyword symbol, SYM, to a non-keyword symbol.
    eg. (keyword-sym-normalise! :hello) ;; => 'hello"
      (let ((sym-string (symbol-name sym)))
        (if (string-prefix-p ":" sym-string)
            (intern (substring sym-string 1))
          sym)))
  #+END_SRC

  A safe variant of ~nconc~ that avoids cyclic lists, source [[https://www.emacswiki.org/emacs/DestructiveOperations#toc4][Destructive Operations]].

  #+begin_src emacs-lisp
    (defun nconc-safe! (ls1 ls2)
      "`nconc', but avoids creating circular lists."
      (let ((tail ls1))
        (while (and (cdr tail) (not (eq tail ls2)))
          (setq tail (cdr tail)))
        (unless (eq tail ls2)
          (if (null tail)
              (setq ls1 ls2)
            (setcdr tail ls2)))
        ls1))
  #+end_src

  Wrapper that suppresses emacs attempts to write a message.

  #+begin_src emacs-lisp
    (defun inhibit-messages-wrapper! (func &rest args)
      (let ((inhibit-message t))
        (apply func args)))
  #+end_src

  Use ~assoc~ to retrieve an element from an alist and then delete that element.

  #+begin_src emacs-lisp
    (defmacro assoc-pop! (key alist)
      `(let ((result (assoc ,key ,alist)))
         (setq ,alist (delete result ,alist))
         result))
  #+end_src

  Predicate for whether a buffer-object references a killed buffer or not, see [[https://ftp.gnu.org/old-gnu/Manuals/elisp-manual-20-2.5/html_node/elisp_408.html][here]].

  #+begin_src emacs-lisp
    (defun buffer-killed-p (buffer)
      "Return t if BUFFER is killed."
      (not (buffer-name buffer)))
  #+end_src

  String truncation functions.

  #+begin_src emacs-lisp
    (defmacro string-truncate-left! (str count)
      `(and ,str
            (if (> (length ,str) ,count)
                (substring ,str ,count)
              "")))

    (defmacro string-truncate-right! (str count)
      `(and ,str
            (let ((len (length ,str)))
              (if (> len ,count)
                  (substring ,str 0 (- len ,count))
                ""))))

    (defmacro string-truncate! (str left right)
      `(and ,str
            (let ((len (length ,str)))
              (if (> len (+ ,left ,right))
                  (substring ,str ,left (- len ,right))
                ""))))
  #+end_src

  #+begin_src emacs-lisp
    (cl-defmacro save-vars-with-temp-buffer! ((&rest vars) &rest body)
      "Store the values of VARS in current buffer, and then create a
    temp buffer reassigning the values of VARS and then invoking BODY."
      (declare (indent defun))
      (let* ((current-vars
              (cl-loop with name = nil
                       for var in vars
                       do (setq name (symbol-name var))
                       collect (list (intern (concat "-current-" name))
                                     var)))
             (assign-vars
              (cl-loop for var in current-vars
                       collect (list (nth 1 var) (car var)))))
        `(let ,current-vars
           (with-temp-buffer
             (let ,assign-vars
               ,@body)))))
  #+end_src

** plist-bind
   #+BEGIN_SRC emacs-lisp
     (cl-defmacro plist-bind! ((list &rest props) &rest body)
       "declare local bindings in BODY using a property list LIST.
     This functions exists as an alternative to `cl-defmacro's very limited support
     for variable argument lists alongside keyword argument lists. A use case I've
     encountered so often, it merited creating this.

     This function accepts a LIST argument and then a bunch of property specifications.
     For every property in PROPS, that property is popped from LIST and then included
     in the local scope of BODY. A property can be specified as an ALIST, in which case
     the `car' of the list is the property name and the `cdr' is the default value for
     the property.

     WARN LIST should be an identifier for a list variable... not a LIST by itself.

     The remaining value of LIST is all the properties which were not provided in the
     spec.
     "
       `(let* ((,list (cl-copy-list ,list))
               ,@(cl-loop for prop in props
                          with default = nil
                            when (listp prop)
                              do (setq default (cdr prop) prop (car prop))
                            end
                            collect (list (keyword-sym-normalise! prop)
                                          `(plist-pop! ,list ,prop ,default))))
          ,@body))
     (put 'plist-bind! 'lisp-indent-function 'defun)
   #+END_SRC

** host
   Remember my host configuration across systems.

   #+BEGIN_SRC emacs-lisp
     (autoload #'host! "+host" nil t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle (lisp! "+host.el")
     (defconst +hosts-alist
       (let ((hosts-file (etc! "hosts")))
         (if (file-exists-p hosts-file)
             (with-temp-buffer
               (insert-file-contents hosts-file)
               (read (current-buffer)))
           (warn "hosts config file not found: %s" hosts-file)))
       "list of devices I own.")

     (defun host! (id)
       "Check if current host matches ID
     if ID is a string it's matched against the currents hosts
     hostname. otherwise id is looked for in `+hosts-alist'
     and then compared against. "
       (unless (stringp id)
         (setq id (cdr (assoc id +hosts-alist))))

       (when id
         (string-equal id (system-name))))

     (provide '+host)
   #+END_SRC

** find-emacs
   Find files related to my own configuration/directory layouts.

   #+BEGIN_SRC emacs-lisp
     (defun find-dotemacs-file ()
       (interactive)
       (find-file (join-path user-emacs-directory "init.el")))

     (defun find-dotemacs-directory ()
       (interactive)
       (find-file user-emacs-directory))

     (defun find-dotemacs-org-file ()
       (interactive)
       (find-file (join-path user-emacs-directory "init.org")))

     (defun find-dotemacs-snippets-file ()
       (interactive)
       (find-file (etc! "snippets.org")))

     (defun find-dotemacs-config-file (&optional arg)
       (interactive "P")
       (cl-destructuring-bind (file . point)
           (or (unless arg
                 (let ((conf (etc! "+config.el")))
                   (and (file-exists-p conf)
                        (cons conf nil))))
               (save-window-excursion
                 (find-dotemacs-org-file)
                 (require 'imenu)
                 (cons (buffer-file-name)
                       (cdr (cl-assoc "* Config" (imenu--make-index-alist t) :test #'string-equal)))))
         (if file
             (progn
               (find-file file)
               (when point
                 (goto-char point)))
           (user-error "No configuration file found"))))

     (defun find-file-from-dotemacs ()
       (interactive)
       (let ((default-directory user-emacs-directory))
         (call-interactively 'find-file)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (leader-set-keys
       "fec" 'find-dotemacs-org-file
       "fed" 'find-dotemacs-directory
       "fey" 'find-dotemacs-snippets-file
       "fel" 'find-dotemacs-file
       "fef" 'find-file-from-dotemacs
       "fex" 'find-dotemacs-config-file)
   #+END_SRC

** buffers
   #+BEGIN_SRC emacs-lisp
     (defun rename-buffer-file (buffer &optional new-name)
       "renames the file associated with the buffer BUFFER.
     if the buffer isn't visiting a file or the visited file
     doesn't exist on disk, this function is equivalent to
     simply changing the visited file name for BUFFER."
       (interactive (list (current-buffer)))

       (or new-name
           (setq new-name (read-file-name "new-name: ")))

       (let* ((buffer-file (buffer-file-name buffer))
              (modified-p (buffer-modified-p buffer))
              (directory (file-name-directory new-name))
              (src-exists (file-exists-p buffer-file))
              (dst-exists (file-exists-p new-name)))
         (with-current-buffer buffer
           ;; destination doesn't exist, so can write
           ;; or
           ;; user agrees to overwrite, so can write
           (when (or (not dst-exists)
                     (yes-or-no-p "file already exists, overwrite it:"))
             ;; only rename buffer file if it exists
             (when (and buffer-file src-exists)
               (unless (file-directory-p directory)
                 (mkdir directory t))
               (rename-file buffer-file new-name t)
               (message "moved file '%s' to '%s'" buffer-file new-name))

             (set-visited-file-name new-name)
             (set-buffer-modified-p modified-p)))))

     (defun delete-buffer-file ()
       (interactive)
       (let ((buffer (current-buffer))
             (filename (buffer-file-name))
             (name (buffer-name)))
         (if (not filename)
             (message "buffer %s is not visiting a file" name)
           (when (yes-or-no-p "Are you sure you want to delete this file? ")
             (when (file-exists-p filename)
               (delete-file filename t))

             (kill-buffer buffer)))))

     (defun smart-buffer-file-name (&optional buffer)
       (with-current-buffer (or buffer (current-buffer))
         (or (buffer-file-name)
             (and (derived-mode-p 'dired-mode)
                  (string-trim-right (dired-current-directory) "/"))
             (and (boundp 'org-capture-mode)
                  (buffer-file-name (org-capture-get :buffer t)))
             (and (boundp 'org-src-mode)
                  (bound-and-true-p org-src-source-file-name))
             (and (derived-mode-p 'notmuch-show-mode)
                  (notmuch-show-get-filename)))))

     (defmacro defun-show-and-copy-command (name &rest body)
       "Define a function which uses BODY to generate a string which is then shown and copied.
     The prefix behaviour of the passed function can be used insert the output of BODY or
     to save the current point and then do so.
     "
       `(defun ,(intern (concat "show-and-copy-" (symbol-name name))) (&optional arg)
          (interactive "P")
          (let ((msg ,@body))
            (when msg
              (or (stringp msg)
                  (setq msg (format "%s" msg)))                                      ; Force msg to be a string
              ;; perform insertion behaviour
              (when (consp arg)
                (if (eq (car arg) 4)
                    (insert msg)
                  (save-excursion
                    (insert msg))))
              ;; show and then copy msg
              (message msg)
              (kill-new msg)))))

     (defun-show-and-copy-command buffer-file-basename
       (file-name-nondirectory (or (smart-buffer-file-name) "")))

     (defun-show-and-copy-command buffer-file-name
       (smart-buffer-file-name))

     (defun-show-and-copy-command buffer-name
       (buffer-name))

     (defun-show-and-copy-command directory
       (file-name-directory (or (smart-buffer-file-name) default-directory)))

     (cl-defun write-backup (&optional prefix (silent t))
       "manually force emacs to backup the current buffer.
     By default doesn't do anything when the current buffer hasn't been modified.
     Pass a single-prefix `C-u` to force backing-up even if the buffer has not been
     modified. Pass two prefixes `C-u C-u`to backup the buffer and then save; this
     in affect backs up the last save and then saves the current buffer."
       (interactive "P")
       (let* ((modified (buffer-modified-p))
              (save-after (and (listp prefix)
                               (eq (car prefix) 8)))
              (save-before (and (not save-after)
                                modified)))
         (if (and (not prefix)
                  (not modified))
             (or silent
                 (message "buffer not modified since last save"))
           (or save-before (save-buffer))

           ;; buffer-backed-up is permenently buffer-local so you have to account
           ;; for when it's already been backed up and when you first back it up.
           (if buffer-backed-up
               (let (buffer-backed-up)
                 (backup-buffer))
             (backup-buffer))

           (or save-after (save-buffer)))))

     (defun write-kill-buffer (&optional buffer-or-name confirm)
       "write buffer to file and then kill it"
       (interactive)
       (let ((buffer (get-buffer (or buffer-or-name (current-buffer)))))
         (when (buffer-modified-p)
           (write-file (or (buffer-file-name) (read-file-name "write file: "))
                       confirm))

         (when (or (not confirm)
                   (y-or-no-p (format "are you sure you want to kill this buffer (%s): " buffer)))
           (let ((window (get-buffer-window buffer)))
             (kill-buffer buffer)
             (when (and window (> (length (window-list)) 1))
               (delete-window window))))))

     (defun goto-home-buffer+ ()
       (interactive)
       (unless initial-buffer-choice
         (user-error "No initial buffer choice setup"))
       (funcall initial-buffer-choice))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (leader-set-keys
       "f~" 'write-backup
       "fa" 'write-autosave
       "fD" 'delete-buffer-file
       "fR" 'rename-buffer-file
       "by" 'show-and-copy-buffer-name
       "fy" 'show-and-copy-buffer-file-name
       "fu" 'show-and-copy-directory
       "f%" 'show-and-copy-buffer-file-basename
       "bh" '(goto-home-buffer+ :wk "switch-to-home"))
   #+END_SRC

** whitespace
   Configure displaying of trailing whitespace. Now I personally am not a fan of source code
   with invisible trailing whitespace, it takes up meaningless space ([[https://www.youtube.com/watch?v=SsoOG6ZeyUI][insert irrelevent video
   here]]) and probably annoys the hell out of other people with editors smart enough to
   see it.

   So I enable displaying of trailing whitespace by default in every mode. That way you can
   see and remove it. If you'd like to disable whitespace display, then you'll have to append
   to either of the following variables or optionally attach the following hook function.

   #+BEGIN_SRC emacs-lisp
     (defun +hide-trailing-whitespace ()
       (setq show-trailing-whitespace nil))
   #+END_SRC

   Here we define the configuration variables used for determining whether to enable
   visible whitespace or not.

   #+BEGIN_SRC emacs-lisp
     (defvar +whitespace-exempt-modes '(help-mode
                                        Buffer-menu-mode
                                        ibuffer-mode
                                        eshell-mode
                                        term-mode
                                        minibuffer-mode
                                        minibuffer-inactive-mode
                                        eshell-mode)
       "Modes under which no trailing whitespace is shown")

     (defvar +whitespace-exempt-buffers
       (list (rx "*Ibuffer confirmation*")
             (rx "*Org Export Dispatcher*")
             (rx "*eldoc*")
             (rx "*Completions*"))
       "Regexp matching buffer names where no trailing whitespace is shown.")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun set-trailing-whitespace--mode-p ()
       "Check the mode of the current buffer, to see whether trailing
     whitespace should be shown."
       (not (and +whitespace-exempt-modes
                 (apply 'derived-mode-p
                        +whitespace-exempt-modes))))

     (defun set-trailing-whitespace--name-p ()
       "Check the name of the current buffer, to see whether trailing
     whitespace should be shown."
       (not
        (and +whitespace-exempt-buffers
             (let ((it (buffer-name)))
               (cl-find-if (lambda (regexp)
                             (string-match-p regexp it))
                           +whitespace-exempt-buffers)))))

     (defun set-trailing-whitespace (&rest _)
       (setq show-trailing-whitespace
             ;; when both name and mode decide you can show
             ;; whitespace, then show it. otherwise when at
             ;; least one says no, then hide it.
             (and (set-trailing-whitespace--mode-p)
                  (set-trailing-whitespace--name-p))))
   #+END_SRC

   Connect the aforementioned functions to the appropriate emacs hooks.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-change-major-mode-hook #'set-trailing-whitespace)
   #+END_SRC

** indentation
   Configure the preferred indentation for buffers. Emacs doesn't really have a nice
   builtin way to do this across multiple modes. I got tired of always having to
   remember special variables for each mode so I've defined the following alist to
   store indent configurations and a command ~set-indent-offset~ which automatically
   (or manually sets the desired indent).

   ~+indent-config~ is the main user configuration variable for indentation. This is
   used when no alternative indent config (such as buffer-local variables, or
   editorconfig files) specify how to deal with the current buffer.

   #+begin_src emacs-lisp
     (defvar +indent-config '((t . 4))
       "alist configuring preferred indentation for buffers.
     the `car' of an entry is used to match which buffer it's applied to
     and `cdr' is used to determine the value of it.

     the `car' can be a symbol, a string, a function or some expression
     which evaluates to t. if it's a symbol, the major mode of the
     buffer is compared against it. if it's a string the name of the
     buffer is matched against it.

     the cons can be a number, a function or some expression which
     evaluates to a number.

     NOTE: indentation is set exclusively when a buffer-mode change
           occurs, changing the buffer name doesn't alter the indent.
     ")

     (defvar-local +indent nil
       "Override the local indent for the current file.")
   #+end_src

   A package that lets you configure project parameters (indent size,
   line endings etc.) in a [[https://editorconfig.org/][single configuration]] file.

   I really only need the parsing facilities so that I can extract the
   indent-offset but editorconfig also has a mapping of common indent
   variables for major-modes that's bound to come in very useful „ÉΩ(*¬¥–∑ÔΩÄ*)Ôæâ.

   #+begin_src emacs-lisp
     (use-package editorconfig
       :straight t
       :demand t
       :custom
       (editorconfig-lisp-use-default-indent t)

       :config
       (push '(plantuml-mode plantuml-indent-level)
             editorconfig-indentation-alist)

       (push '(asm-mode comment-column)
             editorconfig-indentation-alist))
   #+end_src

   #+BEGIN_SRC emacs-lisp
     (defun +indent-offset (&optional buffer)
       "Use `+indent-config' to find the preffered indent for BUFFER."
       (with-current-buffer (or buffer (current-buffer))
         (cl-loop with matcher = nil
                  with indent  = nil
                  for cfg in +indent-config
                  do (setq matcher (car cfg))
                  if (cond
                      ((eq matcher t) t)
                      ((symbolp matcher) (eq matcher major-mode))
                      ((stringp matcher) (string-match-p matcher (buffer-name)))
                      ((functionp matcher) (funcall matcher))
                      (t (eval matcher)))
                  do (setq indent (cdr cfg))
                  and return (if (functionp indent)
                                 (funcall indent)
                               indent))))

     (defun set-indent-offset (&optional indent tab-size)
       "Set the indentation level of the current buffer.
     this method uses `+indent-config' to determine what
     the indentation of the current buffer should be and then sets
     it. Also setting any mode dependent, specific indent bindings,
     alongside it.

     You can pass a specific value for the indent as an argument and
     the current buffers indentation will be set to that."
       (interactive (let ((size (read-number "Indent: ")))
                      (list size size)))
       (let* ((conf (or (ignore-errors
                          (funcall editorconfig-get-properties-function))
                        (make-hash-table :size 0)))
              (style (or (gethash 'indent_style conf)
                         (if indent-tabs-mode "tab" "space"))))
         (setq indent (or indent                                                     ; Interactive argument.
                          +indent                                                    ; Directory-local variable.
                          (gethash 'indent_size conf)                                ; Extract from editorconfig.
                          (+indent-offset))                                          ; Calculate from `+indent-config'.
               tab-size (or tab-size
                            (gethash 'tab_width conf)))

         (when (numberp indent)
           (setq indent (number-to-string indent)))
         (when (numberp tab-size)
           (setq tab-size (number-to-string tab-size)))

         (if (not indent)
             (and (called-interactively-p 'interactive)
                  (user-error "set-indent-offset: unable to determine indent for current buffer."))
           (editorconfig-set-indentation style indent tab-size))))

     (add-hook 'after-change-major-mode-hook #'set-indent-offset)
   #+END_SRC

** lisp-indent
   Lisp indent-function taken from [[https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned][here]].

   #+BEGIN_SRC emacs-lisp
     (defun +emacs-lisp-indent-function (indent-point state)
       "A replacement for `lisp-indent-function'.

     Indents plists more sensibly. Adapted from
     https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned"
       (let ((normal-indent (current-column))
             (orig-point (point))
             ;; TODO Refactor `target' usage (ew!)
             target)
         (goto-char (1+ (elt state 1)))
         (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
         (cond ((and (elt state 2)
                     (or (not (looking-at-p "\\sw\\|\\s_"))
                         (eq (char-after) ?:)))
                (unless (> (save-excursion (forward-line 1) (point))
                           calculate-lisp-indent-last-sexp)
                  (goto-char calculate-lisp-indent-last-sexp)
                  (beginning-of-line)
                  (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t))
                (backward-prefix-chars)
                (current-column))
               ((and (save-excursion
                       (goto-char indent-point)
                       (skip-syntax-forward " ")
                       (not (eq (char-after) ?:)))
                     (save-excursion
                       (goto-char orig-point)
                       (and (eq (char-after) ?:)
                            (eq (char-before) ?\()
                            (setq target (current-column)))))
                (save-excursion
                  (move-to-column target t)
                  target))
               ((let* ((function (buffer-substring (point) (progn (forward-sexp 1) (point))))
                       (method (or (function-get (intern-soft function) 'lisp-indent-function)
                                   (get (intern-soft function) 'lisp-indent-hook))))
                  (cond ((or (eq method 'defun)
                             (and (null method)
                                  (> (length function) 3)
                                  (string-match-p "\\`def" function)))
                         (lisp-indent-defform state indent-point))
                        ((integerp method)
                         (lisp-indent-specform method state indent-point normal-indent))
                        (method
                         (funcall method indent-point state))))))))

     (setq lisp-indent-function #'+emacs-lisp-indent-function)
   #+END_SRC

** yank-indent-adjust
   adjust indentation of yanked text in some modes... because doing so manually is a
   pain :tongue:. Initially sourced from, the venerable, [[https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el#L99-L124][magnars]].

   #+BEGIN_SRC emacs-lisp
     (defvar yank-indent-modes '(prog-mode
                                 sgml-mode
                                 js2-mode)
       "Modes in which to automatically indent regions that are yanked (or yank-popped).")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defvar yank-advised-indent-threshold 1000
       "Threshold (# chars) over which indentation does not automatically occur.")

     (defun yank-advised-indent-function (beg end)
       "Do indentation, as long as the region isn't too large."
       (if (<= (- end beg) yank-advised-indent-threshold)
           (indent-region beg end nil)))

     (defmacro with-auto-indent-satisfied (prefix-var &rest body)
       `(when (and (not ,prefix-var)
                   (--any? (derived-mode-p it) yank-indent-modes))
          ,@body))
     (put 'with-auto-indent-satisfied 'lisp-indent-function 'defun)

     (defun yank--auto-indent (&optional arg)
       "if mode is in `yank-indent-modes' indent yanked text
     doesn't do anything if a prefix arg is given."
       (with-auto-indent-satisfied arg
         (let ((transient-mark-mode nil))
           (yank-advised-indent-function
            (region-beginning) (region-end)))))

     (advice-add 'yank     :after #'yank--auto-indent)
     (advice-add 'yank-pop :after #'yank--auto-indent)

     (defun yank-unindented ()
       (interactive)
       (yank 1))

     (with-eval-after-load 'evil
       (defun evil-visual-paste--auto-indent (_ &optional register _)
         ;; not sure what yank handler is for, leave it in, to avoid errors
         "same as `yank--auto-indent', but for evil visual yank replace."
         (with-auto-indent-satisfied register
           (let ((transient-mark-mode nil))
             (yank-advised-indent-function
              (region-beginning) (region-end)))))

       (advice-add 'evil-visual-paste :after #'evil-visual-paste--auto-indent)
       (advice-add 'evil-paste-after  :after #'evil-visual-paste--auto-indent)
       (advice-add 'evil-paste-before :after #'evil-visual-paste--auto-indent))
   #+END_SRC

** fonts-emojis
   #+BEGIN_SRC emacs-lisp
     ;; adapted from [[https://github.com/zonuexe/emoji-fontset.el/blob/master/emoji-fontset.el][emoji-fontset]]
     (let ((emoji-font-family
            (cl-case window-system
              ('w32 "Segoe UI Emoji")
              ('ns  "Apple Color Emoji")
              (t    "Symbola"))))
       (cl-loop
        for (x . y) in '((#x1f000 . #x1f02f) ;; Mahjong Tiles
                         (#x1f0a0 . #x1f0ff) ;; Playing Cards
                         (#x1f110 . #x1f19a) ;; Enclosed Alphanumeric Supplement
                         ;; Regional Indicator Symbol, Enclosed Ideographic Supplement,
                         ;; Emoticons, Transport and Map Symbols, Alchemical Symbols
                         (#x1f1e6 . #x1f8ff))
        do (setq x (decode-char 'ucs x)
                 y (decode-char 'ucs y))
        do (set-fontset-font "fontset-default" (cons x y) emoji-font-family)))
   #+END_SRC

** syntax-tables
   #+BEGIN_SRC emacs-lisp
     (cl-defsubst modify-syntax! (syntax &optional syntax-table)
       "Helper for `modify-syntax-entry' which modifies in mass.
          SYNTAX should be an alist of conses of (CHAR . SYNTAX).
          You can optionally specify a SYNTAX-TABLE to modify with SYNTAX."
       (declare (indent defun))
       (cl-loop for (char . type) in syntax
                do (modify-syntax-entry char type syntax-table)))

     (defmacro modify-syntax-hook! (mode syntax)
       "Helper for `modify-syntax!' which modifes syntax on a hook.
          Useful for certain major modes that seem to reset their syntax-tables
          everytime their initialised."
       (declare (indent defun))
       (let* ((mode (eval mode))
              (mode-name (symbol-name mode)))
         `(progn
            (add-hook ',(intern (concat mode-name "-hook"))
                      (defun ,(intern (concat mode-name "-setup-syntax+")) (&optional syntax-table)
                        (modify-syntax! ,syntax syntax-table))))))
   #+END_SRC

** library
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (lisp! "lib"))
   #+END_SRC

*** lib-misc
    :PROPERTIES:
    :header-args+: :tangle (lisp! "lib/+lib-misc.el")
    :END:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package +lib-misc
        :commands (toggle-lexical-binding
                   keymaps-at-point
                   toggle-relative-linum
                   toggle-buffer-header
                   cycle-hook+))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun toggle-lexical-binding (&optional arg)
        (interactive "P")
        (setq lexical-binding
              (if (not arg)
                  (not lexical-binding)
                (or (listp arg)
                    (not (zerop arg)))))

        (message "lexical binding: %s" (if lexical-binding
                                           (propertize "enabled" 'face 'compilation-info)
                                         (propertize "disabled" 'face 'compilation-error))))

    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defvar-local header-line-actual-format nil
        "value of `header-line-format' before being modified by `toggle-buffer-header'.")

      (defun toggle-buffer-header (&optional arg no-error)
        (interactive "P")
        (let ((showing (if arg
                           (not (zerop (prefix-numeric-value arg)))
                         header-line-actual-format)))
          (if showing
              (if (not header-line-actual-format)
                  (unless no-error
                    (user-error "tried to restore header-line: nil"))
                (setq header-line-format  header-line-actual-format
                      header-line-actual-format nil))
            (setq header-line-actual-format header-line-format
                  header-line-format nil))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun toggle-relative-linum (&optional arg)
        "toggle relative line numbers in the current buffer
      when ARG is given and is 0, then relative line numbers are disabled,
      otherwise if ARG is greater than 0 then they're enabled and if ARG is
      nil then relative line-numbers are toggled."
        (interactive "P")
        (setq display-line-numbers
              (cond
               ((and arg (zerop (prefix-numeric-value arg)))
                t)
               (arg 'relative)
               (t
                (if (eq display-line-numbers 'relative) t 'relative)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun keymaps-at-point ()
        "List entire keymaps present at point."
        (interactive)
        (let ((map-list
               (list
                (mapcar (lambda (overlay)
                          (overlay-get overlay 'keymap))
                        (overlays-at (point)))
                (mapcar (lambda (overlay)
                          (overlay-get overlay 'local-map))
                        (overlays-at (point)))
                (get-text-property (point) 'keymap)
                (get-text-property (point) 'local-map))))
          (apply #'message
                 (concat
                  "Overlay keymap: %s\n"
                  "Overlay local-map: %s\n"
                  "Text-property keymap: %s\n"
                  "Text-property local-map: %s")
                 map-list)))
    #+END_SRC

    #+begin_src emacs-lisp
      (defun cycle-hook+ (hook-var &optional global)
        "Interactively cycle the order of functions in HOOK-VAR.
      When GLOBAL is true then the global value of the hook is modified
      even if there's a buffer-local value."
        (interactive
         (list (intern (completing-read
                        "Hook variable: "
                        obarray #'boundp t nil nil nil))
               current-prefix-arg))
        (unless (boundp hook-var)
          (error "Hook variable %s not bound" hook-var))

        (let* ((hook-value (if global
                               (default-value hook-var)
                             (eval hook-var)))
               (hook-value (if (or (not hook-value)
                                   (not (listp hook-value)))
                               (error "The hook variable %s is not a hook" hook-var)
                             hook-value))
               (contains-t (member t hook-value))
               (hook-value (remove t hook-value))
               (cycle-to
                (cl-position (intern
                              (completing-read "Cycle hook: "
                                               (lambda (str pred action)
                                                 (if (eq action 'metadata)
                                                     ;; Don't resort the order of the hook.
                                                     ;; It makes cycling confusing.
                                                     '(metadata
                                                       (category . function)
                                                       (cycle-sort-function . identity)
                                                       (display-sort-function . identity))
                                                   (complete-with-action action hook-value str pred)))
                                               nil t nil 'foo-history))
                             hook-value))
               (new-hook-value hook-value))
          (unless (zerop cycle-to)
            (setq new-hook-value (append (nthcdr cycle-to hook-value)
                                         (cl-subseq hook-value 0 cycle-to)
                                         (when contains-t
                                           (list t)))))
          (message "%s" new-hook-value)
          (funcall (if global #'set-default 'set) hook-var new-hook-value)))
    #+end_src

    #+begin_src emacs-lisp
      (provide '+lib-misc)
    #+end_src

*** lib-text
    :PROPERTIES:
    :header-args+: :tangle (lisp! "lib/+lib-text.el")
    :END:

    Manipulate chunks of text.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package +lib-text
        :commands (dos2unix
                   unix2dos
                   toggle-comment-at-point
                   toggle-comment-at-point-alt
                   custom-insert-line
                   custom-insert-line-below
                   custom-insert-line-above
                   evil-join-backwards))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun dos2unix ()
        "Not exactly but it's easier to remember"
        (interactive)
        (set-buffer-file-coding-system 'unix 't))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun unix2dos ()
        (interactive)
        (set-buffer-file-coding-system 'dos 't))
    #+END_SRC

    Comment regions of text or by default, the current line.

    #+BEGIN_SRC emacs-lisp
      (defun toggle-comment-at-point (start end)
        "toggle comment on line or region
      pass a prefix argument to bulk toggle across multiple lines.
      This function will always comment the line your point is on,

      prefix behaviour:
      | prefix range | behaviour                                        |
      |--------------+--------------------------------------------------|
      | 0            | current line only                                |
      | >1           | current line and upto prefix-1 lines after point |
      | <1           | current line and upto prefix lines before point  |

      the behaviour is mapped to exactly replicate the vim dd command."
        (interactive (let ((prefix current-prefix-arg))
                       (if (region-active-p)
                           ;; always use region when region available
                           (list (region-beginning) (region-end))
                         (if (or (not prefix)
                                 (listp prefix) ;; regular prefix
                                 (zerop prefix))
                             ;; no prefix, comment current line only
                             (list (line-beginning-position) (line-end-position))
                           ;; prefix given, use it to determine comment region
                           (let* ((prefix-positive (> prefix 0))
                                  (current-pos (if prefix-positive
                                                   (line-beginning-position)
                                                 (line-end-position))))
                             (save-excursion
                               (if prefix-positive
                                   (progn
                                     (evil-next-line (- prefix 1))
                                     (list current-pos (line-end-position)))
                                 (evil-next-line prefix)
                                 (list (line-beginning-position) current-pos))))))))
        (comment-or-uncomment-region start end))

      (defun toggle-comment-at-point-alt ()
        "variant of toggle-comment-at-point which conforms to relative line numbers

      prefix behaviour:
      | prefix range | behaviour                                         |
      |--------------+---------------------------------------------------|
      | 0            | current line only                                 |
      | >1           | current line and upto prefix-1 lines after point  |
      | <1           | current line and upto prefix+1 lines before point |
      "
        (interactive)
        (let ((current-prefix-arg (and current-prefix-arg
                                       (cond
                                        ((>= current-prefix-arg 1) (1+ current-prefix-arg))
                                        ;; ((<  current-prefix-arg 0) (1- current-prefix-arg))
                                        (t current-prefix-arg)))))
          (call-interactively 'toggle-comment-at-point)))

      (defun yank-and-comment ()
        (interactive)
        (when (> (length kill-ring) 0)
          (save-excursion
            (let ((beginning (point)))
              (call-interactively 'yank)
              (comment-region beginning (point))))
          (evil-forward-word))) ;; move to beginning of comment
    #+END_SRC

    Line insertion and joining functions.

    #+BEGIN_SRC emacs-lisp
      (defun custom-insert-line (&optional prefix)
        "inserts a line above or below point

      if a prefix argument of 0 or more (or none) is given, the
      line is inserted below the point. Otherwise its inserted
      above the point.

      The absolute value of the prefix determines how many lines
      are inserted.

      Eg: A prefix of:
        ,* nil - inserts a single line below the cursor
        ,* -1  - inserts a single line above the cursor
        ,* 0   - inserts a single line below the cursor
        ,* 1   - inserts a single line below the cursor
        ,* -10 - inserts 10 lines above the cursor
        ,* 10  - inserts 10 lines below the cursor"
        (interactive "P")

        (save-excursion
          (let ((move-arg (if (or (not prefix)
                                  (>= prefix 0))
                              nil ; if prefix xor prefix >= 0
                            0)))
            (move-end-of-line move-arg)
            (open-line (max 1 (abs prefix))))))

      (defun custom-insert-line-below (&optional prefix)
        (interactive "P")
        (custom-insert-line (abs (or prefix 1))))

      (defun custom-insert-line-above (&optional prefix)
        (interactive "P")
        (custom-insert-line (- (abs (or prefix 1)))))

      (defun evil-join-backwards (&optional prefix)
        "same as join line, except joins line immeadiately before point"
        (interactive "p")
        (let ((start nil)
              (end   nil))
          (if (evil-visual-state-p)
              (let ((range (evil-visual-range)))
                (setq start (nth 0 range))
                (setq end   (nth 1 range)))
            ;; not visual, calculate ranges
            (setq end (point))
              (save-excursion
                (forward-line (- (abs prefix)))
                (setq start (point))))
          ;; remove excursion block if you wan't to
          ;; reallign point to start of line on join
          (save-excursion
            (if (line-empty-p start)
                ;; when joining onto an empty line
                ;; maintain leading whitespace
                (evil-join-whitespace start end)
              ;; otherwise trim to single space
              (evil-join start end)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-text)
    #+END_SRC

*** lib-text-query
    :PROPERTIES:
    :header-args+: :tangle (lisp! "lib/+lib-text-query.el")
    :END:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package +lib-text-query
        :commands (column-number
                   in-comment-p
                   in-font-lock-comment-p
                   line-beginning-column
                   yank-and-comment
                   line-empty-p
                   list-faces))
    #+END_SRC

    functions for querying information about the text at point or retrieve other
    relevant information.

    #+BEGIN_SRC emacs-lisp
      (defun column-number (point)
        "returns the column number at point"
        (interactive "")
        (save-excursion
          (goto-char point)
          (current-column)))

      (defun line-empty-p (&optional point)
        (save-excursion
          (and point (goto-char point))
          (beginning-of-line)
          (looking-at "[[:space:]]*$")))

      (defun list-faces (&optional point)
        (interactive "d")
        (or point (setq point (point)))
        (let ((faces (remq nil
                           `(,(get-char-property point 'read-face-name)
                             ,(get-char-property point 'face)
                             ,(plist-get (text-properties-at point) 'face)))))
          (and (called-interactively-p 'any) (message (format "%s" faces)))
          faces))

      (defun in-comment-p (&optional pos)
        (save-excursion
          (goto-char (or pos (point)))
          (nth 4 (syntax-ppss))))

      (defun in-font-lock-comment-p (&optional pos)
        "Test if character at POS is comment.
      If POS is nil, character at `(point)' is tested"
        (unless pos (setq pos (point)))
        (let* ((fontfaces (get-text-property pos 'face)))
          (when (not (listp fontfaces))
            (setf fontfaces (list fontfaces)))
          (delq nil
                (mapcar #'(lambda (f)
                            ;; learn this trick from flyspell
                            (or (eq f 'font-lock-comment-face)
                                (eq f 'font-lock-comment-delimiter-face)))
                        fontfaces))))

      (defun line-beginning-column (&optional point)
        (save-excursion
          (goto-char (or point (point)))
          (evil-first-non-blank)
          (current-column)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-text-query)
    #+END_SRC

*** lib-buffer
    :PROPERTIES:
    :header-args+: :tangle (lisp! "lib/+lib-buffer-control.el")
    :END:

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package +lib-buffer-control
         :defer 30
         :commands (kill-this-buffer-and-window-maybe+
                    switch-to-last-buffer+
                    switch-to-messages-buffer+
                    force-set-all-visible-windows-dedication+
                    window-zen+
                    window-zen-restore+
                    find-temp-file+
                    display-last-buffer+
                    vertical-display-last-buffer+
                    shell-command-on-region+
                    async-shell-command-on-region+
                    set-window-dedication+
                    safe-erase-buffer+
                    split-window-right-and-focus+
                    split-window-below-and-focus+)
         :general
         (:keymaps 'emacs-window-map
          "T"   'force-set-all-visible-windows-dedication+
          "o"   'other-window
          "M-o" 'display-last-buffer+
          "C-o" 'vertical-display-last-buffer+
          "SPC" 'set-window-dedication+
          "M-d" 'set-window-dedication+)
         :leader
         ("ft" 'find-temp-file+))
    #+END_SRC

    Commands to switch to various buffers.

    #+begin_src emacs-lisp
      (defun switch-to-messages-buffer+ ()
        "Switches to messages buffer."
        (interactive)
        (switch-to-buffer (messages-buffer)))

      (defun switch-to-last-buffer+ (&optional buffer)
        (interactive)
        (switch-to-buffer buffer))
    #+end_src

    #+begin_src emacs-lisp
      (defun find-temp-file+ (path)
        (interactive
         (list (let ((default-directory
                       (concat (xdg--dir-home "XDG_TEMP_DIR" "~/.local/temp") "/")))
                 (concat default-directory
                         (read-file-name
                          "Make temp file: "
                          default-directory
                          (format-time-string "%Y%m%d.%H%M%S"))))))
        (when-let ((dir (file-name-directory path)))
          (unless (string-empty-p dir)
            (mkdir dir t)))
        (find-file path))
    #+end_src

    #+BEGIN_SRC emacs-lisp
      (defun kill-this-buffer-and-window-maybe+ ()
        "Kills the currently open buffer and the window if another is open"
        (interactive)
        (let ((window-count (length (window-list))))
          (if (> window-count 1)
              (kill-buffer-and-window)
            (kill-this-buffer))))
    #+END_SRC

    ~window-zen+~ lets you quickly zoom into the current window and then zoom back out.
    The gist of it is that when you call ~window-zen+~ with multiple windows it saves
    the current window configuration and then erases all the other windows. If you
    call it again when in only a single window it restores the previous configuration.

    It's implemented as a stack tied to the current frame. Meaning each frame has
    its own history of zens. You can zen repeatedly, one after the other and then
    jump back through your saved configurations using ~window-zen-restore+~.

    #+BEGIN_SRC emacs-lisp
      (defun window-zen+ (&optional prefix)
        (interactive "P")
        (if (or prefix
                (= (length (window-list)) 1))
            (window-zen-restore+)
          (set-frame-parameter (frame-focus) 'window-zen-history
                               (append
                                (list (current-window-configuration))
                                (frame-parameter (frame-focus) 'window-zen-history)))
          (delete-other-windows)))

      (defun window-zen-restore+ ()
        (interactive)
        (let* ((current-frame (frame-focus))
               (configs (frame-parameter current-frame 'window-zen-history)))
          (unless configs
            (user-error "No previous zens found for the current frame."))
          (unwind-protect
              (save-excursion
                (set-window-configuration (pop configs)))
            (set-frame-parameter current-frame 'window-zen-history configs))))
    #+END_SRC

    Emacs has some cool built-in commands for running shell commands but there
    doesn't seem to be straightforward ways to pass the current buffer as standard
    input to those commands. So here are variants that let you do this.

    #+BEGIN_SRC emacs-lisp
      (defun shell-command-on-buffer+ (&optional prefix)
        "Asks for a command and executes it in inferior shell with current buffer
      as input. if prefix is given, output of command is inserted in current buffer
      at point."
        (interactive "P")
        (let ((command (read-shell-command "Shell command on buffer: "))
              (input-buffer (current-buffer)) output-buffer process-output)
          (with-temp-buffer ;; needed for process output
            (setq output-buffer (current-buffer))

            (with-current-buffer input-buffer
              (shell-command-on-region
               (point-min) (point-max)
               command output-buffer nil output-buffer))

            (setq process-output (buffer-string)))

          (if prefix
              (insert process-output)
            (message process-output))))

      (defun async-shell-command-on-region+ (start end)
        "`async-shell-command' variant which uses the region as standard input."
        (interactive (list (if (region-active-p)
                               (list (region-beginning) (region-end))
                             (list (point-min) (point-max)))))
        (unless (eq start end) ;; region is not active
          (let ((command (read-shell-command "Async shell command on buffer: ")))
            (if (string-empty-p command)
                (user-error "Must supply a non-empt shell command.")
              (async-shell-command command) ;; XXX WHY??? don't you return the process :P
              (let ((program-buffer (get-buffer "*Async Shell Command*")))
                (process-send-region (get-buffer-process program-buffer) start end)

                (with-current-buffer program-buffer
                  (comint-send-eof)

                  (unless (get-buffer-process program-buffer)
                    (funcall-interactively 'initial-major-mode)))

                (display-buffer program-buffer))))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun safe-erase-buffer+ (&optional prefix)
        "prompts to really erase and then erases the current buffer"
        (interactive "P")
        (barf-if-buffer-read-only)
        (when (or prefix
                  (y-or-n-p (concat "Erase content of buffer "
                                    (buffer-name)
                                    " ?")))
            (erase-buffer)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun split-window-right-and-focus+ ()
        (interactive)
        (split-window-horizontally)
        (other-window 1))

      (defun split-window-below-and-focus+ ()
        (interactive)
        (split-window-vertically)
        (other-window 1))

    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun display-last-buffer+ ()
        (interactive)
        (display-buffer
         (other-buffer)
         '((display-buffer-below-selected-and-focus
            display-buffer-in-previous-window-and-focus
            display-buffer-use-some-window-and-focus
            display-buffer-pop-up-frame-and-focus))))

      (defun vertical-display-last-buffer+ ()
        (interactive)
        (display-buffer
         (other-buffer)
         (cons '(display-buffer-right-and-focus
                 display-buffer-in-previous-window-and-focus
                 display-buffer-use-some-window-and-focus
                 display-buffer-pop-up-frame-and-focus)
               '((side . right)
                 (window-width . 0.5)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun force-set-all-visible-windows-dedication+ (&optional dedicate)
        "Allows you to set the dedication of all visible windows
      DEDICATE if truthy, will result in all windows recieving a dedication.
      if falsy, all windows will have their dedication removed."
        (interactive "P")
        ;; TODO require persp-mode here
        (and dedicate (setq dedicate t))      ; rationalise value as bool
        (or  dedicate (setq dedicate nil))    ; rationalise value as nil

        (dolist (window (window-list))
          (when (not (eq dedicate (window-dedicated-p window)))
            (set-window-dedicated-p window dedicate))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun set-window-dedication+ (&optional prefix window)
        "Set the dedication value for the current window.
      By default it toggles the dedication. Supply a prefix arg
      to explicitly enable or disable.

      When a window is dedicated, you can't change the buffer for it."
        (interactive "P")
        (when (and prefix
                   (listp prefix))
          (setq prefix (car prefix)))
        (or window (setq window (selected-window)))

        (set-window-dedicated-p
         window
         (if prefix
             (> prefix 0)
           (not (window-dedicated-p window)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-buffer-control)
    #+END_SRC

*** lib-unpackaged
    :PROPERTIES:
    :header-args+: :tangle (lisp! "lib/+lib-unpackaged.el")
    :END:

    Many useful functions sourced from [[https://github.com/alphapapa/unpackaged.el/blob/master/unpackaged.el][unpackaged.el]].

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package +lib-unpackaged
        :commands (font-compare
                   lorem-ipsum-overlay)
        :config
        ;; used in a bunch of places
        (defvar lorem-ipsum-text nil)

        :leader
        ("xl" 'lorem-ipsum-overlay))
    #+END_SRC

    Font methods.

    #+BEGIN_SRC emacs-lisp
      (defun font-compare (text fonts)
        "Compare TEXT displayed in FONTS.
      If TEXT is nil, use `lorem-ipsum' text.  FONTS is a list of font
      family strings and/or font specs.

      Interactively, prompt for TEXT, using `lorem-ipsum' if left
      empty, and select FONTS with `x-select-font', pressing Cancel to
      stop selecting fonts."
        (interactive (list (pcase (read-string "Text: ")
                             ("" nil)
                             (else else))
                           ;; `x-select-font' calls quit() when Cancel is pressed, so we use
                           ;; `inhibit-quit', `with-local-quit', and `quit-flag' to avoid that.
                           (let ((inhibit-quit t))
                             (cl-loop for font = (with-local-quit
                                                   (x-select-font))
                                      while font
                                      collect font into fonts
                                      finally do (setf quit-flag nil)
                                      finally return fonts))))
        (setq text (or text (s-word-wrap 80 (s-join " " (progn
                                                          (require 'lorem-ipsum)
                                                          (seq-random-elt lorem-ipsum-text))))))
        (with-current-buffer (get-buffer-create "*Font Compare*")
          (erase-buffer)
          (--each fonts
            (let ((family (cl-typecase it
                            (font (symbol-name (font-get it :family)))
                            (string it))))
              (insert family ": "
                      (propertize text
                                  'face (list :family family))
                      "\n\n")))
          (pop-to-buffer (current-buffer))))
    #+END_SRC

    Lorem ipsum overlay.

    #+BEGIN_SRC emacs-lisp
      (require 'lorem-ipsum)

      (defvar lorem-ipsum-overlay-exclude nil
        "List of regexps to exclude from `lorem-ipsum-overlay'.")

      ;;;###autoload
      (defun lorem-ipsum-overlay ()
        "Overlay all text in current buffer with \"lorem ipsum\" text.
      When called again, remove overlays.  Useful for taking
      screenshots without revealing buffer contents.

      Each piece of non-whitespace text in the buffer is compared with
      regexps in `lorem-ipsum-overlay-exclude', and ones
      that match are not overlaid.  Note that the regexps are compared
      against the entire non-whitespace token, up-to and including the
      preceding whitespace, but only the alphabetic part of the token
      is overlaid.  For example, in an Org buffer, a line that starts
      with:

        ,#+TITLE: unpackaged.el

      could be matched against the exclude regexp (in `rx' syntax):

        (rx (or bol bos blank) \"#+\" (1+ alnum) \":\" (or eol eos blank))

      And the line would be overlaid like:

        ,#+TITLE: parturient.et"
        (interactive)
        (let ((ovs (overlays-in (point-min) (point-max))))
          (if (cl-loop for ov in ovs
                       thereis (overlay-get ov :lorem-ipsum-overlay))
              ;; Remove overlays.
              (dolist (ov ovs)
                (when (overlay-get ov :lorem-ipsum-overlay)
                  (delete-overlay ov)))
            ;; Add overlays.
            (let ((lorem-ipsum-words (--> lorem-ipsum-text
                                          (-flatten it) (apply #'concat it)
                                          (split-string it (rx (or space punct)) 'omit-nulls)))
                  (case-fold-search nil))
              (cl-labels ((overlay-match (group)
                                         (let* ((beg (match-beginning group))
                                                (end (match-end group))
                                                (replacement-word (lorem-word (match-string group)))
                                                (ov (make-overlay beg end)))
                                           (when replacement-word
                                             (overlay-put ov :lorem-ipsum-overlay t)
                                             (overlay-put ov 'display replacement-word))))
                          (lorem-word (word)
                                      (if-let* ((matches (lorem-matches (length word))))
                                          (apply-case word (downcase (seq-random-elt matches)))
                                        ;; Word too long: compose one.
                                        (apply-case word (downcase (compose-word (length word))))))
                          (lorem-matches (length &optional (comparator #'=))
                                         (cl-loop for liw in lorem-ipsum-words
                                                  when (funcall comparator (length liw) length)
                                                  collect liw))
                          (apply-case (source target)
                                      (cl-loop for sc across-ref source
                                               for tc across-ref target
                                               when (not (string-match-p (rx lower) (char-to-string sc)))
                                               do (setf tc (string-to-char (upcase (char-to-string tc)))))
                                      target)
                          (compose-word (length)
                                        (cl-loop while (> length 0)
                                                 for word = (seq-random-elt (lorem-matches length #'<=))
                                                 concat word
                                                 do (cl-decf length (length word)))))
                (save-excursion
                  (goto-char (point-min))
                  (while (re-search-forward (rx (group (1+ (or bol bos blank (not alpha)))
                                                       (0+ (not (any alpha blank)))
                                                       (group (1+ alpha))
                                                       (0+ (not (any alpha blank)))))
                                            nil t)
                    (unless (cl-member (match-string 0) lorem-ipsum-overlay-exclude
                                       :test (lambda (string regexp)
                                               (string-match-p regexp string)))
                      (overlay-match 2))
                    (goto-char (match-end 2)))))))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-unpackaged)
    #+END_SRC

* Packages
  Packages which are mandatory.
  You have to install these for my emacs to work as intended.

** completion
   Assistance for various completion frameworks.

*** orderless
    A package for building nicer matching regexps for completion using space
    separated components. ATM it doesn't (and has no intentions for) ordering
    completion based on match counts or accuracy (shame üò¢) but we can get around
    that by using prescient.

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! orderless)
      (use-package orderless
        :straight t
        :demand t
        :custom
        (completion-styles '(orderless))
        (completion-category-overrides
         '((file (styles orderless partial-completion))))

        :preface
        (defun orderless-double-space-escapes+ (string)
          "Split STRING on spaces, which can be escaped with two subsequent spaces."
          ;; Works by replacing each escaped space with a C-@ character
          ;; and then splitting on single spaces, before turning the
          ;; C-@'s back to regular spaces.
          (mapcar
           (lambda (piece) (replace-regexp-in-string (string 0) " " piece))
           (split-string (replace-regexp-in-string
                          (rx (repeat 2 " "))
                          (lambda (x) (if (>= (length x) 2) (string 0) x))
                          string 'fixedcase 'literal)
                         " +" t)))
        :custom
        (orderless-component-separator #'orderless-double-space-escapes+)

        :preface
        (defun flex-if-twiddle (pattern _index _total)
          "Glob when trailing tilde."
          (when (string-suffix-p "~" pattern)
            `(orderless-flex . ,(substring pattern 0 -1))))

        (defun literal-if-equals (pattern _index _total)
          (when (string-prefix-p "=" pattern)
            `(orderless-literal . ,(substring pattern 1))))

        (defun without-if-bang (pattern _index _total)
          "Exclude literal when leading punctuation-mark."
          (when (string-prefix-p "!" pattern)
            (if (eq pattern "!")
                `(orderless-literal . "")                                             ; Ignore single ! by default.
              `(orderless-without-literal . ,(substring pattern 1)))))

        (defun fold-if-percent (pattern _index _total)
          (when (string-prefix-p "%" pattern)
            ;; Allows you to [[http://endlessparentheses.com/new-in-emacs-25-1-easily-search-non-ascii-characters.html][search]] unicode characters with ascii queries.
            `(char-fold-to-regexp . ,(substring pattern 1))))

        :custom
        (orderless-matching-styles '(orderless-regexp))
        (orderless-style-dispatchers '(flex-if-twiddle
                                       literal-if-equals
                                       without-if-bang
                                       fold-if-percent))

        :config
        (defun orderless-company-fix-face+ (fn &rest args)
          (let ((orderless-match-faces [completions-common-part]))
            (apply fn args)))

        (with-eval-after-load 'company
          ;; Fixes face issues in tooltip, see [[https://github.com/oantolin/orderless/tree/d97a91f6e12ace638e65bdccefd14d1e638a2dae#company][here]].
          (advice-add 'company-capf--candidates :around #'orderless-company-fix-face+))

        :init
        (defun consult--orderless-regexp-compiler (input type _ignore-case)
          (setq input (orderless-pattern-compiler input))
          (cons
           (mapcar (lambda (r) (consult--convert-regexp r type)) input)
           (apply-partially #'orderless--highlight input)))
        :custom (consult--regexp-compiler #'consult--orderless-regexp-compiler))
    #+END_SRC

*** hotfuzz
    An emacs fuzzy finder.

    #+begin_src emacs-lisp :tangle (package-yes! hotfuzz)
      (use-package hotfuzz
        :straight t
        :custom
        (completion-styles '(hotfuzz)))
    #+end_src

*** prescient
    A package for remembering and sorting completion candidates based on frequency of
    usage. This is intended to be used with orderless, however because prescient has
    its own functions for filtering if orderless is disabled prescient will take over
    that as well.

    For tips on how to integrate this with orderless see [[https://github.com/oantolin/orderless/issues/25#issuecomment-743740717][orderless#25]].

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! prescient)
      (use-package prescient
        :straight t
        :demand t
        :custom
        (prescient-history-length 1000)
        (prescient-save-file (state! "prescient-history.el"))

        :config
        (prescient-persist-mode +1))                                                  ; persist statistics between emacs sessions
    #+END_SRC

** hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :straight t
       :hook
       (lv-window . +hide-trailing-whitespace)
       :custom (lv-use-separator t)

       :preface
       (defvar leader-hydra-leader-prefix "H")

       :leader
       (leader-hydra-leader-prefix
        '(:ignore t :wk ("hydras" . "Cut off one head, two more shall take it's place!"))))

     (use-package use-package-hydra :straight t :demand t)
   #+END_SRC

*** pretty-hydra
    Lets you quickly define hierarchically well structured hydras from a general
    topological description of their commands.

    #+begin_src emacs-lisp
      (use-package pretty-hydra
        :straight t
        ;; Needs to be loaded or use-package-keyword fails :cry:.
        :demand t)
    #+end_src

*** hydra-posframe
     Changes the display of the the hydra popups from some region above the message area into a
     posframe :) like ~frog-jump-buffer~.

     #+BEGIN_SRC emacs-lisp :tangle (package-yes! hydra-posframe)
       (use-package hydra-posframe
         :straight (hydra-posframe :host github :repo "Ladicle/hydra-posframe")
         :after hydra
         :init
         (when (display-graphic-p)
           ;; Only use posframe when on graphical display
           ;; my terminals always too short for it to be
           ;; useful on there.
           (add-hook 'after-init-hook #'hydra-posframe-mode))

         :config
         ;; Source for following section [[https://github.com/jerrypnz/.emacs.d/blob/master/config/jp-base.el][here]].
         (defun posframe-frame-bottom-poshandler+ (info)
           (cons (car (posframe-poshandler-frame-center info))
                 (- (cdr (posframe-poshandler-frame-bottom-left-corner info)) 20)))

         :custom
         (hydra-posframe-poshandler 'posframe-frame-bottom-poshandler+)
         (hydra-posframe-parameters '((alpha 100 100)
                                      (left-fringe . 10)
                                      (right-fringe . 10)
                                      (x-pixel-offset 4)
                                      (internal-border-width . 2))))
     #+END_SRC

*** hydras
    Some hydras don't have specific packages or sections I can put them in so I place
    them here instead.

**** winman
     Hydra for managing and interacting with windows.

     #+BEGIN_SRC emacs-lisp
       (autoload 'winman-hydra/body (lisp! "hydras" "winman-hydra.el") nil t)

       (general-define-key
        :keymaps 'emacs-window-map
         "." '(winman-hydra/body    :wk "winman-hydra"))

       (leader-set-keys
         (concat leader-hydra-leader-prefix " h") '(winman-hydra/body :wk "winman-hydra"))
     #+END_SRC

     TODO: Support left-right to winner-undo.

     #+BEGIN_SRC emacs-lisp :tangle (lisp! "hydras/winman-hydra.el")
       (require 'evil)
       (require 'windmove)
       (require 'winner)
       (require 'winum)

       (defhydra winman-hydra (:exit nil :foreign-keys nil :hint nil)
         "
       ^create^               ^move^      ^shift^          ^numbers^               ^resize^
       ^-^------------------  ^-^-------  ^-^------------  ^-^--^-^--------------  ^-^----------------               (__)
       _c_ create             _h_ left    _H_ move-left    _1_.._9_ window-n       _>_ increase-width                (00)
       _d_ delete             _j_ down    _J_ move-down    _0_  ^ ^ window-by-num  _<_ decrease-width          /------\\/
       _s_ split              _k_ up      _K_ move-up      ^ ^  ^ ^                _+_ increase-height        / |    ||
       _v_ vsplit             _l_ right   _L_ move-right   ^ ^  ^ ^                _-_ decrease-height       *  /\\---/\\
       _S_ split-and-focus    _n_ next    ^ ^              ^ ^  ^ ^                ^ ^                          ~~   ~~
       _V_ vsplit-and-focus   _p_ prev

       "
         ("d" evil-window-delete)
         ("c" evil-window-create)
         ("s" evil-window-split)
         ("v" evil-window-vsplit)
         ("S" split-window-below-and-focus+)
         ("V" split-window-right-and-focus+)

         ("h" evil-window-left)
         ("k" evil-window-up)
         ("j" evil-window-down)
         ("l" evil-window-right)
         ("n" evil-window-next)
         ("p" evil-window-prev)

         ("H" windmove-left)
         ("J" windmove-up)
         ("K" windmove-down)
         ("L" windmove-right)

         ("0" winum-select-window-by-number)
         ("1" winum-select-window nil)
         ("2" winum-select-window nil)
         ("3" winum-select-window nil)
         ("4" winum-select-window nil)
         ("5" winum-select-window nil)
         ("6" winum-select-window nil)
         ("7" winum-select-window nil)
         ("8" winum-select-window nil)
         ("9" winum-select-window nil)

         ("C-0" digit-argument)
         ("C-1" digit-argument)
         ("C-2" digit-argument)
         ("C-3" digit-argument)
         ("C-4" digit-argument)
         ("C-5" digit-argument)
         ("C-6" digit-argument)
         ("C-7" digit-argument)
         ("C-8" digit-argument)
         ("C-9" digit-argument)

         (">" evil-window-increase-width)
         ("<" evil-window-decrease-width)
         ("+" evil-window-increase-height)
         ("-" evil-window-decrease-height)
         ("_" evil-window-decrease-height)

         ("u" winner-undo "undo")
         ("r" winner-redo "redo" :exit t)

         ("w" eyebrowse-hydra/body "workgroups" :exit t)

         ("m" window-zen+ "zen" :exit t)
         ("q" nil "quit" :exit t)
         ("<escape>" nil "quit" :exit t)) ;; prevent evil-escape

       (provide 'winman-hydra)
     #+END_SRC

**** indent
     #+BEGIN_SRC emacs-lisp
       (autoload 'indent-hydra/body (lisp! "hydras" "indent-hydra.el") nil t)

       (general-define-key
        "C-x TAB" 'indent-hydra/body)

       (leader-set-keys
         (concat leader-hydra-leader-prefix " TAB") '(indent-hydra/body :wk "indent-hydra"))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp :tangle (lisp! "hydras/indent-hydra.el")
       (defmacro indent-hydra--keep-visual-state-active (&rest body)
         "when body is invoked with evil-visual, restore the state after body"
         `(let ((visual-active (evil-visual-state-p)))
            ,@body
            (when visual-active
              (evil-normal-state)
              (evil-visual-restore))))
       (put 'indent-hydra--keep-visual-state-active 'elisp-indent-function 'defun)

       (defun indent-hydra--get-region ()
         "return the active region, or the current lines region"
         (if (region-active-p)
             (list (region-beginning) (region-end))
           (list (line-beginning-position) (line-end-position))))

       (defun indent-hydra--join-args-to-region (&rest args)
         (let ((region (indent-hydra--get-region)))
           (apply 'list
                  (car   region)
                  (nth 1 region)
                  args)))

       (defun indent-hydra-set-column (&optional column)
         "set indentation of line or region such that it reaches COLUMN
       when a region is active, function works by moving from the start of the
       region downwards until a non-empty (whitespace does not count) line is
       encountered, and then calculates the offset required to make that lines
       indentation the same as the COLUMN and then applies that offset to every
       line in the region.

       Negative values for COLUMN will be coerced to be +ve and unless called
       interactively, COLUMN will default to 1 when not specified."
         (interactive "P")
         (or column (setq column
                          (if (not (called-interactively-p))
                              +1
                            (read-number "column: "))))

         (and (< column 0) (setq column 0)) ;; ensure +ve

         (save-excursion
           (let* ((region-boundary (indent-hydra--get-region))
                  (start           (car   region-boundary))
                  (end             (nth 1 region-boundary))
                  indent-diff)
             (goto-char start) ;; start of indenting section

             (while (and (<= start end)
                         (line-empty-p)
                         (not (eobp)))
               ;; move forward until indent-able line encountered
               (next-line))

             (unless (or (eobp)
                         (> start end))
               (setq indent-diff (- column (current-indentation)))
               (indent-rigidly start end indent-diff)))))

       (defvar indent-hydra--ascii-art
         "
       "
         "cool ascii art, which can't be in docstring because it has ___")

       (defhydra indent-hydra (:foreign-keys run :hint nil)
         "
        ^ ^    ^ ^    ^ ^ |  ^ ^         |       dMP dMMMMb  dMMMMb  dMMMMMP dMMMMb dMMMMMMP .aMMMb dMMMMMMP dMP .aMMMb  dMMMMb
        _H_    ^ ^    ^ ^ | [_q_]: quit  |      amr dMP dMP dMP VMP dMP     dMP dMP   dMP   dMP\"dMP   dMP   amr dMP\"dMP dMP dMP
        _h_   _RET_   _l_ | [_s_]: break |     dMP dMP dMP dMP dMP dMMMP   dMP dMP   dMP   dMMMMMP   dMP   dMP dMP dMP dMP dMP
        ^ ^    ^ ^    _L_ |  ^ ^         |    dMP dMP dMP dMP.aMP dMP     dMP dMP   dMP   dMP dMP   dMP   dMP dMP.aMP dMP dMP
        ^ ^    ^ ^    ^ ^ |  ^ ^         |   dMP dMP dMP dMMMMP\" dMMMMMP dMP dMP   dMP   dMP dMP   dMP   dMP  VMMMP\" dMP dMP
       "
         ("h" (indent-hydra--keep-visual-state-active
               (apply 'indent-rigidly
                      (indent-hydra--join-args-to-region
                       (or (and current-prefix-arg
                                (- current-prefix-arg))
                           -1)))))
         ("l" (indent-hydra--keep-visual-state-active
               (apply 'indent-rigidly
                      (indent-hydra--join-args-to-region
                       (or current-prefix-arg +1)))))
         ("H" (indent-hydra--keep-visual-state-active
               (apply 'evil-shift-left
                      (indent-hydra--join-args-to-region
                       (or current-prefix-arg +1)))))
         ("L" (indent-hydra--keep-visual-state-active
               (apply 'evil-shift-right
                      (indent-hydra--join-args-to-region
                       (or current-prefix-arg +1)))))
         ("s"   (indent-hydra--keep-visual-state-active
                 (call-interactively 'split-line)))
         ("RET" (indent-hydra--keep-visual-state-active
                 (call-interactively 'indent-hydra-set-column)))

         ("q" nil :exit t))

       (general-define-key
         :keymaps 'indent-hydra/keymap
         ;; that's scroll-up silly?
         "C-u" nil
         ">" 'indent-hydra/lambda-L
         "<" 'indent-hydra/lambda-H)

       (provide 'indent-hydra)
     #+END_SRC

** evil
   The quintessential [[https://github.com/emacs-evil/evil][vi emulation]] package for emacs :speak_no_evil:.

   NOTE evil is installed here, but configured below, so that hooks are run properly.

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :straight t
       :custom
       (evil-cross-lines t)
       (evil-start-of-line nil)
       (evil-default-state 'motion)
       (evil-want-C-i-jump nil)
       (evil-want-C-u-scroll t)
       (evil-want-visual-char-semi-exclusive t)
       (evil-toggle-key "M-z")

       :init
       (setq evil-search-module 'evil-search)

       :config
       (setq evil--jumps-buffer-targets                                                   ; see [[https://emacs.stackexchange.com/questions/42060/add-dired-buffers-to-evil-jump-list][here]].
             (rx "*"
                 (or "new"
                     "Help"
                     "scratch"
                     (and "Org src " (zero-or-more any) "[ " (zero-or-more any) " ]"))
                 "*")))
   #+END_SRC

*** evil-matchit
    A better jump-to-matching element function for emacs evil.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-matchit
        :straight t
        :hook (evil-mode . global-evil-matchit-mode)
        :preface
        (defun evilmi-customize-keybinding ()
          (general-define-key
           ;; WARN binding to motion breaks things.
           :states  '(normal visual)
           :keymaps 'evil-matchit-mode-map
           "%" 'evilmi-jump-items)))

      (use-package evil-matchit-org
        :straight (evil-matchit)
        :config
        (push '(("begin_center") () ( "end_center") "MONOGAMY")
              evilmi-org-match-tags))
    #+END_SRC

*** evil-surround
    #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :straight t
        :hook (evil-mode . global-evil-surround-mode)
        :init
        (setq-default evil-surround-pairs-alist
                      '((?\( . ("(" . ")"))
                        (?\[ . ("[" . "]"))
                        (?\{ . ("{" . "}"))

                        (?\) . ("( " . " )"))
                        (?\] . ("[ " . " ]"))
                        (?\} . ("{ " . " }"))

                        (?# . ("#{" . "}")) ; ruby string interpolation
                        (?b . ("(" . ")"))
                        (?B . ("{" . "}"))
                        (?> . ("<" . ">"))
                        (?t . evil-surround-read-tag)
                        (?< . evil-surround-read-tag)
                        (?f . evil-surround-function)))

        :general
        ;; only allow surrounding via selections or explicitly using gS
        (:states 'visual "s"  'evil-surround-region)
        (:states 'motion "gs" 'evil-surround-edit)
        (:keymaps 'evil-surround-mode-map
         "$" nil))
    #+END_SRC

*** evil-anzu
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! anzu)
      (use-package evil-anzu
        :after anzu
        :straight t
        :demand t)
    #+END_SRC

*** evil-cursor
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! evil-tty-cursor)
      (use-package evil-terminal-cursor-changer
        :straight t
        :hook (tty-setup . evil-terminal-cursor-changer-activate))
    #+END_SRC

*** evil-numbers
    #+BEGIN_SRC emacs-lisp
      (use-package evil-numbers
        :straight t
        :general
        (:states 'normal
         "C-S-a" 'evil-numbers/inc-at-pt
         "C-S-x" 'evil-numbers/dec-at-pt))
    #+END_SRC

*** evil-snipe
    Let's you start a motion to some string matching some series of input characters.
    Think evil-search... but to a fixed number of characters, which can be raised at
    invocation.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-snipe
        :straight t
        :hook ((magit-status-mode . turn-off-evil-snipe-mode)
               (calc-mode . turn-off-evil-snipe-mode)
               (evil-mode . evil-snipe-mode))
        :diminish
        evil-snipe-mode
        evil-snipe-local-mode

        :init
        (defvar evil-snipe-local-mode-map (make-sparse-keymap))                       ; Suppress creation because I can't seem to override it :?

        :custom
        (evil-snipe-scope 'buffer)                                                    ; how far can a snipe take place
        (evil-snipe-repeat-scope 'buffer)                                             ; how far repeating previous snipe can take place.
        (evil-snipe-enable-highlight nil)                                             ; don't highlight after jump
        (evil-snipe-repeat-keys nil)                                                  ; sniping after a snipe, repeats the last snipe
        (evil-snipe-enable-incremental-highlight t)                                   ; do highlight matching snipe locations
        (evil-snipe-skip-leading-whitespace t)                                        ; whitespace at start of line is ignored
        (evil-snipe-smart-case t)                                                     ; case sensetive until it's not, like ivy
        (evil-snipe-tab-increment t)                                                  ; hit tab to raise amount of snipes left
        (evil-snipe-override-evil-repeat-keys nil)                                    ; don't replace ; and , with evil keys
        (evil-snipe-auto-disable-substitute nil)                                      ; keep my substitute key available

        :preface
        (defvar evil-snipe-find-scopes-to-line+ nil
          "When true, evil-snipe-{f,F,t,T} (I.E. for single finds) only extends to EOL.")

        :config
        (defmacro evil-snipe-with-normalised-settings (&rest body)
          `(let ((evil-snipe-enable-highlight nil)                           ; don't highlight jump matches after jump
                 (evil-snipe-enable-incremental-highlight nil)               ; don't highlight jump matches while searching
                 (evil-snipe-tab-increment nil)                              ; disable tab to raise snipe count
                 (evil-snipe-show-prompt nil)                                ; don't show prompt, why bother? you can't increment it.
                 (evil-snipe-smart-case nil)                                 ; fJ != fj
                 (evil-snipe-skip-leading-whitespace nil)
                 (evil-snipe-scope (if evil-snipe-find-scopes-to-line+
                                       'line
                                     evil-snipe-scope)))
             ,@body))

        (defun evil-snipe--normalise-single-snipes+ (func &rest args)
          "Normalise snipes with count 1 to match `evil-find-char'.
      don't want highlighting, or a prompt or other feature enhancements.
      just simple, jump to char.

      NOTE this function updates settings during the input reading phase
      only; which is taken care of in the interactive section prior to
      method body invocation."
          (if (eq evil-snipe--match-count 1)
              (evil-snipe-with-normalised-settings
                (apply func args))
            (apply func args)))

        (defun evil-snipe--normalise-single-snipes-wrapper+ (func &rest args)
          "Specify normalisation for the body of the given function."
          (evil-snipe-with-normalised-settings (apply func args)))

        (advice-add 'evil-snipe--collect-keys :around 'evil-snipe--normalise-single-snipes+)
        (advice-add 'evil-snipe-f :around #'evil-snipe--normalise-single-snipes-wrapper+)
        (advice-add 'evil-snipe-F :around #'evil-snipe--normalise-single-snipes-wrapper+)
        (advice-add 'evil-snipe-t :around #'evil-snipe--normalise-single-snipes-wrapper+)
        (advice-add 'evil-snipe-T :around #'evil-snipe--normalise-single-snipes-wrapper+)

        ;; I don't need it, I've got my own keys bound to do the same thing :)
        (advice-add 'evil-snipe--transient-map :override 'ignore)

        :general
        (:keymaps 'evil-snipe-mode-map
         :states  '(normal motion visual)
         ;; S is inclusive, X is exclusive.
         "gT" 'evil-snipe-X
         "gt" 'evil-snipe-x
         "gF" 'evil-snipe-S
         "gf" 'evil-snipe-s
         "f"  'evil-snipe-f
         "F"  'evil-snipe-F
         "t"  'evil-snipe-t
         "T"  'evil-snipe-T
         ";"  'evil-snipe-repeat
         "g;" 'evil-snipe-repeat-reverse))
    #+END_SRC

*** evil-exchange
    cut a region into a kill buffer, and then swap it with another region somewhere else.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package evil-exchange
        :straight t
        :general
        (:states 'normal
         "gx" 'evil-exchange
         "gX" 'evil-exchange-cancel))
    #+END_SRC

*** evil-multiedit
    #+BEGIN_SRC emacs-lisp
      (use-package iedit
        :straight t
        :init
        (setq iedit-toggle-key-default nil))

      (use-package evil-multiedit
        :straight t
        :after  evil
        :commands (evil-multiedit
                   evil-multiedit-all)
        :init
        (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)

        :config
        (defun evil-multiedit--multiedit (beg end)
          (evil-visual-select beg
                              (max 0 (- end 1)))
          (evil-multiedit-match-and-next))

        (evil-define-operator evil-multiedit (beg end)
          :repeat nil
          (if (evil-get-command-property 'evil-multiedit :move-point)
              (save-excursion
                (evil-multiedit--multiedit beg end))
            (evil-multiedit--multiedit beg end)))

        (defun evil-multiedit--multiedit-all (beg end)
          (evil-visual-select beg
                              (max 0 (- end 1)))
          (evil-multiedit-match-all))

        (evil-define-operator evil-multiedit-all (beg end)
          :repeat nil
          (if (evil-get-command-property 'evil-multiedit-all :move-point)
              (save-excursion
                (evil-multiedit--multiedit-all beg end))
            (evil-multiedit--multiedit-all beg end)))

        :general
        (:states 'normal "gi" nil)                                                    ; Suppress default iedit binding
        (:states '(motion multiedit)
         "gi" 'evil-multiedit
         "g*" 'evil-multiedit-all
         "gI" 'evil-multiedit-restore)
        (:states 'multiedit
         "g*" 'evil-multiedit-match-all
         "gh" 'evil-multiedit-prev
         "gl" 'evil-multiedit-next
         "gj" 'evil-multiedit-match-and-next
         "gk" 'evil-multiedit-match-and-prev)
        ;; (:states 'visual
        ;;  "RET" 'evil-multiedit-toggle-or-restrict-region)
        (:states 'multiedit
         "G"  nil "gg" nil))
    #+END_SRC

**** evil-multiedit-hydra
     #+begin_src emacs-lisp
       (use-package evil-multiedit
         :general
         (:states 'multiedit
          "g." 'evil-multiedit-hydra/body)

         :hydra
         (evil-multiedit-hydra ()
          ("k" evil-multiedit-next "next")
          ("j" evil-multiedit-prev "prev")
          ("l" evil-multiedit-match-and-next "mark-next")
          ("h" evil-multiedit-match-and-prev "mark-prev")
          ("*" evil-multiedit-match-all "mark-all")

          ("q" nil nil)
          ("<escape>" nil nil)))
     #+end_src

*** evil-traces
    indicators for various ex commands.

    #+BEGIN_SRC emacs-lisp
       (use-package evil-traces
         :straight t
         :diminish
         :hook (evil-mode . evil-traces-mode))
    #+END_SRC

*** evil-args
    #+BEGIN_SRC emacs-lisp
      (use-package evil-args
        :straight t

        :preface
        (defun evil-args-adjust-for-elisp+ ()
          (setq evil-args-delimiters '(" ")))
        :hook ((emacs-lisp-mode       . evil-args-adjust-for-elisp+)
               (lisp-interaction-mode . evil-args-adjust-for-elisp+))

        :leader
        ("j[" 'evil-backward-arg
         "j]" 'evil-forward-arg
         "ja" 'evil-jump-out-args)

        :general
        (:keymaps '(evil-inner-text-objects-map
                    evil-outer-text-objects-map)
         "a" 'evil-inner-arg)
        (:states 'motion
         "[u" 'evil-jump-out-args
         "]u" 'evil-jump-out-args

         "[h" 'evil-backward-arg
         "]h" 'evil-backward-arg

         "[l" 'evil-forward-arg
         "]l" 'evil-forward-arg

         "[a" 'evil-backward-arg
         "]a" 'evil-forward-arg))
    #+END_SRC

*** evil-easymotion
    Avy inspired evil motions.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-easymotion
        :straight t
        :leader
        (:prefix "jh"
         ""   '(:ignore t :wk "avy-motion")
         "w"  'evilem-motion-forward-word-begin
         "W"  'evilem-motion-forward-WORD-begin
         "e"  'evilem-motion-forward-word-end
         "E"  'evilem-motion-forward-WORD-end
         "b"  'evilem-motion-backward-word-begin
         "B"  'evilem-motion-backward-WORD-begin
         ;; "ge" 'evilem-motion-backward-word-end
         ;; "gE" 'evilem-motion-backward-WORD-end
         "j"  'evilem-motion-next-line
         "k"  'evilem-motion-previous-line
         "J"  'evilem-motion-next-visual-line
         "K"  'evilem-motion-previous-visual-line
         "t"  'evilem-motion-find-char-to
         "T"  'evilem-motion-find-char-to-backward
         "f"  'evilem-motion-find-char
         "F"  'evilem-motion-find-char-backward
         "n"  'evilem-motion-search-next
         "p"  'evilem-motion-search-previous
         "*"  'evilem-motion-search-word-forward
         "#"  'evilem-motion-search-word-backward
         "-"  'evilem-motion-previous-line-first-non-blank
         "+"  'evilem-motion-next-line-first-non-blank))
    #+END_SRC

*** vimish-fold
    :PROPERTIES:
    :header-args+: :tangle (package-yes! vimish-fold)
    :END:
    Folding like vim

    #+BEGIN_SRC emacs-lisp
      (use-package evil-vimish-fold
        :straight t
        ;; :hook (after-init . vimish-fold-global-mode)
        :custom
        (evil-vimish-fold-lighter "z")
        (vimish-fold-allow-nested t)
        (vimish-fold-dir (state! "vimish-fold/"))
        (vimish-fold-persist-on-saving nil "Prefer using marks.")
        :hook (vimish-fold-mode . vimish-fold-refold-all)

        :general
        (:keymaps 'evil-vimish-fold-mode-map
         :states '(normal motion)
         "zA" 'vimish-fold-toggle-recursively
         "zC" 'vimish-fold-refold-all
         "zF" 'vimish-fold-refold-all
         "zd" 'evil-vimish-fold/delete
         "zD" 'evil-vimish-fold/delete-all
         "zO" 'vimish-fold-unfold-all))
    #+END_SRC

*** evil-mode
    come to the dark side, we have cookies... :)

    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :straight t
        :demand t
        :config
        (evil-mode 1)

        (evil-set-initial-state 'prog-mode 'normal)
        (evil-set-initial-state 'text-mode 'normal)
        (evil-set-initial-state 'conf-mode 'normal)

        (with-no-warnings
          (defvaralias 'evil-ex-search-history 'regexp-search-ring))

        ;; From [[https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/evil/config.el#L137][doom]].
        (advice-add #'evil-global-marker-p :before-until
                    (defun evil--make-numbered-markers-global+ (char)
                      (and (>= char ?2) (<= char ?9))))

        ;; [[https://raw.githubusercontent.com/troyp/evil-adjust/master/evil-adjust.el][evil-adjust]]
        (defmacro with-evil-adjust-to-eol (&rest body)
          `(let ((-last-evil-state evil-state)
                 (evil-echo-state nil))
             (when (member evil-state '(normal visual))
               (evil-append 1)) ; switch to insert state
             (condition-case err
                 (progn ,@body)
               (error
                (evil-change-state -last-evil-state)
                (signal (car err) (cdr err))))
             (evil-change-state -last-evil-state)))
        (put 'with-evil-adjust-to-eol 'lisp-indent-function 'defun)

        ;; Force state for buffer if it already exists.
        (let ((buffer (get-buffer "*Messages*")))
          (when buffer
            (with-current-buffer buffer
              (evil-motion-state))))

        :lazy-leader
        ("jE" 'evil-goto-definition
         "id" 'evil-insert-digraph
         "sc" '(evil-ex-nohighlight :wk "search-noh")
         "xu" 'evil-upcase
         "xd" 'evil-downcase)

        :general
        ("M-g" 'evil-change-to-initial-state)
        (:states '(motion insert)
         "C-a" 'beginning-of-line
         "C-e" 'end-of-line)
        (:states '(insert emacs multiedit)
         "C-o" 'evil-copy-from-above
         "M-o" 'evil-copy-from-below
         "C-c C-o" 'evil-execute-in-normal-state
         "C-." 'evil-execute-in-normal-state)
        ("C->" 'evil-shift-right-line
         "C-<" 'evil-shift-left-line)
        (:states 'normal
         "gU" nil
         "gq" nil
         "zf" 'evil-close-fold
         "K"  'evil-join-backwards
         "gu" 'evil-upcase
         "gd" 'evil-downcase
         "g@" 'what-cursor-position
         "ga" 'evil-fill-and-move
         "g-" 'evil-indent)
        (:states '(normal motion)
         ;; Y = yy is easy   to press
         ;; Y = y$ is harder to press
         "Y" (general-simulate-key "y$"))
        (:states '(normal insert)
         "C-k"   'evil-join-backwards
         "C-M-k" 'evil-join-backwards)
        (:states 'insert
         "M-k" nil
         "C-d" nil
         "C-t" nil
         "C-@" nil

         "<tab>"           'indent-for-tab-command
         "TAB"             "<tab>"
         "C-c TAB"         'indent-relative
         "<S-backspace>"   'evil-delete-char

         "C-y" 'yank
         "M-y" 'yank-unindented

         ;; (kbd "C-M-k") 'evil-insert-digraph
         "C-l" 'forward-char
         "C-h" 'backward-char
         "C-n" 'evil-next-line
         "C-p" 'evil-previous-line
         "C-w" 'backward-kill-word)
        (:states 'visual
         "C-y" 'evil-paste-after)
        (:states 'motion
         "C-o" 'evil-jump-backward
         "M-o" 'evil-jump-forward
         "C-b" 'evil-scroll-line-up
         "C-f" 'evil-scroll-line-down
         "\""  'evil-use-register
         "zn"  'evil-scroll-column-right
         "zN"  'evil-scroll-right
         "zp"  'evil-scroll-column-left
         "zP"  'evil-scroll-left

         "gN" nil
         "gn" 'evil-next-match
         "gp" 'evil-previous-match

         ;; NOTE: These will probably always be overidden
         "gj" 'evil-next-visual-line
         "gk" 'evil-previous-visual-line
         "gq" 'quit-window
         "g=" 'count-words
         "g;" 'evil-repeat-find-char-reverse
         "m"  'evil-set-marker
         "-"  'negative-argument
         "q"  'quit-window)
        (:states 'motion
         :override t
         "gr" 'revert-buffer
         "gR" 'read-only-mode
         "gz" 'recenter-top-bottom)
        (:keymaps 'evil-ex-completion-map
         "C-a" 'move-beginning-of-line
         "C-e" 'move-end-of-line
         "C-M-q" 'quit-window)
        (:keymaps 'emacs-window-map
         [remap window-configuration-to-register] 'evil-save-window-config+
         "+" 'evil-window-increase-height
         "-" 'evil-window-decrease-height
         "<" 'evil-window-decrease-width
         ">" 'evil-window-increase-width
         "=" 'balance-windows
         "-" 'evil-window-set-width
         "|" 'evil-window-set-height

         "C-1" 'evil-window-top-left
         "C-0" 'evil-window-bottom-right

         ;; ("u" . evil-window-rotate-upwards)
         ;; ("i" . evil-window-rotate-downwards)
         "C-q" 'evil-window-mru ;; last buffer, new window

         ;; TODO maximise buffer
         "C-M-h" 'evil-window-move-far-left
         "C-M-j" 'evil-window-move-far-down
         "C-M-k" 'evil-window-move-far-up
         "C-M-l" 'evil-window-move-far-right

         ;; NOTE bindings with control variants
         "n"   'evil-window-next
         "C-n" 'evil-window-next
         "p"   'evil-window-prev
         "C-p" 'evil-window-prev
         "s"   'evil-window-split
         "M-s" 'evil-window-split
         "v"   'evil-window-vsplit
         "M-v" 'evil-window-vsplit
         "S"   'split-window-below-and-focus+
         "C-s" 'split-window-below-and-focus+
         "V"   'split-window-right-and-focus+
         "C-v" 'split-window-right-and-focus+
         "d"   'evil-window-delete
         "C-d" 'evil-window-delete
         "h"   'evil-window-left
         ;; "C-h" 'evil-window-left
         "j"   'evil-window-down
         ;; "C-j" 'evil-window-down
         "k"   'evil-window-up
         ;; "C-k" 'evil-window-up
         "l"   'evil-window-right
         ;; "C-l" 'evil-window-right
         "c"   'evil-window-create
         "C-c" 'evil-window-create))
    #+END_SRC

*** evil-commands
    Where I keep my own evil operators/commands/*witchcraft*.

    #+BEGIN_SRC emacs-lisp
      (evil-define-operator evil-capitalize (beg end)
        (capitalize-region beg end))

      (defun evil-shift-normal-state (&optional arg)
        "return to normal state while also removing
      any trailing whitespace from the current line"
        (interactive "P")
        (delete-trailing-whitespace (line-beginning-position)
                                    (line-end-position))
        (evil-normal-state arg))

      (evil-define-operator evil-narrow-yank (beg end type register yank-handler)
        "`evil-yank' except block yanks are yanked as their own lines.
      evil by default yanks them such that you can compose them onto other lines.
      this isn't always desirable (especially when you want to filter a region onto
      it's own lines, thus this method satifies that requirement.

      eg:
      `evil-yank' cfj then `evil-paste-after'.
        ab|c|   >   abc|c
        de|f|   >   deff
        gh|j|   >   ghjj

      `evil-narrow-yank' cfj then `evil-paste-after'.
        ab|c|   >   abc
        de|f|   >   |c
        gh|i|   >   f
                >   j
                >   def
                >   ghj
      "
        (interactive "<R><x><y>")
        (evil-visual-restore)
        (if (eq type 'block)
            (progn
              (evil-yank-rectangle beg end ?\" yank-handler)

              (with-temp-buffer
                (evil-paste-before nil ?\")
                (evil-yank (point-min) (point-max) 'line register yank-handler)))
          (evil-yank beg end type register yank-handler)))

      (evil-define-operator evil-toggle-comment (beg end)
        :type        line
        :repeat      t
        :move-point  nil
        :keep-visual nil
        "run `toggle-comment-at-point' using evil motion."
        (toggle-comment-at-point beg end))

      (defun evil-adjust-eval-print-last-sexp ()
        (interactive)
        (save-excursion
          (with-evil-adjust-to-eol
            (funcall-interactively 'eval-print-last-sexp)
            (message nil))))

      (defun evil-adjust-eval-replace-last-sexp ()
        (interactive)
        (with-evil-adjust-to-eol
          (funcall-interactively 'eval-replace-last-sexp)
          (message nil)))

      (evil-define-operator evil-reverse (beg end)
        :type line
        :repeat t
        "evil command to reverse lines over range."
        (reverse-region beg end))

      (evil-define-operator evil-ansi-render (beg end)
        :repeat t
        "render ansi-color escape sequences between BEG and END."
        ;; source [[https://stackoverflow.com/questions/23378271/how-do-i-display-ansi-color-codes-in-emacs-for-any-mode][here]].
        (require 'ansi-color)
        (let ((inhibit-read-only (or inhibit-read-only
                                     (and buffer-read-only
                                          (y-or-n-p "Buffer is read only, ignore: ")))))
          (barf-if-buffer-read-only)
          (ansi-color-apply-on-region beg end)))

      ;; ;; Enable terminal copy to cliboard
      ;; (evil-define-operator evil-copy-to-clipboard (beg end)
      ;;   "Copies selection to x-clipboard."
      ;;   :repeat      t
      ;;   :move-point  nil
      ;;   :keep-visual nil
      ;;   (interactive)
      ;;   (if (display-graphic-p)
      ;;       (clipboard-kill-ring-save beg end)
      ;;     (shell-command-on-region beg end "xclip -i -selection clipboard")))

      ;; (defun paste-from-clipboard ()
      ;;   "Pastes from x-clipboard."
      ;;   (interactive)
      ;;   (if (display-graphic-p)
      ;;       (clipboard-yank)
      ;;     (insert (shell-command-to-string "xclipl -o -selection clipboard"))))

      ;; TODO: Save directly to evil registers, not emacs registers.
      (evil-define-command evil-save-window-config+ (reg)
        (interactive "<x>")
        (window-configuration-to-register
         (or reg
             (register-read-with-preview
                          "Save window config to register: "))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       :states 'normal
       "gC" 'evil-capitalize
       "gc" 'evil-toggle-comment)

      (general-define-key
       :states '(insert replace)
       "<S-escape>" 'evil-shift-normal-state)

      (general-define-key
       :states 'visual
       "gy" 'evil-narrow-yank)

      (general-define-key
       :states 'motion
       "g3" 'evil-ansi-render)

      (general-define-key
       :states '(normal visual insert)
       [remap eval-print-last-sexp]   'evil-adjust-eval-print-last-sexp
       [remap eval-replace-last-sexp] 'evil-adjust-eval-replace-last-sexp)

      (evil-ex-define-cmd "rev[erse]" 'evil-reverse)

      (leader-set-keys
        "xc" 'evil-capitalize)
    #+END_SRC

*** evil-ex
    #+BEGIN_SRC emacs-lisp
      (evil-ex-define-cmd "W[RITE]" 'evil-write)

      (evil-ex-define-cmd "Wa[ll]"  'evil-write-all)
      (evil-ex-define-cmd "WA[LL]"  'evil-write-all)

      (evil-ex-define-cmd "wk[ill]" 'write-kill-buffer)
      (evil-ex-define-cmd "Wk[ill]" 'write-kill-buffer)
      (evil-ex-define-cmd "WK[ILL]" 'write-kill-buffer)

      (evil-ex-define-cmd "wb[ackup]" 'write-backup)
      (evil-ex-define-cmd "Wb[ackup]" 'write-backup)
      (evil-ex-define-cmd "WB[ACKUP]" 'write-backup)

      (evil-ex-define-cmd "a[s]ave" 'write-autosave)
      (evil-ex-define-cmd "A[s]ave" 'write-autosave)
      (evil-ex-define-cmd "A[S]AVE" 'write-autosave)

      (evil-ex-define-cmd "buffers" 'ibuffer)
    #+END_SRC

** company                                                              :comp:
   :PROPERTIES:
   :header-args+: :tangle (package-yes! company)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :straight t
       :defer 2
       ;; :hook (company-mode . company-tng-mode)
       :delight
       company-mode
       global-company-mode
       :custom
       ;; show the completion tooltip without any delay.
       (company-tooltip-idle-delay nil
        "Show the completion tooltip without any delay.")
       (company-idle-delay 0.4)
       (company-minimum-prefix-length 2)
       (company-statistics-file (state! "company/statistics.el"))
       (company-tooltip-align-annotations t)
       (company-require-match nil)
       (company-tooltip-limit 12)
       (company-tooltip-width-grow-only nil)
       (company-format-margin-function #'company-text-icons-margin)
       (company-text-icons-add-background t)
       (company-text-icons-mapping
        '((array "a" font-lock-type-face)
          (boolean "b" font-lock-builtin-face)
          (class "c" font-lock-type-face)
          (color "#" aoh-blue-int)
          (constant "c" font-lock-constant-face)
          (enum-member "e" aoh-blue-int)
          (enum "e" aoh-turquoise-int)
          (field "f" aoh-blue-int)
          (file "f" aoh-very-light-grey)
          (folder "d" dired-directory)
          (interface "i" font-lock-type-face)
          (keyword "k" font-lock-keyword-face)
          (method "m" font-lock-function-name-face)
          (function "f" font-lock-function-name-face)
          (module "Œº" font-lock-builtin-face)
          (numeric "n" font-lock-builtin-face)
          (operator "o" font-lock-comment-delimiter-face)
          (parameter "p" font-lock-builtin-face)
          (property "p" aoh-blue-int)
          (ruler "r" shadow)
          (snippet "S" font-lock-string-face)
          (string "s" font-lock-string-face)
          (struct "%" aoh-orange)
          (text "w" shadow)
          (value "v" font-lock-builtin-face)
          (variable "v" font-lock-variable-name-face)
          (t "‚Ä¢" shadow)))

       :init
       ;; Don't let display steal focus
       (advice-add 'company-show-location   :around 'display-buffer-no-select-window-advice)
       (advice-add 'company-show-doc-buffer :around 'display-buffer-no-select-window-advice)

       :config
       (global-company-mode +1)

       (defun company-complete-next-char+ (&optional count)
         "insert the next COUNT characters from the current candidate."
         (interactive "p")
         (or count (setq count 1))

         (when (company-manual-begin)
           (let* ((candidate (nth company-selection company-candidates))
                  (remaining-input
                   (substring candidate (length company-prefix))))
             (if (or (<= (length remaining-input) 1)
                     (>= count (length remaining-input)))
                 (company-complete-selection)
               (company--insert-candidate
                (concat company-prefix
                        (substring remaining-input 0 count)))))))
       (put 'company-complete-next-char+ 'company-keep t)

       (defun company-complete-common-or-next-char+ (&optional count)
         "complete the common part of the current selection or insert
     upto COUNT characters from the current candidate."
         (interactive)
         (if (and (not (cdr company-candidates))
                  (equal company-common (car company-candidates)))
             (company-complete-selection)
           (if (string-prefix-p company-prefix company-common)
               (company-complete-next-char+ count)
             (company--insert-candidate company-common))))

       :preface
       (defun company-mode-turn-off+ ()
         (company-mode -1))
       :hook (eshell-mode . company-mode-turn-off+)

       :general
       (:keymaps 'company-mode-map
        :states 'insert
        "M-SPC" 'company-complete)
       (:keymaps 'company-search-map
        "C-1"    'company-complete-tooltip-row
        "C-2"    'company-complete-tooltip-row
        "C-3"    'company-complete-tooltip-row
        "C-4"    'company-complete-tooltip-row
        "C-5"    'company-complete-tooltip-row
        "C-6"    'company-complete-tooltip-row
        "C-7"    'company-complete-tooltip-row
        "C-8"    'company-complete-tooltip-row
        "C-9"    'company-complete-tooltip-row
        "C-f"    'company-search-toggle-filtering                                    ; show filtered/all
        "C-s"    'company-search-repeat-forward
        "C-r"    'company-search-repeat-backward
        "C-n"    'company-search-repeat-forward
        "C-p"    'company-search-repeat-backward
        "<escape>"    'company-search-abort)
       (:keymaps 'company-active-map
        "<override-state>" 'all
        "C-w"    nil                                                                 ; was company-show-location
        "C-1"    'company-complete-tooltip-row
        "C-2"    'company-complete-tooltip-row
        "C-3"    'company-complete-tooltip-row
        "C-4"    'company-complete-tooltip-row
        "C-5"    'company-complete-tooltip-row
        "C-6"    'company-complete-tooltip-row
        "C-7"    'company-complete-tooltip-row
        "C-8"    'company-complete-tooltip-row
        "M-l"    'company-complete-common-or-next-char+
        "C-j"    'company-select-next
        "C-k"    'company-select-previous
        "C-d"    'company-next-page
        "C-u"    'company-previous-page
        "C-l"    'company-complete-selection
        "C-h"    'company-show-doc-buffer
        "C-p"    'company-show-location
        [tab]    'company-complete-common-or-cycle
        "TAB"    'company-complete-common-or-cycle
        "RET"    'company-complete-selection
        [C-i]    'company-complete-selection
        "C-:"    'completion-at-point
        "C-/"    'company-filter-candidates
        "C-s"    'company-filter-candidates
        "C-f"    'company-filter-candidates
        "C-o"    'company-select-last
        "M-o"    'company-select-first))
   #+END_SRC

*** company-set-backends
    A helper for configuring ~company-backends~ adapted from [[https://github.com/hlissner/doom-emacs/blob/ce65645fb87ed1b24fb1a46a33f77cf1dcc1c0d5/modules/completion/company/autoload.el#L1][doom]].

    #+BEGIN_SRC emacs-lisp
      (setq-default company-backends '(company-capf))

      (defvar company-backend-alist+
        '((text-mode (:separate company-files company-abbrev company-yasnippet ;; company-ispell
                      ))
          (lisp-interaction-mode (:separate company-capf company-files company-yasnippet company-abbrev ;; company-ispell
                                  ))
          (prog-mode (company-capf company-files company-yasnippet))
          (conf-mode company-capf company-files company-abbrev-code company-yasnippet))
        "An alist matching modes to company backends. The backends for any mode is
      built from this.")

      (defun set-company-backend! (modes &rest backends)
        (declare (indent defun))
        (unless (listp modes)
          (setq modes (list modes)))
        (dolist (mode modes)
          (if (null (car backends))
              (setq company-backend-alist+
                    (delq (assq mode company-backend-alist+)
                          company-backend-alist+))
            (if-let ((entry (assoc mode company-backend-alist+)))
                (setcdr entry (append backends (cdr entry)))
              (push `(,mode ,@backends) company-backend-alist+)))))

      (defun company-backends+ ()
        "Get the list of company backends for the current mode based on `company-backend-alist+'."
        (let (backends
              (mode major-mode)
              (modes (list major-mode)))
          (while (setq mode (get mode 'derived-mode-parent))
            (push mode modes))
          (dolist (mode modes)
            (dolist (backend (append (cdr (assq mode company-backend-alist+))
                                     (default-value 'company-backends)))
              (push backend backends)))
          (delete-dups
           (append (cl-loop for (mode . backends) in company-backend-alist+
                            if (or (eq major-mode mode)  ; major modes
                                   (and (boundp mode)
                                        (symbol-value mode))) ; minor modes
                            append backends)
                   (nreverse backends)))))

      (defsubst temp-buffer-p+ (buf)
        (equal (substring (buffer-name buf) 0 1) " "))

      (add-hook 'after-change-major-mode-hook
                (defun company-setup-backends+ ()
                  "Set `company-backends' for the current buffer."
                  (interactive)
                  (if (or (memq major-mode '(fundamental-mode special-mode))
                          buffer-read-only
                          (temp-buffer-p+ (or (buffer-base-buffer) (current-buffer))))
                      (when (called-interactively-p 'interactive)
                        (user-error "Current buffer isn't the kind we set `company-backends' in."))
                    (progn
                      (setq-local company-backends (company-backends+))
                      (when (called-interactively-p 'interactive)
                        (message "Set company backends to %s" company-backends))))))
    #+END_SRC

*** company-quickhelp
    Shows a small floating window with the docstring/help-string of the company candidate
    at point.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package company-quickhelp
        :straight t
        ;; :hook (company-mode . company-quickhelp-mode)
        :custom
        (company-quickhelp-delay 0.5)

        :general
        (:keymaps 'company-active-map
         "C-M-h" 'company-quickhelp-manual-begin))

      (use-package company-quickhelp-terminal
        :straight t
        :hook (company-quickhelp-mode . company-quickhelp-terminal-mode))
    #+END_SRC

*** company-prescient
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! company prescient)
      (use-package company-prescient
        :straight t
        :after prescient
        :hook (company-mode . company-prescient-mode))
    #+END_SRC

** all-the-icons
   provides some fonts for rendering graphical icons within emacs; alongside a set
   of functions to make retrieving appropriate functions for appropriate purposes.

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :straight t
       :commands (all-the-icons-insert-all
                  all-the-icons-insert-all-icons)
       :leader ("ii" 'all-the-icons-insert)

       :custom
       (inhibit-compacting-font-caches t)

       :init
       (defsubst all-the-icons-pad+ (icon &optional suffix)
         (concat icon (or suffix " ")))

       (defun all-the-icons-pad-on-tty-advice+ (value &optional suffix)
         ":filter-return advice for all-the-icons functions which appends
     an extra space to the icon when displaying icons on the tty."
         (if (and value
                  (not (string-empty-p value))
                  (not (display-graphic-p)))
             (all-the-icons-pad+ value suffix)
           value))

       :init
       (defconst +icon-nerd-to-all-the-icons '((mdi . material)
                                               (fa . faicon)
                                               (oct . octicon)
                                               (weather . wicon))
         "Family translations between `nerd-fonts' and `all-the-icons'.")

       (defun all-the-icons-prefer-nerd-fonts+ (func &rest args)
         ":around advice to prefer nerd-fonts over all-the-icons fonts."
         (eval
          `(cl-letf ,(cl-loop for (nerd-icon . ati-icon) in +icon-nerd-to-all-the-icons
                              append `(((symbol-function ',(all-the-icons--function-name ati-icon))
                                        (symbol-function ',(all-the-icons--function-name (intern (concat "nerd-" (symbol-name nerd-icon))))))))
             (apply ',func ',args))))

       (defun all-the-icons-pad-families-on-tty-advice+ (func &rest args)
         ":around advice that ensures any `all-the-icons-%s' result is padded on terminals.
     This isn't the most performant implementation possible so you should assign it to the
     highest level function possible that ends up calling a family function."
         (if (display-graphic-p)
             (apply func args)
           ;; Needs to be evaluated since the cl-letf spec is calculated here.
           (eval
            `(cl-letf ,(cl-loop for it in all-the-icons-font-families
                                with func-name = nil
                                do (setq func-name (all-the-icons--function-name it))
                                with new-func-name = nil
                                do (setq new-func-name (intern (concat (symbol-name func-name) "--default")))
                                append `(((symbol-function ',new-func-name)
                                          (symbol-function ',func-name))
                                         ((symbol-function ',func-name)
                                          (lambda (&rest icon-args)
                                            (all-the-icons-pad-on-tty-advice+
                                             (apply ',new-func-name icon-args))))))
               (apply ',func ',args)))))

       (defmacro +icon (family &rest args)
         "Retrieve an icon from FAMILY smartly.
     This function acts as a proxy for the various `all-the-icons-%s-icon'
     functions. It can smartly fallback to a built-in `all-the-icons' font
     when a nerd-font icon is requested but not available.

     Note: This may throw an error when `all-the-icons' doesn't have an
     association for a font in the same family that nerd font does have.
     This can happen because `all-the-icons' associations are out of date."
         (when (and (not +icons-prefer-nerd-font)
                    (string-prefix-p "nerd-" (symbol-name family)))
           (if-let ((new-family (alist-get (intern (substring (symbol-name family) 5))
                                           +icon-nerd-to-all-the-icons)))
               (setq family new-family)
             (error "Nerd fonts not enabled but need to return a %s icon" family)))
         ;; Function name calculation copied from `all-the-icons--function-name'.
         `(,(intern (concat "all-the-icons-" (downcase (symbol-name family)))) ,@args))

       (defmacro +icon-for (for target &rest args)
         "Generic icon fetcher for TARGET.
     TARGET can be a buffer, directory path, file-name, mode-symbol, etc. depending
     on the value of FOR. ARGS when supported will be passed to the associated icon
     fetcher and can be used to set :height or :face properties."
         (if-let ((func (cl-case for
                          (file #'all-the-icons-icon-for-file)
                          (mode #'all-the-icons-icon-for-mode)
                          (url  #'all-the-icons-icon-for-url)
                          ((dir directory) #'all-the-icons-icon-for-dir))))
             `(,func ,target ,@args)
           (cl-case for
             ;; `all-the-icons-icon-for-buffer'.
             (buffer `(with-current-buffer ,target
                        (if (and (buffer-file-name)
                                 (all-the-icons-auto-mode-match?))
                            (apply #'all-the-icons-icon-for-file
                                   (file-name-nondirectory (buffer-file-name))
                                   ',args)
                          (apply #'all-the-icons-icon-for-mode major-mode ',args))))
             ;; TODO: Args aren't used by the following.
             ((dir+chevron directory+chevron)
              `(all-the-icons-icon-for-dir-with-chevron ,target))
             (t (error "Don't know how to fetch an icon for %s" for)))))

       :config
       (push '(rustic-mode all-the-icons-alltheicon "rust") all-the-icons-mode-icon-alist)
       (push '(web-mode    all-the-icons-faicon     "html5") all-the-icons-mode-icon-alist)
       (push `(,(rx bol (or "pyproject.toml" "poetry.lock" "scrapy.cfg")) all-the-icons-alltheicon "python")
             all-the-icons-regexp-icon-alist)
       (push `(,(rx ".editorconfig") all-the-icons-fileicon "editorconfig" :face all-the-icons-yellow)
             all-the-icons-regexp-icon-alist)
       (push `(Man-mode all-the-icons-faicon "book")
             all-the-icons-mode-icon-alist)
       (push `(woman-mode all-the-icons-faicon "book")
             all-the-icons-mode-icon-alist)
       (push `(process-menu-mode all-the-icons-faicon "linux")
             all-the-icons-mode-icon-alist)

       (setf (car (assoc "^Makefile$" all-the-icons-regexp-icon-alist))
             (rx bol (or (any "M" "m")) "akefile" eol))

       (defun all-the-icons-insert-all ()
         (interactive)
         (cl-loop for family in all-the-icons-font-families
                  do (cl-loop for (name . icon) in (funcall (all-the-icons--data-name family))
                              do (insert "\n" icon "  " (symbol-name family) " - " name))))

       (defun all-the-icons-insert-all-icons ()
         (interactive)
         (dolist (icon-list (list all-the-icons-regexp-icon-alist
                                  all-the-icons-dir-icon-alist
                                  all-the-icons-weather-icon-alist
                                  all-the-icons-mode-icon-alist
                                  ;; all-the-icons-url-alist
                                  ))
           (dolist (icon icon-list)
             (let* ((func (nth 1 icon))
                    (args (nthcdr 2 icon))
                    (name (car args))
                    (type (substring (symbol-name func) 14)))
               (unless (= (length args) 0)
                 (insert "\n" (apply func args) " " type " - " name)))))))
   #+END_SRC

*** nerd-fonts
    When available we prefer [[https://github.com/ryanoasis/nerd-fonts][nerd-fonts]] (and it's many bundled font-sets) over the
    various all-the-icon fonts.

    #+BEGIN_SRC emacs-lisp
      (use-package nerd-fonts
        :straight (nerd-fonts :host github :repo "mohkale/nerd-fonts.el")
        :when +icons-prefer-nerd-font)

      (use-package all-the-icons-nerd-fonts
        :straight (all-the-icons-nerd-fonts :host github :repo "mohkale/all-the-icons-nerd-fonts")
        :when +icons-prefer-nerd-font
        :after all-the-icons
        :demand t
        :custom
        (all-the-icons-nerd-fonts-family
         (if (stringp +icons-prefer-nerd-font)
             +icons-prefer-nerd-font
           "Symbols Nerd Font"))

        :preface
        (defvaralias 'all-the-icons-nerd-fonts-convert-families '+icon-nerd-to-all-the-icons)

        :config
        (all-the-icons-nerd-fonts-prefer)

        :config
        (setf (cdr (assoc "\\.git" all-the-icons-dir-icon-alist))
              '(all-the-icons-nerd-custom "folder-git" :height 1.0)
              (cdr (assoc "download" all-the-icons-dir-icon-alist))
              '(all-the-icons-nerd-mdi "folder-download" :height 1.0))

        (setq all-the-icons-mode-icon-alist
              (append
               `((notmuch-search-mode all-the-icons-nerd-mdi "email" :height 1.0)
                 (notmuch-hello-mode all-the-icons-nerd-mdi "email" :height 1.0)
                 (notmuch-tree-mode all-the-icons-nerd-mdi "email" :height 1.0)
                 (notmuch-show-mode all-the-icons-nerd-mdi "email-open" :height 1.0)
                 (notmuch-messages-mode all-the-icons-nerd-mdi "email" :height 1.0))
               all-the-icons-mode-icon-alist))

        (push `(messages-buffer-mode all-the-icons-nerd-mdi "message-text" :height 1.0)
              all-the-icons-mode-icon-alist)
        (push `(,(rx ".github") all-the-icons-nerd-custom "folder-github" :height 1.0)
              all-the-icons-dir-icon-alist)
        (push `(,(rx bol (or ".gitignore" ".gitattributes" ".gitmodules") eol)
                all-the-icons-nerd-mdi "git" :face all-the-icons-red)
              all-the-icons-regexp-icon-alist)
        (push `(,(rx (or "LICENSE" (and ".license" eol)))
                all-the-icons-nerd-fa "drivers-license" :face all-the-icons-lorange)
              all-the-icons-regexp-icon-alist)
        (push `(,(rx "Thorfile") all-the-icons-nerd-oct "ruby" :face all-the-icons-lred)
              all-the-icons-regexp-icon-alist)
        (push `(,(rx "thor") all-the-icons-nerd-oct "ruby" :face all-the-icons-lred)
              all-the-icons-extension-icon-alist)
        (push `(,(rx "." eol) all-the-icons-nerd-oct "file-directory" :height 1.0 :v-adjust -0.1)
              all-the-icons-regexp-icon-alist)
        (push `(,(rx bol (or "news" "NEWS") (optional "." (+ num))) all-the-icons-nerd-mdi "newspaper")
              all-the-icons-regexp-icon-alist)
        (push `(,(rx bol "*Flymake diagnostics for " (one-or-more any) "*" eol)
                all-the-icons-nerd-mdi "buffer")
              all-the-icons-regexp-icon-alist)
        (push `(,(rx ".journal" eol)
                all-the-icons-nerd-fa "book")
              all-the-icons-regexp-icon-alist)
        )
    #+END_SRC

** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :straight t
       :custom
       (avy-single-candidate-jump nil)

       :leader
       ("jj" 'avy-goto-char
        "jk" 'avy-goto-char-2
        "jf" 'avy-goto-char-timer))
   #+END_SRC

** browse-url
   gives functions to open URLs/file-paths on your local system using system
   specific tools.

   #+BEGIN_SRC emacs-lisp
     (use-package browse-url
       :straight t
       :init
       (advice-add #'browse-url-xdg-open :override #'+xopen-url)
       (advice-add #'browse-url-can-use-xdg-open :override
                   (defun browse-url-prefer-xopen+ ()
                     (and (or (getenv "DISPLAY")
                              (getenv "WAYLAND_DISPLAY"))
                          (executable-find "xopen"))))

       :config
       (defun +xopen-file (file &optional arg)
         (interactive "fP")
         (+xopen-url file))
       :commands +xopen-file
       :general
       (:keymaps 'embark-file-map
        [remap consult-file-externally] '+xopen-file)

       :leader ("fo" '+xopen-url)
       :config
       (defun +xopen-url (url &optional arg)
         "Open visited file in default external program.
     When in dired mode, open file under the cursor.
     With a prefix ARG always prompt for command to use."
         (interactive (list (or (when (derived-mode-p 'dired-mode)
                                  (dired-get-file-for-visit))
                                (smart-buffer-file-name)
                                (user-error "Cannot determine file name for buffer."))
                            current-prefix-arg))

         (when (string-prefix-p "~" url)
           (setq url (expand-file-name url)))

         (let ((program (if arg
                            (read-shell-command "Open current file with: ")
                          "xopen")))
           (call-process program nil 0 nil url)))
       :commands +xopen-url

       :config
       (defun +xopen-pdf (path page)
         (if (and (not (string-empty-p page))
                  (executable-find "zathura"))
             (call-process "zathura" nil 0 nil path "--page" page)
           (+xopen-url path)))
       :commands +xopen-pdf)
   #+END_SRC

** buffer-move
   Move buffer to windows in other directions. Like the vim C-w <Shift>+{h,j,k,l}
   series of functions.

   #+BEGIN_SRC emacs-lisp
     (use-package buffer-move
       :straight t
       :commands (rotate-windows)
       :config
       ;; See [[https://www.emacswiki.org/emacs/TransposeWindows][Transpose Windows]]
       (defun rotate-windows (arg)
         "Rotate your windows; use the prefix argument to rotate the other direction"
         (interactive "P")
         (if (not (> (count-windows) 1))
             (message "You can't rotate a single window!")
           (let* ((rotate-times (prefix-numeric-value arg))
                  (direction (if (or (< rotate-times 0) (equal arg '(4)))
                                 'reverse 'identity)))
             (dotimes (_ (abs rotate-times))
               (dotimes (i (- (count-windows) 1))
                 (let* ((w1 (elt (funcall direction (window-list)) i))
                        (w2 (elt (funcall direction (window-list)) (+ i 1)))
                        (b1 (window-buffer w1))
                        (b2 (window-buffer w2))
                        (s1 (window-start w1))
                        (s2 (window-start w2))
                        (p1 (window-point w1))
                        (p2 (window-point w2)))
                   (set-window-buffer-start-and-point w1 b2 s2 p2)
                   (set-window-buffer-start-and-point w2 b1 s1 p1)))))))

       :general
       (:keymaps 'emacs-window-map
        "H"   'buf-move-left
        "M-h" 'buf-move-left
        "J"   'buf-move-down
        "M-j" 'buf-move-down
        "K"   'buf-move-up
        "M-k" 'buf-move-up
        "L"   'buf-move-right
        "M-l" 'buf-move-right))
   #+END_SRC

** define-word
   #+BEGIN_SRC emacs-lisp
     (use-package define-word
       :straight t
       :leader
       ("hdW" 'define-word
        "hdw" 'define-word-at-point))
   #+END_SRC

** drag-stuff
   VS Code like drag region or line upwards or downwards.

   #+BEGIN_SRC emacs-lisp
     (use-package drag-stuff
       :straight t
       :general
       ("C-<up>" 'drag-stuff-up
        "C-<down>" 'drag-stuff-down))
   #+END_SRC

** emojify
   #+BEGIN_SRC emacs-lisp
     (use-package emojify
       :straight t
       :hook ((org-mode              . emojify-mode)
              (git-commit-mode       . emojify-mode)
              (web-mode              . emojify-mode)
              (emacs-lisp            . emojify-mode)
              (lisp-interaction-mode . emojify-mode)
              (yaml-mode             . emojify-mode)
              (bibtex-mode           . emojify-mode)
              (shell-mode            . emojify-mode)
              (markdown-mode         . emojify-mode)
              (lisp-interaction-mode . emojify-mode)
              (scss-mode             . emojify-mode))
       :custom
       (emojify-emojis-dir (cache! "emojify/"))
       ;; Make emojis work like `prettify-symbols-mode'.
       (emojify-point-entered-behaviour 'uncover)
       (emojify-emoji-styles '(unicode github))
       (emojify-display-style 'unicode)

       :leader
       ("tme" 'emojify-mode
        "ie" 'emojify-insert-emoji
        "hE" 'emojify-apropos-emoji
        "he" 'emojify-describe-emoji)

       :general
       (:keymaps 'emojify-list-mode-map
        :states 'motion
        "gr" 'emojify-list-force-refresh
        "Y"  'emojify-list-copy-emoji
        "RET" 'emojify-list-describe-emoji)
       (:keymaps 'emojify-description-mode
        :states 'motion
        "Y" 'emojify-description-copy-emoji))
   #+END_SRC

*** company-emojify                                                     :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! company company-emoji)
      (use-package company-emoji
        :straight t
        :after emojify
        :init
        (set-company-backend! 'text-mode 'company-emoji)

        :custom
        (company-emoji-insert-unicode nil
         "Never insert emojis as their unicode symbols."))
    #+END_SRC

** eyebrowse
   :PROPERTIES:
   :header-args+: :tangle (package-yes! eyebrowse)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :straight t
       :config
       (eyebrowse-mode +1))
   #+END_SRC

*** eyebrowse-hydra
    #+BEGIN_SRC emacs-lisp
      (autoload 'eyebrowse-hydra/body (lisp! "hydras" "eyebrowse-hydra.el") nil t)

      (general-define-key
       :keymaps 'emacs-window-map
        "w"   '(eyebrowse-hydra/body :wk "eyebrowse-hydra")
        "C-w" '(eyebrowse-hydra/body :wk "eyebrowse-hydra"))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle (package-str! (lisp! "hydras/eyebrowse-hydra.el") eyebrowse)
      (require 'eyebrowse)

      (defvar eyebrowse-hydra/verbose-p nil
        "when true, hydra hint doesn't show keybindings")

      (defvar eyebrowse-hydra/show-wconfig-names t
        "when true, wconfigs in the hydra header will includes names (when applicable)")

      (defhydra eyebrowse-hydra (:hint nil :foreign-keys nil)
        ("0" eyebrowse-switch-to-window-config-0 :exit t)
        ("1" eyebrowse-switch-to-window-config-1 :exit t)
        ("2" eyebrowse-switch-to-window-config-2 :exit t)
        ("3" eyebrowse-switch-to-window-config-3 :exit t)
        ("4" eyebrowse-switch-to-window-config-4 :exit t)
        ("5" eyebrowse-switch-to-window-config-5 :exit t)
        ("6" eyebrowse-switch-to-window-config-6 :exit t)
        ("7" eyebrowse-switch-to-window-config-7 :exit t)
        ("8" eyebrowse-switch-to-window-config-8 :exit t)
        ("9" eyebrowse-switch-to-window-config-9 :exit t)

        ("M-0" eyebrowse-switch-to-window-config-0)
        ("M-1" eyebrowse-switch-to-window-config-1)
        ("M-2" eyebrowse-switch-to-window-config-2)
        ("M-3" eyebrowse-switch-to-window-config-3)
        ("M-4" eyebrowse-switch-to-window-config-4)
        ("M-5" eyebrowse-switch-to-window-config-5)
        ("M-6" eyebrowse-switch-to-window-config-6)
        ("M-7" eyebrowse-switch-to-window-config-7)
        ("M-8" eyebrowse-switch-to-window-config-8)
        ("M-9" eyebrowse-switch-to-window-config-9)

        ("c" eyebrowse-create-window-config)
        ("d" eyebrowse-close-window-config)
        ("r" eyebrowse-rename-window-config)
        ("n" eyebrowse-next-window-config)
        ("l" eyebrowse-next-window-config)
        ("N" eyebrowse-prev-window-config)
        ("h" eyebrowse-prev-window-config)
        ("TAB" eyebrowse-last-window-config)
        ("u" (progn (winner-undo) (setq this-command 'winner-undo)))
        ("U" winner-redo :exit t)
        ("?" (setq eyebrowse-hydra/verbose-p (not eyebrowse-hydra/verbose-p)))
        ("t" (setq eyebrowse-hydra/show-wconfig-names (not eyebrowse-hydra/show-wconfig-names)))
        ("w" winman-hydra/body :exit t)

        ("q" nil :exit t))

      (defmacro eyebrowse-hydra/generate-set-binding (kbd value)
        ;; `(unless (eq (lookup-key eyebrowse-hydra/keymap ,kbd)
        ;;              ,value)
        ;;    (define-key eyebrowse-hydra/keymap ,kbd ,value))
        `(define-key eyebrowse-hydra/keymap ,kbd ,value))
      (put 'eyebrowse-hydra/generate-set-binding 'lisp-indent-function 'defun)

      (defface eyebrowse-hydra/active-wconfig-face
        '((t :inherit mode-line))
        "face for inactive windows in the header string")

      (defconst eyebrowse-hydra/complete-command-docstring
            "
      Jump                        Actions
      ^^^^‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  ‚Äî^‚Äî^‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî^‚Äî^‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      [_0_.._9_] nth wconfig     [_c_] create new wconfig      [_w_] window-manager
      [_TAB_] previous wconfig^^ [_d_] delete current wconfig
      ^^^^                       [_r_] rename current wconfig
      [_h_/_N_] wconfig left
      [_l_/_n_] wconfig right    [_u_/_U_] undo/redo wconfig
      ")

      (defmacro eyebrowse-window-list-to-title (window-list)
        "extract window config title from list.
      is either the title or a nil value."
        `(let ((title (car (cdr (cdr ,window-list)))))
           (unless (string-empty-p title)
             title)))

      (setq eyebrowse-hydra/hint
            ;; TODO break when too long
            '(let ((current-wconfig-num (eyebrowse--get 'current-slot))
                   header-s wconfig-item-s)
               (dolist (wconfig-counter (number-sequence 0 9))
                 (let ((wconfig-item (eyebrowse--window-config-present-p wconfig-counter)))
                   (if (not wconfig-item)
                       ;; ;; disable binding for non existent wconfig
                       ;; (eyebrowse-hydra/generate-set-binding
                       ;;   (number-to-string wconfig-counter) nil)
                       nil

                     ;; ;; re-enable binding for existent wconfig
                     ;; (let* ((wconfig-counter-s (number-to-string wconfig-counter))
                     ;;        (invoking-function (intern (concat "eyebrowse-hydra/eyebrowse-switch-to-window-config-"
                     ;;                                           (number-to-string wconfig-counter)))))
                     ;;   ;; re-enable bindings for workgroups which do exist or have been created
                     ;;   (eyebrowse-hydra/generate-set-binding wconfig-counter-s invoking-function))

                     ;; include wconfig in header string
                     (let ((win-name (eyebrowse-window-list-to-title wconfig-item)))
                       (setq wconfig-item-s (if (and win-name
                                                     eyebrowse-hydra/show-wconfig-names)
                                                (format "[%d:%s]" wconfig-counter win-name)
                                              (format "[%d]" wconfig-counter)))

                       (when (eq wconfig-counter
                                 current-wconfig-num)
                         (setq wconfig-item-s (propertize wconfig-item-s
                                                          'face 'eyebrowse-hydra/active-wconfig-face)))

                       (setq header-s (concat header-s wconfig-item-s " "))))))

               (setq header-s (format "\n%s %s (_?_ help)\n"
                                      (propertize "Window Configs"
                                                  'face 'font-lock-string-face)
                                      (s-trim header-s)))
               (eval (hydra--format nil
                                    '(nil nil :hint nil)
                                    (if (not eyebrowse-hydra/verbose-p)
                                        header-s
                                      (concat header-s
                                              eyebrowse-hydra/complete-command-docstring))
                                    eyebrowse-hydra/heads))))

      (provide 'eyebrowse-hydra)
    #+END_SRC

** gitlink
   #+BEGIN_SRC emacs-lisp
     (use-package git-link
       :straight t
       :custom
       (git-link-open-in-browser nil)                                                ; default is to open the generated link

       :leader
       ("gy"  '(:ignore t :wk "links")
        "gyl" 'git-link
        "gyc" 'git-link-commit
        "gyh" 'git-link-homepage))
   #+END_SRC

** hide-modeline
   Makes the mode-line blank in the current buffer. this doesn't let the buffer contents expand
   into the mode-line region, it simply makes it appear as if nothings there.

   #+BEGIN_SRC emacs-lisp
     (use-package hide-mode-line
       :straight t)
   #+END_SRC

** hl-todo
   Highlight certain keywords in the current buffer.

   #+BEGIN_SRC emacs-lisp
     (use-package hl-todo
       :straight t
       :hook ((prog-mode . global-hl-todo-mode)
              (text-mode . global-hl-todo-mode)
              (org-mode  . hl-todo-mode))
       :leader
       ("jt" 'hl-todo-next
        "jT" 'hl-todo-previous
        "et" 'hl-todo-occur

        "it" 'hl-todo-insert
        "it" 'hl-todo-insert-keyword))
   #+END_SRC

** ialign
   #+BEGIN_SRC emacs-lisp
     (use-package ialign
       :straight t
       :commands evil-ialign

       :config
       ;; Run ialign using evil motions.
       (evil-define-operator evil-ialign (beg end)
         :type        line
         :repeat      nil
         :move-point  t
         :keep-visual nil
         (ialign beg end))

       :leader
       ("x TAB" 'evil-ialign)

       :general
       (:states 'normal
        "g TAB" 'evil-ialign)
       (:keymaps 'ialign-minibuffer-keymap
        ;; "" 'ialign-toggle-repeat
        "M-k"        'ialign-increment-spacing
        "M-j"        'ialign-decrement-spacing
        "M-h"        'ialign-decrement-group
        "M-l"        'ialign-increment-group
        "<M-up>"     'ialign-increment-spacing
        "<M-down>"   'ialign-decrement-spacing
        "<M-left>"   'ialign-decrement-group
        "<M-right>"  'ialign-increment-group
        "C-SPC"      'ialign-set-spacing
        "<C-tab>"    'ialign-toggle-tabs
        "<C-return>" 'ialign-set-group
        "C-h"        'backward-char
        "C-l" (lambda ()
                (interactive)
                (call-interactively (if (eolp)
                                        'exit-minibuffer
                                      'forward-char)))))
   #+END_SRC

** lorem-ipsum
   insert placeholder text in the lorem-ipsum-dolor format.

   #+BEGIN_SRC emacs-lisp
     (use-package lorem-ipsum
       :straight t
       :leader
       ("il"  '(:ignore t :wk "lorem-ipsum")
        "ill" 'Lorem-ipsum-insert-list
        "ilp" 'Lorem-ipsum-insert-paragraphs
        "ils" 'Lorem-ipsum-insert-sentences))
   #+END_SRC

** miniedit
   write the minibuffer contents to a buffer. edit, then paste new contents back to minibuffer.

   #+BEGIN_SRC emacs-lisp
     (use-package miniedit
       :straight (miniedit :host github :repo "emacsorphanage/miniedit")
       :delight (miniedit-mode " MiniEdit")
       :custom
       (miniedit-show-help-p nil)                                                    ; thanks... but no thanks

       :lazy-leader
       (:mode 'miniedit-mode
        :minor t
        :prefix leader-major-mode-prefix
        "," 'exit-recursive-edit)

       :general
       (:keymaps '(minibuffer-local-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map
                   minibuffer-local-must-match-map)
        "M-e" 'miniedit)
       (:keymaps 'evil-ex-search-keymap
        ; Miniedit and evil don't seem to get along.
        "M-e" nil))
   #+END_SRC

** page-break-lines
   :PROPERTIES:
   :ID:       1d272067-3aa0-4083-ba76-e408a5c9daa1
   :END:
   display ^L lines as horizontal-rules. Like so:



   #+BEGIN_SRC emacs-lisp
     (use-package page-break-lines
       :straight t
       :hook ((org-mode                    . page-break-lines-mode)
              (help-mode                   . page-break-lines-mode)
              (outline-mode                . page-break-lines-mode)
              (emacs-lisp-compilation-mode . page-break-lines-mode)
              (lisp-interaction-mode       . page-break-lines-mode)
              (emacs-lisp-mode             . page-break-lines-mode)
              (cc-mode                     . page-break-lines-mode))
       :diminish
       page-break-lines-mode)
   #+END_SRC

** pcre2el
   convert from emacs regular expressions to perl like regexps and vice versa.

   #+BEGIN_SRC emacs-lisp
     (use-package pcre2el
       :straight t
       :leader
       ("xr"   '(:ignore t :wk "regexp")
        "xrb"  'regexp-builder
        "xr'"  'rxt-convert-to-strings
        "xr/"  'rxt-explain
        "xrc"  'rxt-convert-syntax
        "xrt"  'rxt-toggle-elisp-rx
        "xrx"  'rxt-convert-to-rx

        "xre"  '(:ignore t :wk "elisp")
        "xre'" 'rxt-elisp-to-strings
        "xre/" 'rxt-explain-elisp
        "xrep" 'rxt-elisp-to-pcre
        "xret" 'rxt-toggle-elisp-rx
        "xrex" 'rxt-elisp-to-rx

        "xrp"  '(:ignore t :wk "PCRE")
        "xrp'" 'rxt-pcre-to-strings
        "xrp/" 'rxt-explain-pcre
        "xrpe" 'rxt-pcre-to-elisp
        "xrpx" 'rxt-pcre-to-rx))
   #+END_SRC

** project
   The [[info:emacs#Projects][built in]] project management library.

   #+BEGIN_SRC emacs-lisp
     (use-package project
       :custom
       (project-list-file (state! "projects.el"))

       :init
       (defun project-current-root+ (&optional dir)
         (when-let ((project
                     (project-current nil (or dir default-directory))))
           (project-root project)))

       (defun project-has-file-p (&rest files)
         (when-let ((default-directory (project-current-root+)))
           (cl-find-if #'file-exists-p files)))

       :commands project-show-and-copy-project-dir+
       :leader ("py" 'project-show-and-copy-project-dir+)
       :config
       (defun project-show-and-copy-project-dir+ (&optional arg)
         (interactive "P")
         (if-let ((path (project-current-root+)))
             (progn
               (when arg
                 (if (and (consp arg)
                          (eq (car arg) 4))
                     (insert path)
                   (save-excursion
                     (insert path))))
               (message (abbreviate-file-name path))
               (kill-new path))
           (message "You're not currently in a project.")))

       :leader
       ("fp" 'project-switch-project)

       (:prefix "p"
        "" '(:ignore t :wk "project")
        ;; Unbound commands
        ;; * project-vc-dir
        ;; * project-eshell
        ;; * project-shell
        ;; * project-or-external-find-file
        ;; * project-or-external-find-regexp

        "!" 'project-shell-command
        "&" 'project-async-shell-command
        "b" 'project-switch-to-buffer
        "h" 'project-dired                                                           ; Dired in project home directory
        "f" 'project-find-file
        "c" 'project-compile
        "x" 'project-kill-buffers
        "SPC" 'project-execute-extended-command                                      ; Run M-x in the root of the current project

        "s" '(:ignore t :wk "search")
        ;; "sg" 'project-find-regexp
        "sq" 'project-query-replace-regexp))
   #+END_SRC

*** project-org-capture
    #+begin_src emacs-lisp
      (use-package org
        :commands (org-contextualize-keys
                   project-org-capture+
                   project-org-project-file+)
        :preface
        (defvar project-org-capture-templates+ nil)
        (defvar project-org-capture-templates-contexts+ nil)

        :config
        (defun project-org-capture-templates+ (name root)
          "Adapted from `counsel-projectile-org-capture'."
          (cl-loop
           with replace-fun = `(lambda (string)
                                 (replace-regexp-in-string
                                  "\\${[^}]+}"
                                  (lambda (s)
                                    (pcase s
                                      ("${root}" ,root)
                                      ("${name}" ,name)))
                                  string))
           for template in project-org-capture-templates+
           collect (cl-loop
                    for item in template
                    if (= (cl-position item template) 1) ;; template's name
                      collect (funcall replace-fun item)
                    else if (= (cl-position item template) 3) ;; template's target
                      collect (cl-loop
                               for x in item
                               if (stringp x)
                                 collect (funcall replace-fun x)
                               else
                                 collect x)
                    else
                      collect item)))

        (defun project-org-capture+ ()
          "`org-capture' wrapper which includes project specific capture templates."
          (interactive)
          (require 'org-capture)
          (let* ((root (ignore-errors (project-current-root+)))
                 (org-capture-templates-contexts
                  (append (or (and root
                                   project-org-capture-templates-contexts+)
                              org-capture-templates-contexts)))
                 (org-capture-templates
                  (append org-capture-templates
                          (when root
                            (project-org-capture-templates+
                             (file-name-base (s-chop-suffix "/" root)) root)))))
            (call-interactively +org-capture-function)))

        (defun project-org-project-file+ (&optional arg)
          (interactive "P")
          (find-file
           (if-let ((cands (let ((default-directory project-org-projects-directory+))
                             (cl-loop for file in (cl-remove-if
                                                   (apply-partially #'string-match-p +find-file-ignore-regexp)
                                                   (append (file-expand-wildcards "*.org")))
                                      collect (cons file (concat default-directory "/" file))))))
               (or (and (not arg)
                        (when-let* ((current-project (project-project-name))
                                    (current-project (unless (string-equal current-project "-")
                                                       current-project)))
                          (alist-get (concat current-project ".org") cands nil nil #'string-equal)))
                   (alist-get
                    (completing-read
                     "Find file: " (lambda (string predicate action)
                                     (if (eq action 'metadata)
                                         '(metadata (category . file))
                                       (complete-with-action action cands string predicate)))
                     nil t)
                    cands nil nil #'string-equal))
             (user-error "No project org files have been found at %s" project-org-projects-directory+))))

        :general
        ([remap org-capture]          'project-org-capture+
         [remap consult-org-capture+] 'project-org-capture+))
    #+end_src

** projectile
   Project management in style.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :straight t
       :defer  10
       :delight ""
       :commands (projectile-project-p
                  projectile-project-root)
       :config
       (projectile-mode +1)

       :init
       (advice-add 'delete-buffer-file :after
                   (defun projectile-invalidate-cache-on-file-delete+ (&rest _)
                     (when (projectile-project-p)
                       (call-interactively 'projectile-invalidate-cache))))

       (defvaralias 'grep-regexp-history 'regexp-search-ring)

       :custom
       (projectile-tags-backend 'xref) ;; opt into gtags
       (projectile-tags-command "ctags -Re -f \"%s\" %s \"%s\"")

       :config
       (setq projectile-project-search-path (+repo-path (getenv "REPO_PATH")))

       :custom
       (projectile-cache-file (state! "projectile/cache.el"))
       (projectile-known-projects-file (state! "projectile/known-projects.el"))
       :config
       (eval-when-compile
         (let ((dir (state! "projectile")))
           (unless (file-exists-p dir)
             (mkdir dir t))))

       :config
       (defun projectile-ensure-no-trailing-slash-in-root (func &rest args)
         (cl-letf* (((symbol-function 'true-projectile-project-root)
                     (symbol-function 'projectile-project-root))
                    ((symbol-function 'projectile-project-root)
                     (lambda (&rest args)
                       ;; TODO maybe don't hardcode file name seperator.
                       (string-remove-suffix "/"
                                             (apply 'true-projectile-project-root args)))))
           (apply func args)))

       (advice-add 'projectile-regenerate-tags :around #'projectile-ensure-no-trailing-slash-in-root)

       (when (windows-p)
         ;; fixes search glitches on windows when using cygwin... also strips out leading ./ because
         ;; ivy seems to recognise ./ paths as distinct from their non ./ counterparts... maybe that's
         ;; projectiles fault... who knows. also exclude special emacs backup files from search results.
         (setq projectile-generic-command "find . -type f -not -iname '#*#' -print | cut -c3- | tr '\\n' '\\0'"))

       (advice-add 'projectile-cleanup-known-projects :around #'inhibit-messages-wrapper!)

       (defun projectile-compile--double-prefix-means-run-comint (func &optional _args)
         "Allow running compilation interactively when multiple prefixes are given.
     with two prefixes (C-u C-u) runs default compilation command in interactive
     compilation buffer. with three prompts for command and then runs it in an
     interactive compilation buffer."
         (let ((prefix current-prefix-arg))
           (if (and (consp prefix)
                    (setq prefix (car prefix))
                    (>= prefix 16))
               (cl-letf* (((symbol-function 'actual-compile)
                           (symbol-function 'compile))
                          ((symbol-function 'compile)
                           (lambda (command &optional _)
                             (actual-compile command t))))
                 (funcall func (if (eq prefix 16) nil '(4))))
             (funcall func prefix))))

       (advice-add 'projectile-run-project     :around #'projectile-compile--double-prefix-means-run-comint)
       (advice-add 'projectile-compile-project :around #'projectile-compile--double-prefix-means-run-comint)
       (advice-add 'projectile-test-project    :around #'projectile-compile--double-prefix-means-run-comint)

       :config
       (advice-add 'projectile-switch-project :around
                   (defun projectile-switch-project+ (func &optional arg)
                     "Make prefix for `projectile-switch-project' reload project list."
                     (interactive "P")
                     (when arg
                       (projectile-diblacscover-projects-in-search-path))
                     (funcall func)))

       :general
       (:keymaps 'projectile-mode-map
        ;; Override `project' bindings.
        [remap project-shell-command] 'projectile-run-shell-command-in-root
        [remap project-async-shell-command] 'projectile-run-async-shell-command-in-root
        [remap project-switch-project] 'projectile-switch-project
        [remap project-switch-to-buffer] 'projectile-switch-to-buffer
        [remap project-dired] 'projectile-dired
        [remap project-find-file] 'projectile-find-file
        [remap project-compile] 'projectile-compile-project
        [remap project-kill-buffers] 'projectile-kill-buffers
        [remap project-query-replace-regexp] 'projectile-replace-regexp)

       :leader
       (:prefix "p"
        "TAB" 'projectile-find-other-file
        "RET" 'projectile-toggle-between-implementation-and-test
        "DEL" 'projectile-invalidate-cache

        "so" 'projectile-multi-occur

        "t" 'projectile-test-project
        "p" 'projectile-run-project
        "i" 'projectile-install-project

        "d" 'projectile-find-dir
        "r" 'projectile-recentf
        "F" 'projectile-find-file-in-known-projects                                  ; find-file across all known projects.
        "m" 'projectile-ibuffer                                                      ; Open an ibuffer session with all open project buffers.

        "o" 'projectile-org-project-file+
        "[" 'projectile-previous-project-buffer
        "]" 'projectile-next-project-buffer
        "v" (if (package! vterm)
                'projectile-run-vterm
              'projectile-run-term)

        "g" '(:ignore t :wk "tags")
        "gr" 'projectile-regenerate-tags
        "gg" 'projectile-find-tag
        "st" 'projectile-find-tag))
   #+END_SRC

*** project-types
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :config
        (projectile-register-project-type 'rake '("rakefile")
         :compile "rake build"
         :test    "rake test"
         :run     "rake run"
         :test-suffix ".spec")

        (projectile-update-project-type 'gradle
         :marker-files '("build.gradle" "build.gradle.kts")
         :run "gradle run")

        (projectile-update-project-type 'make :run "make run")
        (projectile-update-project-type 'gradlew :run "./gradlew run")
        (projectile-update-project-type 'go :run "go run")
        (projectile-update-project-type 'haskell-stack :run "stack run")

        (projectile-update-project-type 'cmake
         :compile "cmake --build build"
         :run "cmake --build build --target run"))
    #+END_SRC

*** project-integration
    Built-in =project.el= integration courtesy of [[https://github.com/bbatsov/projectile/issues/1591#issuecomment-895111852][@wurosh]].

    #+begin_src emacs-lisp
      (use-package projectile
        :straight t
        :after (project)
        :config
        (push (defun project-projectile+ (dir)
                (when-let ((root (projectile-project-root dir)))
                  (cons 'projectile root)))
              project-find-functions)

        (require 'cl-lib)

        (cl-defmethod project-root ((project (head projectile)))
          (cdr project))

        (cl-defmethod project-files ((project (head projectile)) &optional _dirs)
          (let ((root (project-root project)))
            ;; Make paths absolute and ignore the optional dirs argument, see [[https://github.com/bbatsov/projectile/issues/1591#issuecomment-896423965][here]].
            (mapcar (apply-partially #'concat root)
                    (projectile-project-files root))))

        (cl-defmethod project-buffers ((project (head projectile)))
          (projectile-project-buffers (project-root project))))
    #+end_src

** real-auto-save-mode
   #+BEGIN_SRC emacs-lisp
     (use-package real-auto-save
       :straight t
       :init
       (setq real-auto-save-interval 6))
   #+END_SRC

** sudo-edit
   Reopen the current file as root user.

   #+BEGIN_SRC emacs-lisp
      (use-package sudo-edit
        :straight t
        :commands sudo-edit
        :leader
        ("fE" 'sudo-edit))
   #+END_SRC

** transpose-frame
   #+BEGIN_SRC emacs-lisp
     (use-package transpose-frame
       :straight (transpose-frame :host github :repo "emacsorphanage/transpose-frame")
       :general
       (:keymaps 'emacs-window-map
        "C-t" 'transpose-frame
        "t"   'transpose-frame
        "("   'rotate-frame-clockwise                                                ; 90 degrees
        ")"   'rotate-frame-anti-clockwise                                           ; 90 degrees
        "*"   'rotate-frame                                                          ; 180 degrees
        "F"   'flop-frame                                                            ; flip horizontally
        "f"   'flip-frame))
   #+END_SRC

** rainbow-delimiters
   pretty colors for my lisp parentheses :)

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :straight t
       :hook (prog-mode . rainbow-delimiters-mode)
       :commands rainbow-delimiters-mode)
   #+END_SRC

** undo-tree
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! undo-tree)
     (use-package undo-tree
       :straight (undo-tree :fork (:host gitlab
                                   :repo "tsc25/undo-tree"))
       :diminish
       :custom
       (evil-undo-system 'undo-tree)
       (undo-tree-auto-save-history t)
       (undo-tree-history-directory-alist `(("." . ,(state! "undo-tree"))))

       :init
       (global-undo-tree-mode +1)

       :config
       (push 'undo-tree-visualizer-mode
              +whitespace-exempt-modes)

       (advice-add 'undo-tree-save-history :before-until
                   (defun undo-tree-save-history--respect-ignore+ (&rest _args)
                     "respect `undo-skip-autosave-regex+'.
     also suppresses undo-tree messages relating to saving files."
                     (not
                      (and undo-skip-autosave-regex+
                           (not (string-match-p undo-skip-autosave-regex+
                                                buffer-file-name))))))

       (advice-add #'undo-tree-save-history :around
                   (defun undo-tree-silence-save-history+ (func &rest args)
                     "Suppress undo-file save messages.
     By default undo-tree writes a message to the Messages buffer EVERY
     time you save a file. This is highly diruptive, you can suppress the
     messages by assigning `inhibit-message' but it still shows up in the
     messages buffer. This redefines the `write-region' function and
     forces it to not echo out that the files been saved."
                     (cl-letf* ((actual-write-region
                                (symbol-function 'write-region))
                               ((symbol-function 'write-region)
                                (lambda (start end filename &optional append &rest args)
                                  (apply actual-write-region start end filename append 'nomessage (cdr args)))))
                       (apply func args))))

       (defun undo-tree-visualizer-set-and-exit-selection-mode ()
         (interactive)
         (funcall-interactively #'undo-tree-visualizer-set)
         (undo-tree-visualizer-selection-mode -1))

       :leader
       ("au" '(undo-tree-visualize :wk "undo-tree"))

       :lazy-leader
       (:mode 'undo-tree-visualizer-mode
        "RET" 'undo-tree-visualizer-selection-mode
        "t" 'undo-tree-visualizer-toggle-timestamps
        "," 'undo-tree-visualizer-quit
        "q" 'undo-tree-visualizer-abort
        "d" 'undo-tree-visualizer-toggle-diff)

       :general
       (:keymaps 'undo-tree-map
        "C-/" nil "C-_" nil "C-?" nil)
       (:states  'motion
        :keymaps '(undo-tree-visualizer-mode-map
                   undo-tree-visualizer-selection-mode-map)
        "t" 'undo-tree-visualizer-toggle-timestamps
        "gj" 'undo-tree-visualize-redo-to-x
        "gk" 'undo-tree-visualize-undo-to-x

        [remap quit-window] 'undo-tree-visualizer-quit
        [remap evil-scroll-column-right] 'undo-tree-visualizer-scroll-left
        [remap evil-scroll-column-left] 'undo-tree-visualizer-scroll-right)
       (:states  'motion
        :keymaps 'undo-tree-visualizer-mode-map
        "h" 'undo-tree-visualize-switch-branch-left
        "l" 'undo-tree-visualize-switch-branch-right
        "d" 'undo-tree-visualizer-toggle-diff)
       (:states 'motion
        :keymaps 'undo-tree-visualizer-selection-mode-map
        "RET" 'undo-tree-visualizer-set-and-exit-selection-mode
        "h" 'undo-tree-visualizer-select-left
        "l" 'undo-tree-visualizer-select-right
        "d" 'undo-tree-visualizer-selection-toggle-diff))
   #+END_SRC

** undo-fu
   :PROPERTIES:
   :header-args+: :tangle (package-no! undo-tree)
   :END:

   Emacs built-in undo is _weird_ and *wonderful*.

   If you can understand it it'll certainly come in useful, however for most users
   [[*undo-tree][undo-tree]] will be a much simpler and easier to use undoing package.

   Alright, now to explain how undo and the helping wrapper package ~undo-fu~ works.
   You may find it helpful to read [[https://www.reddit.com/r/emacs/comments/6yzwic/how_emacs_undo_works/][this]] before trying out ~undo-fu~.

   Emacs implements undo as a chain of actions including undo itself. To redo an
   action emacs actually undoes an undo, pushing this new reverse undo back onto
   the undo history.
   This means the emacs undo history is complete, every previous state the buffer
   was in can be accessed, however the more changes you make (including undo's or
   redos) the more is pushed onto the undo history chain and the longer it'll take
   to reverse to that state when redoing.

   The general approach to undo with this new system is to either undo to the state
   you want to get to or redo the undos from the end of the undo-history until you
   reach your desired state.
   In the former case the change you want is a concrete piece of the current undo
   history and can be reached linearly by undoing.
   In the latter case you want a revision in a separate undo history. For example
   you make an edit, undo once, make an edit, and can now no longer access the
   changes you undid with the initial undo.
   The undo history in this case is ~A -> B -> C -> Undo -> Undo -> D -> E~. The final
   text in the buffer is from the series of changes ~ADE~ and you can undo through
   them easily. How do you get back to ~ABC~? By *redoing*. At state ~E~ you can redo to
   reverse ~E~ and get to ~D~, then at ~D~ you redo to get back to ~A~, now redoing reverses
   the undo that removed ~B~ and redoing once more undos the removal of ~C~ inserting it
   back in. We get back to ~ABC~.
   This linear structure of undo can extend up-to an arbitrary depth, the only issue
   is having to manoeuvre through intermittent histories as you navigate.

   #+BEGIN_SRC emacs-lisp :tangle (package-no! undo-tree)
     (use-package undo-fu
       :straight t
       :custom
       (evil-undo-system 'undo-fu))

     (use-package undo-fu-session
       :straight t
       :hook (after-init . global-undo-fu-session-mode)
       :custom
       (undo-fu-session-directory (state! "undo-fu"))
       (undo-fu-session-incompatible-files (list undo-skip-autosave-regex+)))
   #+END_SRC

** uuidgen
   #+BEGIN_SRC emacs-lisp
     (use-package uuidgen
       :straight t
       :leader
       ("iu" 'uuidgen
        ;; "U1" 'uuidgen-1
        ;; "U4" 'uuidgen-4
        ;; "UU" 'uuidgen-U
        ))
   #+END_SRC

** visible-mark
   highlight region when mark is active.

   #+BEGIN_SRC emacs-lisp
     (use-package visible-mark
       :straight t
       :commands (visible-mark-mode))
    #+END_SRC

** which-key
   show completion candidates for the current key prefix, after a mild delay.

   TODO refactor

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :straight t
       :demand t
       :diminish
       :commands (which-key-M-x+)
       :config
       (which-key-setup-minibuffer)
       (setq which-key-show-prefix 'bottom)

       :init
       ;; prefix-completion courtesy of clemara
       ;; see https://with-emacs.com/posts/ui-hacks/prefix-command-completion/
       (defun which-key-M-x-prefix+ (&optional _)
         "Completing read and execute command from prefix-map.

     This command can be used as `prefix-help-command'. The optional
     argument is ignored and only for compatability with
     `which-key-C-h-dispatch' so this command can be bound in
     `which-key-C-h-map', too."
         (interactive)
         (let* ((evs (cond ((which-key--current-prefix)
                            (which-key--current-key-list))
                           (t
                            (butlast (append (this-command-keys-vector) nil)))))
                (key  (and evs (apply #'vector evs))))
           (which-key-M-x+ key)))

       (setq prefix-help-command #'which-key-M-x-prefix+)

       :config
       (which-key-mode 1)

       ;; order of keys is case insensetive
       (setq which-key-sort-order 'which-key-key-order-alpha
             which-key-echo-keystrokes 0.02)

       (defun which-key-M-x+ (&optional key)
         "Completing read command and execute it.

     Only commands which are bound to keys are considered. If KEY is
     given it should be the prefix-key for which commands should be
     completed. Otherwise read command from top-level. "
         (interactive)
         (let ((cmd (which-key--completing-read-cmd+ key)))
           (when (commandp cmd)
             (which-key--execute-cmd+ cmd))))

       (defun which-key--completing-read-cmd+ (&optional prefix)
         "Completing read command for PREFIX.

     Read commands for PREFIX or top-level if PREFIX not given."
         (which-key--hide-popup-ignore-command)
         (let ((desc
                (completing-read
                 (if prefix
                     (format "Execute (%s): " (key-description prefix))
                   "Execute: ")
                 (mapcar #'which-key--completing-read-format+
                         (which-key--get-current-bindings prefix)))))
           (intern (car (split-string desc)))))

       (defun which-key--execute-cmd+ (cmd)
         "Execute command CMD as if invoked by key sequence."
         (setq prefix-arg current-prefix-arg)
         (setq this-command cmd)
         (setq real-this-command cmd)
         (command-execute cmd 'record))

       (defun which-key--completing-read-format+ (bnd)
         "Format binding BND for `completing-read'."
         (let* ((key (car bnd))
                (cmd (cdr bnd))
                (desc (format "%s (%s)" cmd
                              (propertize key 'face 'which-key-key-face))))
           (which-key--maybe-add-docstring
            (format "%-50s" desc) cmd)))

       :leader
       ("hk"    'which-key-show-top-level
        "h RET" 'which-key-M-x+))
   #+END_SRC

** with-editor
   package used by ~magit~ for controlling emacsclient.

   #+BEGIN_SRC emacs-lisp
     (use-package with-editor
       :config
       (add-hook 'vterm-mode-hook 'with-editor-export-editor)

       :lazy-leader
       (:mode 'with-editor-mode
        :minor t
        :prefix leader-major-mode-prefix
        ","  'with-editor-finish
        "q"  'with-editor-cancel))
    #+END_SRC

** winum
   number windows, to make jumping to them easier.

   #+BEGIN_SRC emacs-lisp
     (use-package winum
       :straight t
       :demand t
       :custom
       (winum-scope 'frame-local)

       :config
       (winum-mode)

       (with-eval-after-load 'which-key
         ;; reset 1st window number option to window by number
         (push (cons '("\\(.*\\) 1" . "winum-select-window-1")
                     '("\\1 1..9"   . "window-by-number"))
               which-key-replacement-alist)

         ;; hide numbers 2 through to nine
         (push (cons '(nil . "winum-select-window-[2-9]") t)
               which-key-replacement-alist)

         ;; abbreviate 0 value
         (push (cons '("\\(.*\\) 0" . "winum-select-window-by-number")
                     '("\\1 0"      . "window-by-prompt"))
               which-key-replacement-alist))

       :general
       (:keymaps 'emacs-window-map
        "1" 'winum-select-window-1
        "2" 'winum-select-window-2
        "3" 'winum-select-window-3
        "4" 'winum-select-window-4
        "5" 'winum-select-window-5
        "6" 'winum-select-window-6
        "7" 'winum-select-window-7
        "8" 'winum-select-window-8
        "9" 'winum-select-window-9
        "0" 'winum-select-window-by-number))
   #+END_SRC

** yasnippet
   Yet another snippets tool... but amazingly powerful. :-P. See the snippet [[https://joaotavora.github.io/yasnippet/snippet-development.html#org6796ab7][dev]] guide.

   #+BEGIN_SRC emacs-lisp
     ;; <<tangle-snippets()>>
   #+END_SRC

   #+NAME: tangle-snippets
   #+BEGIN_SRC emacs-lisp :tangle no :exports none
     (org-babel-tangle-file (etc! "snippets.org"))
   #+END_SRC

*** yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :straight t
        :defer  load-me-now-duration
        :diminish yas-minor-mode
        :leader
        ("isn" 'yas-new-snippet
         "fS" 'yas-visit-snippet-file)

        :custom
        (yas-triggers-in-field t)
        (yas-snippet-dirs (list (etc! "snippets/")))

        :config
        (yas-global-mode 1)

        (leader-set-keys-for-major-mode 'snippet-mode
          "m" 'yas-load-snippet-buffer-and-close
          "l" 'yas-load-snippet-buffer
          "t" 'yas-tryout-snippet)

        :general
        (:states 'insert
         [C-i] 'yas-expand
         "M-I" 'yas-expand)
        (:keymaps 'yas-keymap
         "<C-return>" 'yas-next-field
         "<C-M-return>" 'yas-prev-field
         ;; Prevent tab from expanding
         "TAB"   'yas-next-field
         "<tab>" 'yas-next-field))
    #+END_SRC

*** licenses
    :PROPERTIES:
    :header-args+: :tangle (lisp! "+yas-license.el")
    :END:

    Use yas to generate and insert license headers, this isn't an automatic process
    but it works well enough I'd say.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package +yas-license
        :commands (+insert-license
                   +project-license
                   +license-project-license
                   +license-comment-template)
        :leader
        ("ih" '+insert-license))
    #+END_SRC

    #+begin_src emacs-lisp
      (require 'yasnippet)
    #+end_src

    #+begin_src emacs-lisp
      (defconst +license-dir (etc! "licenses")
        "Directory in which to find license snippets.")

      (defvar +license-dont-be-evil nil
        "Append don't be evil clause to licenses.
      see [[https://en.wikipedia.org/wiki/Douglas_Crockford][Douglas Crockford]].")

      (defvar +license-last-inserted nil
        "The fully populated last inserted license template.")
    #+end_src

    Commands to list and interactively select a license file.

    #+begin_src emacs-lisp
      (defun +license-licenses (&optional dir)
        "return an alist of (basename . file) for all .license files in DIR.
      Where DIR defaults to the current working directory (`default-directory')."
        (cl-loop
         for file in (file-expand-wildcards
                      (concat (if dir
                                  (concat dir "/")
                                default-directory)
                              "*.license"))
         collect (cons (file-name-base file) file)))

      (defun +license-read-license (&optional prompt)
        (let ((licenses (+license-licenses +license-dir)))
          (when (zerop (length licenses))
            (error "No licenses found in dir: %s" default-directory))

          (if-let ((license (if (eq 1 (length licenses))
                                (car licenses)
                              (assoc (yas-completing-read
                                      (or prompt "License: ")
                                      licenses nil t)
                                     licenses))))
              (with-temp-buffer
                (insert-file-contents-literally (cdr license))
                (cons (car license)
                      (buffer-substring (point-min) (point-max))))
            (cons "" ""))))

      (defun +license-comment-template (template &optional prefix)
        (save-vars-with-temp-buffer!
            (comment-start comment-end comment-style
             comment-multi-line comment-add comment-continue)
          (insert template)
          (comment-region (point-min) (point-max) prefix)
          (buffer-substring (point-min) (point-max))))
    #+end_src

        Fetch the license for the current project, used for auto-insert snippets.

    #+begin_src emacs-lisp
      (defun +license-project-license ()
        (if-let* ((default-directory (project-current-root+))
                  (license (cl-find-if #'file-exists-p '("LICENSE"))))
            (with-temp-buffer
              (insert-file-contents-literally license)
              (buffer-substring (point-min) (point-max)))
          (cdr (+license-read-license "No project license found, pick one: "))))
    #+end_src

    Expand and insert a chosen license into the current buffer at point.

    #+BEGIN_SRC emacs-lisp
      (defun +insert-license (license)
        "Insert a license from the known license list.
      with PREFIX, repeats insertion of the last inserted license."
        (interactive
         (list (or (and current-prefix-arg
                        +license-last-inserted)
                   (+license-read-license))))
        (let ((comment-multi-line t))
          (yas-expand-snippet
           (+license-comment-template (cdr license))
           nil nil
           '((yas-indent-line 'fixed)))

          (setq +license-last-inserted license)))
    #+END_SRC

    #+begin_src emacs-lisp
      (provide 'yas-license)
    #+end_src

**** Types
     :PROPERTIES:
     :header-args+: :shebang :comments none
     :END:

     #+BEGIN_SRC snippet :tangle (etc! "licenses/GPL-2.0.license")
       Copyright (C) `(format-time-string "%Y")`  ${1:`(or user-full-name "name")`}

       This program is free software; you can redistribute it and/or
       modify it under the terms of the GNU General Public License
       as published by the Free Software Foundation; either version 2
       of the License, or (at your option) any later version.

       This program is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU General Public License for more details.

       You should have received a copy of the GNU General Public License
       along with this program; if not, write to the Free Software
       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle (etc! "licenses/GPL-3.0.license")
       Copyright (C) `(format-time-string "%Y")`  ${1:`(or user-full-name "name")`}

       This file is part of ${2:this program}.

       $2 is free software: you can redistribute it and/or modify
       it under the terms of the GNU General Public License as published by
       the Free Software Foundation, either version 3 of the License, or
       (at your option) any later version.

       $2 is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU General Public License for more details.

       You should have received a copy of the GNU General Public License
       along with $2.  If not, see <https://www.gnu.org/licenses/>.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle (etc! "licenses/Apache-2.0.license")
       Copyright `(format-time-string "%Y")` ${1:`(or user-full-name "name")`}

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle (etc! "licenses/Boost.license")
                Copyright ${1:`(or user-full-name "name")`} `(format-time-string "%Y")` - ${2:`(format-time-string "%Y")`}.
       Distributed under the Boost Software License, Version 1.0.
          (See accompanying file LICENSE_1_0.txt or copy at
                https://www.boost.org/LICENSE_1_0.txt)
     #+END_SRC

     #+BEGIN_SRC snippet :tangle (etc! "licenses/MIT.license")
       Copyright (c) `(format-time-string "%Y")` ${1:`(or user-full-name "name")`}

       Permission is hereby granted, free of charge, to any person obtaining a copy
       of this software and associated documentation files (the "Software"), to deal
       in the Software without restriction, including without limitation the rights
       to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       copies of the Software, and to permit persons to whom the Software is
       furnished to do so, subject to the following conditions:

       The above copyright notice and this permission notice shall be included in all
       copies or substantial portions of the Software.

       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
       SOFTWARE.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle (etc! "licenses/ISC.license")
       Copyright (c) `(format-time-string "%Y")` ${1:`(or user-full-name "name")`} ${2:`user-mail-address`}

       Permission to use, copy, modify, and distribute this software for any
       purpose with or without fee is hereby granted, provided that the above
       copyright notice and this permission notice appear in all copies.

       THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
       WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
       MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
       ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
       WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
       ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
       OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle (etc! "licenses/BSD.license")
       Copyright (c) `(format-time-string "%Y")` ${1:`(or user-full-name "name")`}

       Redistribution and use in source and binary forms, with or without
       modification, are permitted provided that the following conditions
       are met:
       1. Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
       2. Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.

       THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \`\`AS IS'' AND
       ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       SUCH DAMAGE.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle (etc! "licenses/BSD-3c.license")
       Copyright (c) `(format-time-string "%Y")` ${1:`(or user-full-name "name")`}

       Redistribution and use in source and binary forms, with or without
       modification, are permitted provided that the following conditions
       are met:
       1. Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
       2. Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
       3. Neither the name of the author nor the names of its contributors may
          be used to endorse or promote products derived from this software

       THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \`\`AS IS'' AND
       ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       SUCH DAMAGE.
     #+END_SRC

*** auto-yasnippet
    allows you to create dynamic/in-place snippets and repeatedly execute them.

    #+BEGIN_SRC emacs-lisp
      (use-package auto-yasnippet
        :straight t
        :leader
        ("is"  '(:ignore t :wk "auto-yasnippet")
         "isc" 'aya-create
         "ise" 'aya-expand
         "isw" 'aya-persist-snippet)

        :general
        (:states 'insert
         "M-i" 'aya-expand))
    #+END_SRC

*** aas
    Tracks what you enter into a buffer, and if it matches some pattern then it
    automatically expands a snippet.
    Latex snippets courtesy of [[https://github.com/tecosaur/LaTeX-auto-activating-snippets][laas]].

    #+BEGIN_SRC emacs-lisp
      (use-package aas
        :straight t)

      (use-package laas
        :straight t
        :hook ((org-mode . aas-activate-for-major-mode)
               (org-mode . laas-mode)
               (LaTeX-mode . laas-mode))
        :init
        (put 'aas-set-snippets 'lisp-indent-function 'defun)

        :config
        (aas-set-snippets 'laas-mode
          :cond #'laas-mathp
          "On"    "\\mathcal{O}(n)"
          "O1"    "\\mathcal{O}(1)"
          "Olog"  "\\mathcal{O}(\\log n)"
          "Olon"  "\\mathcal{O}(n \\log n)"
          "mod"   "\\mod"
          ;; "<<"    nil
          )
        )
    #+END_SRC

* Builtins
  Configurations for packages ditributed by emacs itself. Some of these I rarely use,
  so the configurations here just reconfigure file paths or other options to keep
  them from disrupting my experience.

** prettify-symbols
   lets you convert identifiers like lambda into unicode symbols like Œª... isn't that
   epic :).

   #+BEGIN_SRC emacs-lisp
     (use-package prog-mode
       :delight  (prettify-symbols-mode " Œª")
       :custom
       (lisp-prettify-symbols-alist nil)
       (prettify-symbols-unprettify-at-point 'right-edge
        "Don't need to keep symbolifying it whilst I'm on it."))
   #+END_SRC

*** configure-presym
    Utility macro to make [[*prettify-symbols][prettify-symbols]] mode easier to setup for individual modes.

    #+BEGIN_SRC emacs-lisp
      (defvar prettify-symbols-pretty-symbols-alist+ nil
        "alist of mode to pretty symbols ")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; inspired by: [[https://emacs.stackexchange.com/questions/34808/using-prettify-symbols-with-strings-instead-of-characters][this post]].
      (defun prettify-symbols-string+ (to)
        "get a prettify symbols entry to map a string to a string."
        (let ((length (length to)))
          (cl-loop for i from 0 to length
                   for char in (string-to-list to)
                   unless (eq i (- length 1))
                   do (setq char (list char '(Br . Bl)))
                   else
                   do (setq char (list char))
                   end
                   append char)))

      (defun configure-presym--prepare-args (args)
        "convert ARGS to partitioned 2 length cons cells.
      ARGS should simply be a flat sequence of string to pretty-symbol.

      The pretty-symbol part can be a given as a string, to automatically
      pass through `prettify-symbols-string+'.
      "
        (cl-loop for (src dest) in (-partition 2 args)
                 collect (cons src
                               (if (stringp dest)
                                   (prettify-symbols-string+ dest)
                                 dest))))

      ;; TODO add duplicate remove check.
      (defmacro configure-presym! (modes &rest args)
        "Configure prettify-symbols for modes MODES.
      This function adds/modifies an entry for mode in the
      `prettify-symbols-pretty-symbols-alist+' alist and binds a hook in MODES
      mode-hook to enable `prettify-symbols-mode'.

      MODES can be given as a quoted list, or a single quoted mode name or a
      variable pointing to either of these types (and discoverable at macro
      expansion time).

      ARGS should be a form acceptable by `configure-presym--prepare-args'.

      eg.

      > (configure-presym! 'org-mode \"lambda\" ?Œª)
      "
        (plist-bind! (args :remove-duplicates)
          (setq modes (eval modes))

          (when modes
            (unless (listp modes)
              (setq modes `(,modes))))

          (let (res ; aggregate forms into here
                (tuples (configure-presym--prepare-args args)))
            (dolist (mode modes)
              (let ((mode-name (symbol-name mode)))
                (push
                 `(let ((config (assoc (quote ,mode) prettify-symbols-pretty-symbols-alist+)))
                    (if config
                        ; add to existing config, while preventing cyclic loops
                        (nconc-safe! (car (cdr config)) tuples)
                      (push (cons (quote ,mode) (list tuples))
                            prettify-symbols-pretty-symbols-alist+)

                      (add-hook (quote ,(intern (concat mode-name "-hook")))
                                (defun ,(intern (concat "configure-presym-" mode-name)) (&rest _)
                                  ,(concat "sets up pretty symbols for " mode-name)
                                  (let ((config (assoc (quote ,mode)
                                                       prettify-symbols-pretty-symbols-alist+)))
                                    (when (and config
                                               (setq config (car (cdr config))))
                                      (setq prettify-symbols-alist
                                            (append prettify-symbols-alist
                                                    (copy-sequence config)))

                                      (prettify-symbols-mode +1)))))))
                 res)))
            `(let ((tuples (quote ,tuples))) ,@res))))
      (put 'configure-presym! 'lisp-indent-function 'defun)
    #+END_SRC

** auto-fill-mode
   #+BEGIN_SRC emacs-lisp
     (use-package simple
       :commands set-word-wrap-column
       :leader
       ("ta" 'set-word-wrap-column)

       :config
       (defun set-word-wrap-column (&optional arg)
         "Set the maximum wanted length for a line in this buffer.
     This function enables `auto-fill-mode' in this buffer and sets
     the fill column value.

     If `auto-fill-mode' is already active and this function is called
     with no ARG, then a new `fill-column' value is interactively read.
     This also happens if a non numeric ARG is passed.

     If ARG is a number, `fill-column' is set to the value of that number.

     However, if the final value of ARG resolves to be non-positive,
     `auto-fill-mode' will be disabled.
     "
         (interactive "P")
         (let ((active (bound-and-true-p auto-fill-function)))
           (setq arg
                 (cond
                  ((numberp arg)
                   arg)
                  ((or (consp arg)
                       active)
                   ;; why would you pass a prefix to make this ask you for a number
                   ;; instead of just passing the number, dummy?
                   (read-number "fill-column: " fill-column))
                  (t fill-column)))

           (if (<= arg 0)
               (auto-fill-mode -1)
             (or active
                 (auto-fill-mode +1))
             (setq fill-column arg)))))
   #+END_SRC

** auto-insert
   Automatically insert some text into newly made files and buffers.
   Can use skeletons, see [[info:autotype#Skeleton Language][Skeleton Language]].

   #+BEGIN_SRC emacs-lisp
     (use-package autoinsert
       :leader ("ia" 'auto-insert)
       :custom
       (auto-insert-directory (etc! "auto-insert"))
       (auto-insert-query nil)

       :init
       ;; Adapted from [[https://gist.github.com/jrnold/675584][here]].
       (defmacro autoinsert-register-yas+ (regex mode uuid)
         `(with-eval-after-load 'autoinsert
            (define-auto-insert ,regex
              (lambda () (autoinsert-expand-yas+ ,mode ,uuid)))))

       :config
       (require 'yasnippet)

       (defun autoinsert-expand-yas+ (mode uuid)
         (if-let ((snippet (yas--get-template-by-uuid mode uuid)))
             (yas-expand-snippet (yas--template-content snippet))
           (user-error "Failed to find snippet %s/%s" mode uuid)))

       :hook (nxml-mode . auto-insert)
       :config
       (define-auto-insert 'nxml-mode #'nxml-insert-xml-declaration))
   #+END_SRC

** auto-revert-mode
   #+BEGIN_SRC emacs-lisp
     (use-package autorevert
       :straight (autorevert :type built-in)
       :diminish auto-revert-mode)
   #+END_SRC

** bookmarks
   #+BEGIN_SRC emacs-lisp
     (use-package bookmark
       :custom
       (bookmark-default-file (etc! "bookmarks.el"))

       :config
       ;; prioritise recently used bookmarks over just the default list.
       (defadvice bookmark-jump (after bookmark-jump activate)
         (let ((latest (bookmark-get-bookmark bookmark)))
           (setq bookmark-alist (delq latest bookmark-alist))
           (push latest bookmark-alist))))
   #+END_SRC

** buffer-menu
   The default buffer menu provided by emacs.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! buffer-menu)
     (use-package buff-menu
       :lazy-leader
       (:mode 'Buffer-menu-mode
        "1" 'Buffer-menu-1-window
        "2" 'Buffer-menu-2-window
        "f" 'Buffer-menu-toggle-files-only
        "/" 'Buffer-menu-isearch-buffers-regexp
        "o" 'Buffer-menu-multi-occur
        "T" 'Buffer-menu-visit-tags-table)

       :general
       (:keymaps 'Buffer-menu-mode-map
        "0" nil "1" nil "2" nil "<" nil ">" nil "?" nil "C-d" nil "C-k" nil
        "S-SPC" nil "SPC" nil "<backtab>" nil "TAB" nil "T" nil "b" nil "e" nil
        "f" nil "g" nil "h" nil "n" nil "p" nil "t" nil "v" nil "SPC" nil)
       (:keymaps 'Buffer-menu-mode-map
        "C-SPC" 'Buffer-menu-mark
        "S-DEL" 'Buffer-menu-bury
        "r"   'Buffer-menu-toggle-read-only
        "C-j" 'Buffer-menu-this-window
        "gr"  'revert-buffer
        "gf" 'Buffer-menu-toggle-files-only
        "C-l" 'tabulated-list-next-column
        "C-M-<return>" 'Buffer-menu-select))
   #+END_SRC

** calc
   #+BEGIN_SRC emacs-lisp
     (use-package calc
       :after evil
       :custom
       (calc-symbolic-mode t)

       :init
       (advice-add 'evil-get-register :before-until
                   (defun evil-register-*-is-calc (register &optional _)
                     "Make evils * register paste from head of calculator stack."
                     (when (eq register ?*)
                       (condition-case err
                           (with-temp-buffer
                             (calc-copy-to-buffer nil)
                             (buffer-substring (point-min) (point-max)))
                         (error (unless err (signal (car err) (cdr err)))
                                "")))))

       :config
       (evil-set-initial-state 'calc-mode 'motion)

       (evil-define-motion evil-calc-next-line (count)
         (interactive "<c>")
         (evil-next-line count)

         (when (eobp)
           (calc-realign)

           (when (evil-visual-state-p)
             (forward-line -1)))

         (goto-char (+ 4 (line-beginning-position))))

       (evil-define-motion evil-calc-prev-line (count)
         (interactive "<c>")
         (evil-previous-line count)

         (when (eq (point-min) (line-beginning-position))
           (calc-goto-point-min))

         (goto-char (+ 4 (line-beginning-position))))

       (defun calc-goto-point-min ()
         (interactive)
         (goto-char (point-min))
         (forward-line)
         (forward-char 4)
         (recenter))

       (advice-add 'calc-scroll-down :around
                   (defun calc-scroll-down--make-goto-point-min (func &rest args)
                     "For some reason, scrolling before `point-min' doesn't change point."
                     (let ((current-point (point)))
                       (apply func args)

                       (when (eq (point) current-point)
                         (calc-goto-point-min)))))

       (defun evil-calc-visual-state ()
         (interactive)
         (when (string-match-p (rx bol (zero-or-more whitespace)
                                   "." eol)
                               (buffer-substring
                                (line-beginning-position)
                                (line-end-position)))
           (funcall-interactively 'evil-calc-prev-line 1))
         (evil-visual-line))

       :preface
       (defvar evil-calc-support-macro+ nil
         "When true `calc-mode' uses q for macros instead of quit.")

       :config
       (evil-define-command evil-calc-call-kbd-macro (count macro)
         (interactive
          (let (count macro register)
            (setq count (prefix-numeric-value current-prefix-arg)
                  register (or evil-this-register (read-char)))
            (cond
             ((eq register ?@)
              (unless evil-last-register
                (user-error "No previously executed keyboard macro."))
              (setq macro (evil-get-register evil-last-register t)))
             (t
              (setq macro (evil-get-register register t)
                    evil-last-register register)))
            (list count macro)))

         (evil-with-single-undo
           (let ((last-kbd-macro macro))
             (calc-call-last-kbd-macro (or count 1)))))

       :lazy-leader
       (:mode 'calc-mode
        ;; TODO complete leader binding list :P.
        "," 'calc-comma)

       :general
       (:keymaps 'calc-mode-map
        "<override-state>" 'motion
        [remap quit-window] 'calc-quit)
       (:keymaps 'calc-mode-map
        "SPC" nil                                                               ; causes recursion-overflow
        "C-w" nil                                                               ; calc-kill-region
        "U"   nil                                                               ; calc-undo
        "D"   nil                                                               ; calc-redo
        "Y"   nil                                                               ; empty prefix :P
        "@"   nil                                                               ; calcDigit-start
        "h"   nil                                                               ; calc-help-prefix
        "i"   nil                                                               ; calc-info

        ;; copies head of stack to point in buffer.
        "y"   nil                                                               ; calc-copy-to-buffer
        "C-d" nil                                                               ; calc-pop
        )
       (:states '(motion visual)
        :keymaps 'calc-mode-map

        "C-w" emacs-window-map
        "M-u" 'smart-universal-argument

        "g"   nil
        "gg"  'calc-goto-point-min ;; was calc-graph-grid
        "gq"  'quit-window
        "gQ"  'calc-graph-quit

        "j" 'evil-calc-next-line
        "k" 'evil-calc-prev-line)
       (:states 'visual
        :keymaps 'calc-mode-map
        "x" 'calc-kill-region
        "d" 'calc-kill-region
        "y" 'calc-copy-region-as-kill)
       (:states 'motion
        :keymaps 'calc-mode-map
        "q"   'evil-record-macro
        "@"   'evil-calc-call-kbd-macro
        "y"   'calc-copy-as-kill
        "v"   'evil-calc-visual-state
        "u"   'calc-undo
        "G"   'calc-realign
        "C-r" 'calc-redo
        "C-t" 'calc-transpose-lines

        [remap evil-scroll-up]   'calc-scroll-down
        [remap evil-scroll-down] 'calc-scroll-up

        [remap quit-window] 'calc-quit

        ;; [C-m] (general-simulate-key "v" :state 'emacs)
        "f"   (general-simulate-key "u" :state 'emacs)
        "C-v" (general-simulate-key "j" :state 'emacs)
        "C-n" (general-simulate-key "k" :state 'emacs)))
   #+END_SRC

** calendar
   #+BEGIN_SRC emacs-lisp
     (use-package calendar
       :custom
       (diary-file (share! "diary"))

       :init
       (push 'calendar-mode +whitespace-exempt-modes)

       :general
       (:states  'motion
        :keymaps 'calendar-mode-map
        ;; see also [[https://github.com/emacs-evil/evil-collection/blob/master/evil-collection-calendar.el][evil-collection]].
        ;; globally useful
        [remap quit-window] 'calendar-exit
        "p"  'calendar-print-day-of-year
        "c"  'calendar-count-days-region
        "?"  'calendar-goto-info-node
        "gr" 'calendar-redraw

        ;; jumpt to date
        "."  'calendar-goto-today
        "h"  'calendar-backward-day
        "j"  'calendar-forward-week
        "k"  'calendar-backward-week
        "l"  'calendar-forward-day
        "0"  'calendar-beginning-of-week
        "$"  'calendar-end-of-week
        "[[" 'calendar-backward-year
        "]]" 'calendar-forward-year
        "("  'calendar-beginning-of-month
        ")"  'calendar-end-of-month
        "{"  'calendar-backward-month
        "}"  'calendar-forward-month
        "/"  'calendar-goto-date

        "C-h" 'calendar-backward-month
        "C-l" 'calendar-forward-month
        "C-j" 'calendar-scroll-left-three-months
        "C-k" 'calendar-scroll-right-three-months

        ;; marking and unmarking
        "X"  'calendar-unmark
        "v"  'calendar-set-mark
        "x"  'calendar-mark-holidays

        ;; diary interaction
        "D"  'diary-view-other-diary-entries
        "d"  'diary-view-entries
        "m"  'diary-mark-entries
        "s"  'diary-show-all-entries))
   #+END_SRC

** change-log-mode
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package add-log
       :config
       (push 'change-log-mode +whitespace-exempt-modes)
       (evil-set-initial-state 'change-log-mode 'motion)

       :lazy-leader
       (:mode 'change-log-mode
        "SPC" 'change-log-goto-source
        "f" 'change-log-find-file
        "j" 'add-log-edit-next-comment
        "K" 'add-log-edit-prev-comment)

       :general
       (:states 'motion
        :keymaps 'change-log-mode-map
        "o" 'change-log-goto-source
        "C-j" 'add-log-edit-next-comment
        "C-K" 'add-log-edit-prev-comment))
   #+END_SRC

** compile
    Setup some custom bindings and assign a post compilation hook which will
    automatically kill the compilation window.

    #+BEGIN_SRC emacs-lisp
      (use-package compile
        :straight t
        :hook (next-error . recenter)
        :commands (display-compilation-buffer
                   +set-compilation-bindings)
        :custom
        (compilation-skip-threshold 0)
        (next-error-verbose nil)
        (compilation-ask-about-save nil)
        (compilation-message-face 'default)
        (next-error-message-highlight nil)
        (compilation-always-kill t)
        (compilation-read-command nil)
        (compilation-scroll-output 'first-error)

        :config
        (evil-set-command-property 'next-error :jump t)
        (evil-set-command-property 'previous-error :jump t)

        (push 'compilation-mode +whitespace-exempt-modes)

        (defun kill-compilation-windows+ ()
          (interactive)
          (when-let ((buf (next-error-find-buffer)))
            (delete-windows-on buf)))

        (defun compilation-colorize+ ()
          "Colorize from `compilation-filter-start' to `point'.
      Taken from [[https://emacs.stackexchange.com/a/38531][here]]."
          (require 'ansi-color)
          (let ((inhibit-read-only t))
            (ansi-color-apply-on-region
             compilation-filter-start (point))))
        (add-hook 'compilation-filter-hook #'compilation-colorize+)

        (defun display-compilation-buffer ()
          (interactive)
          (if-let ((buffer (next-error-find-buffer)))
              (select-window
               (display-buffer buffer
                               '(nil
                                 (reusable-frames . nil))))
            (user-error "Could not determine compilation-buffer.")))

        (defun +set-compilation-bindings (mode map)
          (leader-set-keys-for-major-mode mode
            "x" 'kill-compilation
            "f" 'next-error-follow-minor-mode)

          (general-define-key
            :keymaps map
            "S-SPC" nil "SPC" nil "DEL" nil "M-p" nil "M-n" nil "M-{" nil "M-}" nil
            "0" nil "h" nil "g" nil "?" nil "n" nil "p" nil "<override-state>" nil)

          (general-define-key
           :keymaps map
           [remap revert-buffer] 'recompile)

          (general-define-key
            :keymaps map
            :states  'motion
            "x"   'kill-compilation

            "RET" 'compile-goto-error
            ;; Flash error location in another-window without selecting it.
            "o"     'compilation-display-error
            "M-RET" 'compilation-display-error
            ;; Move to the next error in compilation buffer.
            "gj"    'compilation-next-error
            "gk"    'compilation-previous-error
            ;; Flash next-error location and move to it.
            "gn"    'next-error-no-select
            "gp"    'previous-error-no-select

            "C-j"     'compilation-next-file
            "C-k"     'compilation-previous-file
            "C-c C-n" 'compilation-next-file
            "C-c C-p" 'compilation-previous-file))

        (+set-compilation-bindings 'compilation-mode 'compilation-mode-map)

        :leader
        ("cv" 'kill-compilation-windows+)

        :general
        (:states  'motion
         :keymaps 'compilation-mode-map
         "j" nil "k" nil)
        (:keymaps 'emacs-lisp-compilation-mode-map
         [remap revert-buffer] 'emacs-lisp-compilation-recompile))
    #+END_SRC

*** compilation-auto-kill
    #+BEGIN_SRC emacs-lisp
      (defvar compilation-auto-kill-window+ 2
        "If non-nil, after a successfull compilation the compilation
      window, if open, will automatically be deleted.

      If set to a numerical value, window will be deleted after that many
      seconds.")

      (defvar compilation-auto-kill-ignore-modes+ nil
        "Major modes spawned by `compile' for which auto-kill doesn't take place.")

      (defvar compilation-dont-auto-kill-window-when+ '(warnings focus)
        "Specify not to kill the window when warning, error or info given.
      a list which can take in any symbol from (errors infos warnings).

      you can also specify a symbol, focus, to cancel window killing when
      the compilation window was already open when the compilation was
      started.")

      (defvar-local compilation-was-open-p+ nil
        "True whether the compilation window was visible when compilation began.")

      (advice-add 'compilation-start :around
                  (defun compilation-check-window-was-open+ (func _command &optional mode name-function _highlight-regexp)
                    ;; name-of-mode and buf-name sourced from compile.el
                    (let* ((mode (or mode 'compilation-mode))
                           (name-of-mode (if (eq mode t)
                                             "compilation"
                                           (replace-regexp-in-string "-mode\\'" "" (symbol-name mode))))
                           (buf-name (compilation-buffer-name name-of-mode mode name-function))
                           (compilation-was-visible (when (get-buffer-window buf-name t) t)))
                      ;; Start compilation and then assign `compilation-was-open-p+'.
                      (with-current-buffer (funcall func _command mode name-function _highlight-regexp)
                        (setq-local compilation-was-open-p+ compilation-was-visible)))))

      (defun compilation-safely-close-window+ (buffer)
        (when (and buffer
                   (not (get-buffer-process buffer)))
          ;; don't skip if new compilation began before window
          ;; from previous compilation has been killed.
          (quit-windows-on buffer)))

      (defun compilation-cancel-auto-kill-p+ ()
        "whether to cancel compilation window auto-kill due to `compilation-dont-auto-kill-window-when+'."
        (cl-loop for (name . var) in '((errors   . compilation-num-errors-found)
                                       (warnings . compilation-num-warnings-found)
                                       (infos    . compilation-num-infos-found))
                 when (and (member name compilation-dont-auto-kill-window-when+)
                           (not (zerop (eval var))))
                   collect (symbol-name name)))

      (defun compilation-finish-function+ (buf str)
        "hook to automatically hide compilation output."
        (when (and compilation-auto-kill-window+
                   (or (not (member 'focus compilation-dont-auto-kill-window-when+))
                       (with-current-buffer buf
                         (not compilation-was-open-p+)))
                   ;; An abnormal exit automatically cancels window kill.
                   (not (string-match-p (rx (zero-or-more any)
                                            "exited abnormally"
                                            (zero-or-more any))
                                        str))
                   (not (apply 'derived-mode-p compilation-auto-kill-ignore-modes+)))
          (let ((terminate-window t))
            (when-let ((notifications (compilation-cancel-auto-kill-p+)))
              (when debug-on-error
                (message "Window kill suspended due to encountering: %s"
                         (combine-and-quote-strings notifications)))
              (setq terminate-window nil))

            (when terminate-window
              (if (numberp compilation-auto-kill-window+) ;; kill after delay
                  (run-at-time (concat (number-to-string compilation-auto-kill-window+)
                                       " sec")
                               nil 'compilation-safely-close-window+ buf)
                (compilation-safely-close-window+ buf))))))

      (with-eval-after-load 'compile
        (add-hook 'compilation-finish-functions 'compilation-finish-function+)
        (add-hook 'compilation-finish-functions
                  (defun compilation-exit-comint+ (&rest _)
                    (when (eq major-mode 'comint-mode)
                      (compilation-mode)))))
    #+END_SRC

** comint
   Mode to emulate a terminal, doesn't support much real terminal functionality but
   it's good enough for basic executions.

   #+BEGIN_SRC emacs-lisp
     (use-package comint
       :straight (comint :type built-in)
       :hook ((comint-mode . (lambda ()
                               (setq-local evil-emacs-state-cursor 'bar))))
       :config
       (push 'comint-mode +whitespace-exempt-modes)
       (evil-set-initial-state 'comint-mode 'emacs)

       (setq comint-mode-map (make-sparse-keymap) ;; reset all
             comint-prompt-read-only t))
    #+END_SRC

    I've moved comint commands and binding declarations into a separate file, because
    some packages override comint maps so you'll need to assign the same bindings for
    multiple modes and it's easier when their contained in a function.

    #+BEGIN_SRC emacs-lisp
      (use-package +comint-bindings
        :commands (+comint-set-bindings
                   +comint-set-leader-keys)
        :after comint
        :init
        (+comint-set-bindings 'comint-mode-map)
        (+comint-set-leader-keys 'comint-mode))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle (lisp! "+comint-bindings.el")
      (defun comint-bol-point (&optional arg)
        (save-excursion
          (comint-bol arg)
          (point)))

      (defun comint-backward-delete-char (&optional arg)
        "delete upto ARG characters backward, ignoring the prompt."
        (interactive "p")
        (or arg (setq arg 1))

        (if (<= (comint-bol-point)
                (- (point) arg 1))
            (backward-delete-char arg)
          (delete-region (point) (comint-bol-point))))

      (defmacro comint-clamp-point-to-bol (&rest body)
        "ensures any operation done by body doesn't move point
      to before the command interpreter prompt."
        `(let ((bol (comint-bol-point)))
           ,@body ;; run body operations

           (when (< (point) bol)
             (goto-char bol))))

      (defun comint-backward-char (&optional N)
        (interactive "P")
        (comint-clamp-point-to-bol (backward-char N)))

      (defun comint-backward-word (&optional N)
        (interactive "P")
        (comint-clamp-point-to-bol (backward-word N)))

      (defun comint-on-prompt-line-p ()
        (interactive)
        (save-excursion
          (let ((current-line (what-line)))
            (goto-char (comint-bol-point))
            (string-equal (what-line) current-line))))

      ;; TODO support prefix arg
      (defun comint-previous-input-or-previous-line ()
        (interactive)
        (if (comint-on-prompt-line-p)
            (call-interactively 'comint-previous-input)
          (comint-clamp-point-to-bol
           (forward-line -1))))

      (defun comint-next-input-or-next-line ()
        (interactive)
        (if (eobp)
            (call-interactively 'comint-next-input)
          (forward-line)))

      ;; TODO ensure history shifts maintain correct cursor position
      ;; (advice-add 'comint-previous-input :after 'comint-bol)
      ;; (advice-add 'comint-next-input     :after 'end-of-buffer)

      (defun +comint-set-bindings (keymap)
        ;; abstracted into a method because realgud seems
        ;; to hide all of these bindings.
        (general-define-key
         :keymaps keymap
         "RET" 'comint-send-input
         "M-RET" 'comint-accumulate

         "DEL" 'comint-backward-delete-char
         "<backspace>" 'comint-backward-delete-char

         "<C-backspace>" 'evil-backward-delete-word

         "M-DEL" 'comint-kill-input
         "<M-backspace>" 'comint-kill-input

         "<mouse-2>" 'comint-insert-input

         "C-w" emacs-window-map
         "M-w" 'backward-kill-word
         "M-l" 'recenter-top-bottom
         ;; "C-M-l" 'comint-show-output

         "C-a" 'comint-bol-or-process-mark
         "C-e" 'end-of-buffer       ;; 'end-of-line
         "C-s" 'comint-history-isearch-backward-regexp
         "M-s" 'comint-dynamic-list-input-ring ;; TODO use ivy
         "C-r" 'evil-paste-from-register
         "C-v" 'quoted-insert
         "C-u" 'scroll-down
         "C-d" 'scroll-up
         "C-o" 'evil-execute-in-normal-state

         "C-<left>"  'backward-word
         "C-<up>"    'comint-previous-input
         "C-<down>"  'comint-next-input
         "C-<right>" 'forward-word

         "<left>"    'backward-char
         "<up>"      'comint-previous-input-or-previous-line
         "<down>"    'comint-next-input-or-next-line
         "<right>"   'forward-char

         "C-h"       'backward-char
         "C-j"       'comint-next-input-or-next-line
         "C-k"       'comint-previous-input-or-previous-line
         "C-l"       'forward-char

         "M-j"       'comint-next-matching-input-from-input
         "M-k"       'comint-previous-matching-input-from-input

         "C-f"       'forward-word
         "C-b"       'comint-backward-word

         "M-u" 'comint-next-prompt
         "M-d" 'comint-previous-input

         ;; "<remap> <forward-char>"  'comint-forward-char
         "<remap> <backward-char>" 'comint-backward-char
         ;; "<remap> <forward-word>"  'comint-forward-word
         "<remap> <backward-word>" 'comint-backward-word

         "C-c C-c" 'comint-interrupt-subjob
         "C-c C-x" 'comint-get-next-from-history
         ))

      (defun +comint-set-leader-keys (mode)
        (leader-set-keys-for-major-mode mode
          "z" 'comint-send-eof
          "*" 'comint-insert-previous-argument
          "r" 'comint-dynamic-list-input-ring
          "m" 'comint-clear-buffer
          "M" 'comint-show-maximum-output
          "x" 'comint-get-next-from-history
          "RET" 'comint-copy-old-input ;; copy text before cursor
          ">" 'comint-write-output
          "t" 'comint-show-output
          "o" 'comint-delete-output

          "s" '(:ignore t :wk "subjob")
          "ss" 'comint-stop-subjob
          "sq" 'comint-quit-subjob
          "si" 'comint-interrupt-subjob))

      (provide '+comint-bindings)
    #+END_SRC

** custom
   Mode definition for the customise interface.

   #+BEGIN_SRC emacs-lisp
     (use-package cus-edit
       :config
       (push 'Custom-mode +whitespace-exempt-modes)
       (push 'customize-mode +whitespace-exempt-modes)

       (evil-set-initial-state 'Custom-mode 'normal)

       :lazy-leader
       (:mode '(Custom-mode
                notmuch-hello-mode)
        "SPC" 'customize-apropos
        "g" 'customize-group
        "f" 'customize-face
        "h" 'Custom-goto-parent
        "j" 'widget-forward
        "k" 'widget-backward
        "l" 'widget-forward)

       :general
       (:states  'motion
        :keymaps 'custom-mode-map

        ;; motion
        "TAB"       'widget-forward
        "S-TAB"     'widget-backward
        "<backtab>" 'widget-backward

        "RET" 'Custom-newline

        "]]" 'widget-forward
        "[[" 'widget-backward

        "gh" 'Custom-goto-parent
        "gl" 'widget-forward

        "gj" 'widget-forward
        "gk" 'widget-backward

        ;; quit
        [remap quit-window] 'Custom-buffer-done)
       (:keymaps 'widget-field-keymap
        "<override-state>" 'insert))
   #+END_SRC

** abbrev
   :PROPERTIES:
   :header-args+: :tangle (package-yes! abbrev)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package abbrev
       :hook ((org-mode
               git-commit-mode
               lisp-interaction-mode
               TeX-mode LaTeX-mode
               go-mode
               csharp-mode
               js-mode js2-mode js-jsx-mode typescript-react-mode typescript-mode
               c-mode c++-mode)
               . abbrev-mode)
       :custom
       (abbrev-file-name (etc! "abbrev.el"))
       (save-abbrevs 'silently)
       (evil-want-abbrev-expand-on-insert-exit nil)

       ;; TODO: edit-abbrevs-mode

       :config
       (quietly-read-abbrev-file)

       :config
       ;; Define abbrev table inheritance.
       (define-abbrev-table 'lisp-interaction-mode-abbrev-table '())
       (define-abbrev-table 'git-commit-mode-abbrev-table '())

       (let ((text-parents (list text-mode-abbrev-table)))
         (dolist (it (list lisp-interaction-mode-abbrev-table
                           git-commit-mode-abbrev-table))
           (abbrev-table-put it :parents text-parents))

         (with-eval-after-load 'tex-mode
           (abbrev-table-put tex-mode-abbrev-table :parents text-parents))

         (with-eval-after-load 'auctex
           (abbrev-table-put latex-mode-abbrev-table :parents text-parents)))

       (with-eval-after-load 'cc-mode
         (abbrev-table-put c++-mode-abbrev-table :parents (list c-mode-abbrev-table)))

       (with-eval-after-load 'js2-mode
         (abbrev-table-put js2-mode-abbrev-table :parents (list js-mode-abbrev-table)))
       (with-eval-after-load 'typescript-mode
         (abbrev-table-put typescript-mode-abbrev-table :parents (list js-mode-abbrev-table)))

       :config
       (push `(git-commit-mode . ,git-commit-mode-abbrev-table) abbrev-minor-mode-table-alist)

       :leader
       (:prefix "ip"
        "" '(:ignore t :wk "abbrev")
        "r" 'read-abbrev-file
        "w" 'write-abbrev-file
        "e" 'edit-abbrevs
        "a" 'add-mode-abbrev
        "g" 'add-global-abbrev
        "l" 'list-abbrevs)
       ;; :general
       ;; (:prefix "C-x"
       ;;  [C-i] 'dabbrev-expand)
       )
   #+END_SRC

** debugger
   #+BEGIN_SRC emacs-lisp
     (use-package debug
       :config
       (evil-set-initial-state 'debugger-mode 'motion)

       :leader
       ("kd" 'debug-on-entry
        "kx" 'cancel-debug-on-entry)

       :general
       (:keymaps 'debugger-mode-map
        [remap quit-window] 'debugger-quit)
       (:keymaps 'debugger-mode-map
        :states 'motion
        "TAB" 'forward-button
        "RET" 'backtrace-help-follow-symbol
        "+" 'backtrace-multi-line
        "-" 'backtrace-single-line
        "=" 'debugger-return-value                                                   ; exit current stack frame with inputted value
        "d" 'debugger-frame                                                          ; drop a breakpoint at the frame at point
        "x" 'debugger-frame-clear                                                    ; clear a break point at the frame at point
        "c" 'debugger-continue
        "s" 'debugger-step-through
        [remap evil-next-visual-line]     'backtrace-forward-frame
        [remap evil-previous-visual-line] 'backtrace-backward-frame)

       :lazy-leader
       (:mode 'debugger-mode
        "e" 'debugger-eval-expression
        "r" 'debugger-record-expression
        "j" 'debugger-jump                                                           ; jump down to current stack frame, skipping any upcoming debug-on-entry calls
        "b" 'debugger-frame                                                          ; drop a breakpoint at the frame at point
        "a" 'debugger-list-functions                                                 ; NOTE: not all that useful interactively
        "g" 'backtrace-help-follow-symbol ;; 'backtrace-goto-source
        ;; toggles
        "c" 'backtrace-toggle-print-circle
        "." 'backtrace-expand-ellipses
        "s" 'backtrace-toggle-print-gensym
        "l" 'backtrace-toggle-locals))
   #+END_SRC

** desktop
   #+BEGIN_SRC emacs-lisp
     (use-package desktop
       :custom
       (desktop-path (list (state! "desktop/"))))
   #+END_SRC

** diff
   Mode for showing diff/patch files.

   #+BEGIN_SRC emacs-lisp
     (use-package diff-mode
       :commands (diff-mode diff-buffer-with-file)
       :custom
       (diff-advance-after-apply-hunk nil)

       :config
       (push 'diff-mode +whitespace-exempt-modes)

       (defun diff-kill-applied-hunks--ensure-all-hunks-killed (func &rest args)
         "`diff-kill-applied-hunks' doesn't kill any applied hunks above point :("
         (save-excursion
           (goto-char (point-min))
           (apply func args)))

       (advice-add 'diff-kill-applied-hunks :around #'diff-kill-applied-hunks--ensure-all-hunks-killed)

       (advice-add #'diff-apply-hunk :around #'display-buffer-no-select-window-advice)
       (advice-add #'diff-test-hunk :around #'display-buffer-no-select-window-advice)

       :leader
       (:prefix leader-diff-leader-prefix
        "" '(:ignore t :wk "diff")
        "SPC" 'diff-buffer-with-file)

       :lazy-leader
       (:mode 'diff-mode
        "a" 'diff-apply-hunk
        "r" 'diff-refine-hunk
        "c" 'diff-kill-applied-hunks ;; clean displayed hunks only works on hunks below point.
        "k" 'diff-file-kill
        "f" 'next-error-follow-minor-mode
        "n" 'diff-restrict-view ;; narrow to hunk (or file with prefix)
        "s" 'diff-reverse-direction ;; doesn't do anything?
        "t" 'diff-test-hunk
        "e" 'diff-ediff-patch
        "u" 'diff-unified->context
        "d" 'diff-context->unified
        "l" 'diff-add-change-log-entries-other-window
        "g" 'diff-goto-source)

       :general
       (:states  'motion
        :keymaps 'diff-mode-map
        "a" 'diff-apply-hunk ;; apply diff hunk to prompted file
        ;; NOTE prompts for file onto which diff is being applied
        "x" 'diff-hunk-kill
        "X" 'diff-file-kill
        "u" 'diff-undo
        "q" nil
        "s" 'diff-split-hunk
        "i" 'diff-ignore-whitespace-hunk

        "o" 'diff-goto-source
        "RET" 'diff-goto-source

        "gh" 'diff-hunk-next
        "gj" 'diff-hunk-next
        "gk" 'diff-hunk-prev
        "gl" 'diff-hunk-prev
        "TAB"   'diff-file-next
        "S-TAB" 'diff-file-prev))
   #+END_SRC

** fringe
   #+BEGIN_SRC emacs-lisp
     ;; Bitmap source from [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bcheckers/syntax-checking/packages.el][spacemacs]].
     (define-fringe-bitmap '+dot-fringe-bitmap
       (vector #b00000000
               #b00000000
               #b00000000
               #b00000000
               #b00000000
               #b00000000
               #b00000000
               #b00011100
               #b00111110
               #b00111110
               #b00111110
               #b00011100
               #b00000000
               #b00000000
               #b00000000
               #b00000000
               #b00000000))
   #+END_SRC

** dired
   The built in (file-manager like) program for emacs. Think ls, but interactive and
   100 times better.

*** dired-mode
    #+BEGIN_SRC emacs-lisp
      (use-package dired
        :straight (dired :type built-in)
        :custom
        (ls-lisp-dirs-first t)
        (dired-listing-switches "-laXhv --group-directories-first")
        (dired-auto-revert-buffer t)
        (dired-hide-details-hide-symlink-targets nil)
        (dired-recursive-copies t)

        :config
        (push '(dired-mode . 1) +indent-config)
        (push 'dired-mode +whitespace-exempt-modes)

        :init
        (with-eval-after-load 'ls-lisp
          (setq ls-lisp-use-insert-directory-program (executable-find "ls")))

        :commands (dired-goto-home-dir+
                   dired-evil-scroll-down+
                   dired-evil-scroll-up+)
        :config
        (defun dired-goto-home-dir+ (&optional other-window)
          "goto users home directory
             with prefix, visits in another window"
          (interactive "P")
          (funcall (if other-window
                       'find-file-other-window
                     'find-file)
                   (expand-file-name "~")))

        (defun dired-evil-scroll-down+ ()
          (interactive)
          (call-interactively 'evil-scroll-down)
          (dired-move-to-filename))

        (defun dired-evil-scroll-up+ ()
          (interactive)
          (call-interactively 'evil-scroll-up)
          (dired-move-to-filename))

        :config
        ;; This keeps getting reset by some package on load so defer it.
        (general-define-key :keymaps 'dired-mode-map [override-state] 'all)

        :general
        (:keymaps 'dired-mode-map
         leader-key nil
         leader-major-mode-key nil
         "g" nil)
        (:keymaps 'dired-mode-map
         :states  '(motion normal)
         "j" 'dired-next-line
         "k" 'dired-previous-line
         "~" 'dired-goto-home-dir+
         "=" 'dired-diff
         "K" 'dired-do-kill-lines
         "'" 'dired-show-file-type ;; like file command
         "M" 'dired-unmark
         "u" 'dired-unmark
         "r" 'dired-change-marks
         "y" 'dired-copy-filename-as-kill
         "RET" 'dired-find-file

         "M-<return>" 'dired-display-file
         "C-M-<return>" 'dired-find-alternate-file
         "C-M-d" 'dired-kill-subdir

         "zc" 'dired-hide-subdir ;; collapse
         "zC" 'dired-hide-all

         ;; "|" 'dired-do-hardlink
         "|" 'dired-do-symlink
         "C-|" 'dired-do-relsymlink
         "M-|" 'dired-do-hardlink
         "M-!" 'dired-do-print ;; append names to end of command

         "C-S-J" 'dired-next-marked-file
         "C-S-K" 'dired-prev-marked-file
         "M-j" 'dired-next-dirline           ; unbound, dired-tree-down
         "M-k" 'dired-prev-dirline           ; unbound, dired-tree-up
         "C-d" 'dired-evil-scroll-down+
         "C-u" 'dired-evil-scroll-up+
         "C-h" 'dired-goto-min-subdir
         "C-j" 'dired-next-subdir
         "C-k" 'dired-prev-subdir
         "C-l" 'dired-goto-max-subdir)
        (:keymaps 'dired-mode-map
         "#" nil "$" nil "%" nil "*" nil "." nil ":" nil "?" nil "~" nil "<" nil
         "=" nil ">" nil "a" nil "A" nil "B" nil "c" nil "C-M-d" nil "C-M-n" nil
         "C-M-p" nil "C-M-u" nil "C-o" nil "e" nil "f" nil "F" nil "g" nil "G" nil
         "h" nil "H" nil "I" nil "j" nil "k" nil "l" nil "L" nil "M" nil "M-$" nil
         "M-(" nil "M-{" nil "M-}" nil "M-DEL" nil "M-G" nil "n" nil "N" nil "O" nil
         "p" nil "P" nil "Q" nil "s" nil "SPC" nil "0" nil "S-SPC" nil "t" nil "T" nil
         "v" nil "V" nil "w" nil "W" nil "X" nil "y" nil "Y" nil "Z" nil "u" nil)

        :lazy-leader
        (:mode '(dired-mode
                 wdired-mode)
         ;; "?" 'dired-summary                                                        ; Like transient state
         "#" 'dired-clean-directory
         "o" 'browse-url-of-dired-file                                                ; Open in external app
         "v" 'dired-view-file                                                         ; find-file but make read-only
         "g" 'dired-goto-file
         "i" 'dired-sort-toggle-or-edit
         "e" '(wdired-change-to-wdired-mode :wk "edit-directory")

         "r"  '(:ignore t :wk "rename")
         "ru" 'dired-upcase
         "rd" 'dired-downcase

         ;; Flag means mark delete
         "d"  '(:ignore t :wk "delete")
         "dj" 'dired-flag-garbage-files
         "db" 'dired-flag-backup-files
         "ds" 'dired-flag-files-regexp
         "d#" 'dired-flag-auto-save-files

         "m"  '(:ignore t :wk "mark")
         "mi" 'dired-toggle-marks
         "ml" 'dired-mark-symlinks
         "md" 'dired-mark-directories
         "mx" 'dired-mark-executables
         "mt" 'dired-mark-subdir-files
         "mg" 'dired-mark-files-containing-regexp ;; grep
         "ms" 'dired-mark-files-regexp
         "me" 'dired-mark-sexp

         "x"  '(:ignore t :wk "emacs")
         "xc" 'dired-do-byte-compile
         "xl" 'dired-do-load
         "xf" 'dired-do-find-marked-files

         ;; Change fs property commands
         "c"  '(:ignore t :wk "change")
         "cg" 'dired-do-chgrp
         "cm" 'dired-do-chmod
         "co" 'dired-do-chown

         ;; Filesystem
         "f"  '(:ignore t :wk "filesystem")
         "fg" 'dired-do-find-regexp                                                   ; grep marked files
         "fs" 'dired-do-find-regexp-and-replace                                       ; regexp substitute marked files
         "fi" 'dired-info                                                             ; run info on current file
         "fm" 'dired-man                                                              ; run man on current file
         "fr" 'dired-do-run-mail
         "ft" 'dired-do-touch

         ;; EasyPG/GPG
         "fp"  '(:ignore t :wk "GPG")
         "fpd" 'epa-dired-do-decrypt
         "fpe" 'epa-dired-do-encrypt
         "fps" 'epa-dired-do-sign
         "fpv" 'epa-dired-do-verify

         ;; operations bound to regexp search
         "s"     '(:ignore t :wk "search")
         "sc"    'dired-do-copy-regexp
         "sr"    'dired-do-rename-regexp
         "sh"    'dired-do-hardlink-regexp
         "ss"    'dired-do-symlink-regexp
         "s|"    'dired-do-symlink-regexp
         "s C-|" 'dired-do-relsymlink-regexp
         "s M-|" 'dired-do-hardlink-regexp)
        (:mode 'wdired-mode
         "q"                   'wdired-abort-changes
         leader-major-mode-key 'wdired-finish-edit))
    #+END_SRC

*** all-the-icons-dired
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-dired
        :straight t
        :diminish all-the-icons-dired-mode
        :after all-the-icons
        :hook (dired-mode . all-the-icons-dired-mode)
        :custom
        (all-the-icons-dired-monochrome nil)
        :config
        (push '(dired-aux dired-upcase all-the-icons-dired--refresh-advice) all-the-icons-dired-advice-alist)
        (push '(dired-aux dired-downcase all-the-icons-dired--refresh-advice) all-the-icons-dired-advice-alist)

        :init
        (advice-add 'all-the-icons-dired--refresh :around #'all-the-icons-pad-families-on-tty-advice+))
    #+END_SRC

*** dired-omit
    dired file hiding functionality.

    #+BEGIN_SRC emacs-lisp
      (use-package dired-x
        :straight (dired-x :type built-in)
        :hook (dired-mode . dired-omit-mode)
        :custom
        (dired-omit-files (rx (or ".#"
                                  (and bol
                                       (or "."
                                           ".."
                                           ".git"
                                           ".github"
                                           ".bundle"
                                           ".clangd"
                                           ".dired"
                                           "__pycache__"
                                           "node_modules"
                                           ".pytest_cache"
                                           ".mypy_cache"
                                           ".tox"
                                           ".gradle"
                                           ".sass-cache"
                                           ".jekyll-cache"
                                           "Pipfile"
                                           "CMakeFiles"
                                           "CMakeCache"
                                           "cmake_install.cmake"
                                           (and "service.log." (one-or-more (any digit "_"))))
                                       eol))))
        :leader
        (:mode '(dired-mode
                 wdired-mode)
         "." 'dired-omit-mode))
    #+END_SRC

*** dired-fl
    Extra font lock rules for dired; basically adds some more color to dired sessions.
    nice idea, but too much of a good thing can be bad.

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! diredfl)
      (use-package diredfl
        :straight t
        :hook (dired-mode . diredfl-mode))
    #+END_SRC

*** git-info
    Show the last commit log for files in the current dired buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package dired-git-info
        :straight t
        :general
        (:keymaps 'dired-mode-map
         ")" 'dired-git-info-mode))
    #+END_SRC

** image-dired
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! image-dired)
     (use-package image-dired
       ;; :custom
       ;; (image-dired-db-file . (state! "image-dired" "db.el")) ; tag associations
       ;; (image-dired-dir . (state! "image-dired/"))
       ;; (image-dired-gallery-dir . (state! "image-dired" "gallery/"))
       ;; (image-dired-temp-image-file . (state! "image-dired" "temp-image"))
       ;; (image-dired-temp-rotate-image-file . (state! "image-dired" "temp-rotate-image"))

       :config
       (push 'image-dired-thumbnail-mode +whitespace-exempt-modes)

       :config
       ;;; Fixed weird moves line, not thumbnail, behaviour.
       (advice-add #'image-dired-slideshow-step :override
                   (defun image-dired-slideshow-step+ ()
                     "Step to next file, if `image-dired-slideshow-times' has not been reached."
                     (if (< image-dired-slideshow-count image-dired-slideshow-times)
                         (progn
                           (message "%s" (1+ image-dired-slideshow-count))
                           (setq image-dired-slideshow-count (1+ image-dired-slideshow-count))
                           (image-dired-display-next-thumbnail-original))
                       (image-dired-slideshow-stop))))

       :general
       (:keymaps 'image-dired-thumbnail-mode-map
        :states '(normal visual)
        "q" nil

        "h" 'image-dired-backward-image
        "j" 'image-dired-next-line
        "k" 'image-dired-previous-line
        "l" 'image-dired-forward-image
        "<left>"  'image-dired-forward-image
        "<right>" 'image-dired-previous-image

        "x" 'image-dired-delete-char
        "m" 'image-dired-mark-thumb-original-file
        "u" 'image-dired-unmark-thumb-original-file
        "c" 'image-dired-comment-thumbnail
        "d" 'image-dired-flag-thumb-original-file
        "D" 'image-dired-thumbnail-set-image-description
        "s" 'image-dired-slideshow-start
        "t" 'image-dired-toggle-mark-thumb-original-file
        "gr" 'image-dired-refresh-thumb
        "gc" 'image-dired-create-thumbs
        "gg" (lambda! (evil-goto-first-line) (evil-beginning-of-line))
        "G"  (lambda! (goto-char (point-max)) (image-dired-backward-image))

        "C-s" 'image-save                                                            ; NOTE originally was bound to o

        "C-SPC"    'image-dired-mark-thumb-original-file
        "M-SPC"    'image-dired-unmark-thumb-original-file

        "<C-return>" 'image-dired-display-current-image-full
        "<RET>"      'image-dired-display-thumbnail-original-image
        "C-l"        'image-dired-display-next-thumbnail-original
        "C-h"        'image-dired-display-previous-thumbnail-original
     ;;; column view aliases
        "J" 'image-dired-display-next-thumbnail-original
        "K" 'image-dired-display-previous-thumbnail-original
        ;; "o" 'image-dired-display-thumbnail-original-image
        "v" 'image-dired-display-thumbnail-original-image

        "<mouse-1>" 'image-dired-mouse-select-thumbnail
        "<mouse-2>" 'image-dired-mouse-display-image)
       (:keymaps 'image-dired-display-image-mode-map
        :states 'normal
        "f" 'image-dired-display-current-image-full
        "F" 'image-dired-display-current-image-sized
        "s" 'image-dired-display-current-image-sized

        "h" 'image-scroll-right
        "l" 'image-scroll-left
        "k" 'image-scroll-down
        "j" 'image-scroll-up
        ;; horizontal line by line movement
        "C-d" 'image-scroll-up
        "C-u" 'image-scroll-down
        "C-e" 'image-next-line
        "C-y" 'image-previous-line
        ;; Arrow Keys Alias hjkl
        "<left>"  'image-backward-hscroll
        "<right>" 'image-forward-hscroll
        "<up>"    'image-scroll-down
        "<down>"  'image-scroll-up)

       :config
       (leader-declare-prefix-for-major-mode 'image-dired-thumbnail-mode
         "t" "tagging"
         "e" "edit")

       :lazy-leader
       (:mode 'image-dired-thumbnail-mode
        "g" 'image-dired-jump-original-dired-buffer
        "m" 'image-dired

        "td" 'image-dired-thumbnail-set-image-description
        "tt" 'image-dired-tag-thumbnail
        "tT" 'image-dired-tag-thumbnail-remove

        "el" 'image-dired-rotate-thumbnail-left
        "eL" 'image-dired-rotate-original-left
        "er" 'image-dired-rotate-thumbnail-right
        "eR" 'image-dired-rotate-original-right

        "." 'image-dired-track-original-file
        "o" 'image-dired-thumbnail-display-external

        ;; [re]set number of columns per row
        "s" 'image-dired-line-up-interactive
        "S" 'image-dired-line-up-dynamic)

       (:mode 'image-dired-display-image-mode
        "h" 'image-bol ; far left   edge
        "j" 'image-eob ; far bottom edge
        "k" 'image-bob ; far top    edge
        "l" 'image-eol ; far right  edge
        "g" 'image-dired-jump-thumbnail-buffer))
   #+END_SRC

** display-line-numbers
   #+BEGIN_SRC emacs-lisp
     (use-package display-line-numbers
       :hook ((prog-mode . display-line-numbers-mode)
              (text-mode . display-line-numbers-mode))
       :init
       ;; prefer relative line numbers when available
       (setq-default display-line-numbers-type 'visual))
   #+END_SRC

** ediff
   The builtin interactive diff tool.

     #+BEGIN_SRC emacs-lisp :tangle (package-yes! ediff)
       (use-package ediff
         :commands (ediff-current-file
                    ediff-buffers
                    ediff-windows
                    ediff-files
                    ediff-backup
                    ediff-files3
                    ediff-directories
                    ediff-directories3
                    ediff-regions-linewise
                    ediff-regions-wordwise
                    ediff-patch-file
                    ediff-merge-files
                    ediff-merge-buffers
                    ediff-merge-directories

                    ;; unbound by default
                    ediff-show-registry ;; ido-choose-ediff-session
                    ediff-toggle-multiframe
                    ediff-toggle-use-toolbar
                    ediff-revert-buffers-then-recompute-diffs
                    ediff-profile)
         :leader
         (:prefix leader-diff-leader-prefix
          "f" 'ediff-current-file
          "b" 'ediff-buffers
          "w" 'ediff-windows)

         :config
         (push 'ediff-meta-mode +whitespace-exempt-modes)

         (setq-default ediff-window-setup-function       'ediff-setup-windows-plain
                       ediff-split-window-function       'split-window-horizontally
                       ediff-merge-split-window-function 'split-window-horizontally
                       ;; ediff-keep-variants               nil ;; doesn't do anything :(
                       )

         (defvar ediff-kill-temporary-buffers-on-exit+ t
           "whether to keep temporary ediff buffers around")

         (require 'outline)
         ;; show org ediffs unfolded
         (add-hook 'ediff-prepare-buffer-hook #'outline-show-all)

         ;; ensure window configuration is restored after diff quit
         (let* ((ediff-window-register ?w)
                (register-active (lambda () (cdr (assoc ediff-window-register register-alist)))))
           (defun ediff--restore-windows-before (&rest args)
             ;; (message "setting up")
             (unless (funcall register-active)
               ;; (message "assigning to register")
               (window-configuration-to-register ediff-window-register)))
           (add-hook 'ediff-before-setup-hook #'ediff--restore-windows-before)

           (defun ediff--restore-windows-after (&rest _args)
             (if (not (funcall register-active))
                 (message "ediff-restore-windows : no previous window config found to restore")
               (jump-to-register ediff-window-register)
               (set-register ediff-window-register nil)))
           (add-hook 'ediff-quit-hook #'ediff--restore-windows-after))

         (defun ediff--kill-ediff-temp-buffers (&rest _args)
           "kills all the spawned ediff buffers... because
       there's way too many and their named so similairly that
       there's no point in them existing... Plus I keep ending
       up editing the wrong diffed buffer."
           (when ediff-kill-temporary-buffers-on-exit+
             ;; kill diff checking buffers when temporary
             (dolist (buffer (list ediff-buffer-A
                                   ediff-buffer-B
                                   ediff-buffer-C))
               (when (and buffer
                          (string-prefix-p "FILE=" (buffer-name buffer)))
                 (kill-buffer buffer)))

             ;; kill any hardcoded ediff related buffers
             (dolist (buffer '("*Ediff Registry*"))
               (let ((buffer (get-buffer buffer)))
                 (when buffer
                   (kill-buffer buffer))))

             ;; kill any uniquely named ediff buffers...
             ;; Ewwww... O(n*m)... how do I live with myself
             (dolist (buffer-prefix '("*Ediff Control Panel"
                                      "*ediff-diff"
                                      "*ediff-errors"
                                      "*ediff-fine-diff"))
               (let ((buffer-prefix-regexp (regexp-quote buffer-prefix)))
                 (dolist (buffer (buffer-list))
                   (when (string-match buffer-prefix-regexp
                                       (buffer-name buffer))
                     (kill-buffer buffer)))))))

         (add-hook 'ediff-quit-hook #'ediff--kill-ediff-temp-buffers)

         (defun ediff--customize-ediff-mode-map (&rest _args)
           "give me back my leader keys damn it :P"
           (general-define-key
            :keymaps 'ediff-mode-map
            :states  'motion
            "SPC" leader-map))

         (add-hook 'ediff-keymap-setup-hook #'ediff--customize-ediff-mode-map)
         ;; (evil-set-initial-state 'ediff-meta-mode 'motion)

         ;; (general-define-key
         ;;   :states 'motion
         ;;   :keymaps 'ediff-meta-buffer-map
         ;;   "C-j" 'ediff-next-meta-item
         ;;   "C-k" 'ediff-previous-meta-item
         ;;   "q" 'ediff-quit-meta-buffer
         ;;   "o" 'ediff-registry-action
         ;;   "=" 'ediff-meta-mark-equal-files
         ;;   "RET" 'ediff-registry-action
         ;;   "R" 'ediff-show-registry
         ;;   "S-RET" 'ediff-show-meta-buff-from-registry
         ;;   "?" 'ediff-toggle-verbose-help-meta-buffer)

         (leader-set-keys-for-major-mode 'ediff-meta-mode
           "tf" 'ediff-toggle-filename-truncation
           "tv" 'ediff-toggle-verbose-help-meta-buffer)

         (use-package evil-ediff
           :straight t
           :defer  nil
           :commands (evil-ediff-init)
           :init
           (evil-ediff-init)))
     #+END_SRC

** eldoc
   That package that displays help messages in the minibuffer.

   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
       :delight ""
       :commands (eldoc-doc-buffer-no-select+)
       :custom
       (eldoc-idle-delay 0.1)
       (eldoc-echo-area-prefer-doc-buffer t)
       (eldoc-echo-area-display-truncation-message nil)
       ;; (eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

       :config
       (defun eldoc-doc-buffer-no-select+ ()
         (interactive)
         (with-display-buffer-no-select-window
           (eldoc-doc-buffer)))

       (defun eldoc-cycle-display-function+ (&optional global)
         (interactive "P")
         (cycle-hook+ 'eldoc-documentation-functions global))

       :leader
       ("ev" 'eldoc-cycle-display-function+
        "hb" 'eldoc-doc-buffer
        "ho" 'eldoc-doc-buffer-no-select+))
   #+END_SRC

** electric-pair
   Electric pair is a built in module which lets auto insert matching pairs.
   For example, inserting a ~(~ will lead to emacs auto inserting ~)~.

   #+BEGIN_SRC emacs-lisp
     (use-package elec-pair
       :hook (emacs-startup . electric-pair-mode)
       :custom
       (electric-pair-skip-whitespace nil)
       (electric-pair-preserve-balance nil)

       :custom (electric-pair-inhibit-predicate #'electric-pair-inhibit-p+)
       :preface
       (defvar electric-pair-skip-completion-categories+
         '(environment-variable file)
         "Completion categories under which electric-pair doesn't work.")

       (defun electric-pair-inhibit-p+ (ch)
         ;; Any of the following can prevent pairing.
         (or
          (when (minibufferp)
            (member (alist-get 'category (+completion-metadata))
                    electric-pair-skip-completion-categories+))
          ;; Respect the default inhibition predicate.
          (electric-pair-default-inhibit ch))))
   #+END_SRC

** electric-indent
   #+BEGIN_SRC emacs-lisp
     (use-package electric
       :hook (emacs-startup . electric-indent-mode))
   #+END_SRC

** electric-layout
   #+BEGIN_SRC emacs-lisp
     (use-package electric
       :preface
       (defvar electric-layout-mode-rules+ nil
         "Alist mapping from major-modes to `electric-layout-rules'.
     Each entry should be a cons of (MODE . RULES) where
     MODE should be a `major-mode' symbol or a list of such symbols.
     RULES should be an alist that can be assigned directly to `electric-layout-rules'.")

       :hook (electric-layout-local-mode . electric-layout-update-rules+)
       :commands (electric-layout-update-rules+)
       :config
       (defun electric-layout-update-rules+ ()
         (cond
          ((bound-and-true-p electric-layout-mode)
           (setq-local electric-layout-rules
                       (or (cl-loop for (mode . variables) in electric-layout-mode-rules+
                                    when (seq-find #'derived-mode-p (if (consp mode)
                                                                        mode
                                                                      (list mode)))
                                    append variables)
                           electric-layout-rules)))
          (t (kill-local-variable 'electric-layout-rules)))))
   #+END_SRC

** finder-mode
   #+BEGIN_SRC emacs-lisp
     (use-package finder
       :lazy-leader
       (:mode 'finder-mode
        "?" 'finder-summary)

       :general
       (:keymaps 'finder-mode-map
        "SPC" 'nil
        "?"   'nil
        [override-state] 'motion))
   #+END_SRC

** flymake
   #+BEGIN_SRC emacs-lisp
     (use-package flymake
       :diminish flymake-mode
       :commands (flymake-first-error+
                  flymake-last-error+)
       :custom
       (flymake-note-bitmap '(+dot-fringe-bitmap compilation-info))
       (flymake-error-bitmap '(+dot-fringe-bitmap compilation-error))
       (flymake-warning-bitmap '(+dot-fringe-bitmap compilation-warning))

       :init
       ;; Disable the legacy proc backend.
       (setq-default flymake-diagnostic-functions nil)
       (with-eval-after-load 'flymake-proc
         (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake))

       :init
       (defmacro flymake-unsupported-command+ (name)
         `(lambda ()
            (interactive)
            (message "Flymake doesn't have a parallel for: %s" (quote ,name))))

       :config
       ;; force flymake to not try and cooperate with flycheck (for now).
       (add-hook 'flymake-mode-hook
                 (defun flymake-disable-flycheck+ ()
                   (when (bound-and-true-p flycheck-mode)
                     (flycheck-mode -1))))

       (advice-add #'flymake--handle-report :around #'display-buffer-no-select-window-advice)
       (advice-add #'flymake-show-diagnostic :around #'display-buffer-no-select-window-advice)

       (evil-set-command-property 'flymake-goto-next-error :jump t)
       (evil-set-command-property 'flymake-goto-prev-error :jump t)

       (defun flymake-first-error+ ()
         (interactive)
         (let* ((ovs (flymake--overlays :compare #'< :key #'overlay-start))
                (ov (car ovs)))
           (cond
            (ov (goto-char (overlay-start ov)))
            (t (user-error "No flymake errors in the current buffer")))))
       (evil-set-command-property 'flymake-first-error+ :jump t)

       (defun flymake-last-error+ ()
         (interactive)
         (let* ((ovs (flymake--overlays :compare #'< :key #'overlay-start))
                (ov (car (last ovs))))
           (cond
            (ov (goto-char (overlay-start ov)))
            (t (user-error "No flymake errors in the current buffer")))))
       (evil-set-command-property 'flymake-last-error+ :jump t)

       ;; Make the diagnostic buffer auto-move to the closest error.
       :config
       (advice-add #'flymake-show-diagnostics-buffer :filter-return
                   (defun flymake-show-diagnostics-buffer-update-point+ (diag-win)
                     "Move point to the error closest to point in diagnostics buffer.
     By default when you run `flymake-show-diagnostics-buffer' your point is
     either the start of the buffer or where it was when you were previously
     in that buffer.
     This isn't ideal when you just want to inspect the error message for the
     error at point. This advice moves the point to the closest error in the
     diagnostics buffer to where you were in the original buffer."
                     (prog1 diag-win
                       (when diag-win
                         (with-current-buffer (window-buffer diag-win)
                           (when-let* ((source flymake--diagnostics-buffer-source)
                                       (diag-deltas
                                        (with-current-buffer source
                                          (let ((point (point)))
                                            (cl-loop for it in (cl-sort (flymake-diagnostics) #'<
                                                                        :key #'flymake-diagnostic-beg)
                                                     collect (abs (- (flymake-diagnostic-beg it) point)))))))
                             (goto-char (point-min))
                             (let ((ix (seq-position diag-deltas (seq-min diag-deltas))))
                               (forward-line ix))))))))

       :init
       (with-eval-after-load 'evil
         (evil-declare-motion 'flymake-goto-next-error)
         (evil-declare-motion 'flymake-goto-prev-error)
         (evil-declare-motion 'flymake-first-error+)
         (evil-declare-motion 'flymake-last-error+))

       :leader
       ("ej" 'flymake-goto-next-error
        "ek" 'flymake-goto-prev-error
        "er" 'flymake-start
        "e1" 'flymake-first-error+
        "e2" 'flymake-last-error+
        "el" 'flymake-show-diagnostics-buffer
        ;; "e2" 'flymake-switch-to-log-buffer
        "eL" 'flymake-show-project-diagnostics
        ;; TODO implement
        ;; (flymake-unsupported-command+ toggle-flycheck-messages)
        "ex" (flymake-unsupported-command+ flycheck-clear)
        "ed" (flymake-unsupported-command+ flycheck-explain-error-at-point)
        "hde" (flymake-unsupported-command+ flycheck-describe-checker))

       :general
       (:keymaps 'flymake-diagnostics-buffer-mode-map
        :states 'motion
        "RET" 'flymake-goto-diagnostic
        "o" 'flymake-show-diagnostic))
   #+END_SRC

*** flymake-hydra
    #+begin_src emacs-lisp
      (use-package flymake
        :leader
        ("e." 'flymake-hydra/body)

        :preface
        (defvar flymake-hydra--window-config+ nil)

        :init
        (defun flymake-hydra--setup-window-config+ (diag-buffer)
          (setq flymake-hydra--window-config+ (current-window-configuration))
          (delete-other-windows)
          (with-selected-window (split-window-right)
            (switch-to-buffer diag-buffer)

            (when (and (bound-and-true-p compilation-last-buffer)
                       (buffer-live-p compilation-last-buffer))
              (with-selected-window (split-window-below)
                (switch-to-buffer compilation-last-buffer)))))

        (defun flymake-hydra--restore-window-config+ ()
          (when flymake-hydra--window-config+
            (unwind-protect
                (save-current-buffer
                  (save-selected-window
                    (save-excursion
                      (set-window-configuration flymake-hydra--window-config+))))
              (setq flymake-hydra--window-config+ nil))))

        :hydra
        (flymake-hydra
         (:body-pre (flymake-hydra--setup-window-config+
                     (save-window-excursion
                       (window-buffer (flymake-show-diagnostics-buffer))))
          :post (flymake-hydra--restore-window-config+)
          :hint nil)
         ("j"  flymake-goto-next-error "Next")
         ("k"  flymake-goto-prev-error "Previous")
         ("gg" flymake-first-error+ "First")
         ("G"  flymake-last-error+ "Last")
         ("n"  next-error "Next-Compile")
         ("p"  previous-error "Last-Compile")
         ("q"  nil :exit t)))
    #+end_src

*** flymake-rest
    #+begin_src emacs-lisp
      (use-package flymake-rest
        :straight (flymake-rest :host github
                                :repo "mohkale/flymake-rest"
                                :files ("*.el" "checkers/*.el"))
        :hook (after-init . flymake-rest-hook-setup)
        :custom
        (flymake-rest-markdownlint-style
         (join-path (xdg-config-home) "mdlstyle.rb"))
        (flymake-rest-hook-ignore-modes '(eglot--managed-mode))

        :leader ("ec" 'flymake-rest-change-checker))
    #+end_src

*** flymake-diagnostics-at-point
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package flymake-diagnostic-at-point
        :straight t
        :hook (flymake-mode . flymake-diagnostic-at-point-mode))
    #+END_SRC

** flyspell
   On the fly spell checker. Spawns an Aspell sub-process and passes any words you write
   to it; any misspellings or unknown words will be highlighted to indicate they're misspelled.

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :hook (git-commit-mode . flyspell-mode)
       :delight (flyspell-mode " Fly")
       :init
       (evil-ex-define-cmd "spell" #'flyspell-buffer)

       :pretty-hydra
       ((:hint nil :foreign-keys warn :quit-key "q")
        ("Move"
         (("h" flyspell-correct-previous "fix-prev")
          ("j" evil-next-flyspell-error "next")
          ("k" evil-prev-flyspell-error "prev")
          ("l" flyspell-correct-next "fix-next"))
         "Recheck"
         (("gb" flyspell-buffer "check-buffer")
          ("gr" flyspell-region "check-region")
          ("gw" flyspell-word "check-word"))
         "Correct"
         (("TAB" flyspell-auto-correct-word "cycle-suggestion")
          ("c" flyspell-correct-wrapper "correct")
          ("p" flyspell-correct-at-point "fix-at-point"))))

       :config
       (add-hook 'org-mode-hook 'flyspell-mode)

       :lazy-leader
       (:mode 'flyspell-mode
        :minor t
        :prefix leader-minor-mode-leader-prefix
        "."  'flyspell-hydra/body
        "cb" 'flyspell-buffer
        "cr" 'flyspell-region
        "cw" 'flyspell-word))
   #+END_SRC

*** flyspell-correct
    #+BEGIN_SRC emacs-lisp
      (use-package flyspell-correct
        :straight t
        :leader
        (:mode 'flyspell-mode
         :minor t
         :prefix leader-minor-mode-leader-prefix
         leader-minor-mode-leader-prefix 'flyspell-correct-wrapper))
    #+END_SRC

*** ispell
   #+BEGIN_SRC emacs-lisp
     (use-package ispell
       :custom
       (ispell-personal-dictionary (etc! "ispell/spellings.txt"))
       (ispell-alternate-dictionary (etc! "ispell" "english-words.txt"))

       :config
       (defun ispell--prevent-absolute-path (func &rest args)
         (cl-letf (((symbol-function 'expand-file-name)
                    (lambda (fp) fp)))
           (apply func args)))

       (advice-add 'ispell-internal-change-dictionary :around #'ispell--prevent-absolute-path)
       (advice-add 'flyspell-large-region             :around #'ispell--prevent-absolute-path)

       (add-hook 'kill-emacs-hook
                 (defun ispell-save-pdict-on-quit+ ()
                   (ispell-pdict-save t))))
   #+END_SRC

** gpg
   #+begin_src emacs-lisp
     (use-package epg
       :custom
       (epg-pinentry-mode 'loopback)
       (epg-user-id user-mail-address))
   #+end_src

** grep
   emacs mode for interacting with output from the grep executable.

   #+BEGIN_SRC emacs-lisp
     (use-package grep
       :config
       (+set-compilation-bindings 'grep-mode 'grep-mode-map))
   #+END_SRC

*** wgrep
    Allows you to edit and persists changes to grep-buffers to the underlying
    files... kinda like occur-mode.

    #+begin_src emacs-lisp
      (use-package wgrep
        :straight t
        :after grep
        :custom
        (wgrep-too-many-file-length 15)

        :config
        (advice-add #'wgrep-change-to-wgrep-mode :after #'evil-normal-state)
        (advice-add #'wgrep-abort-changes :after #'evil-motion-state)
        (advice-add #'wgrep-exit :after #'evil-motion-state)
        (advice-add #'wgrep-finish-edit :after #'evil-motion-state)

        :leader
        (:mode 'grep-mode
         "e" 'wgrep-change-to-wgrep-mode)
        :general
        (:keymaps 'wgrep-mode-map
         :prefix leader-major-mode-key
         "q" 'wgrep-abort-changes
         "," 'wgrep-finish-edit
         "s" 'wgrep-save-all-buffers))
    #+end_src

** gud
   The grand unified debugger interface.

   #+begin_src emacs-lisp
     (use-package gud
       :straight t
       ;; :config
       ;; Fails because gdb parses file-paths from the cmd line and
       ;; changes to the first one.
       ;; (let ((conf (shell-quote-argument (join-path (xdg-config-home) "gdb" "init"))))
       ;;   (setq gud-gdb-command-name (concat "gdb -i=mi -x " conf)
       ;;         gud-gud-gdb-command-name (concat "gdb -x " conf " --fullname")))

       :init
       (push `(,(rx "*gud")
               (display-buffer-reuse-window
                display-buffer--maybe-pop-up-frame-or-window
                display-buffer-in-side-window)
               (side . right)
               (window-width . 0.25)
               (body-function . nil))
             display-buffer-alist)

       :config
       ;; By default gud starts up in the current directory so completion
       ;; doesn't support the path to the binary and other useful stuff.
       (defun gud-start-in-project-root+ (func &rest args)
         (let ((default-directory (or (project-current-root+)
                                      default-directory)))
           (apply func args)))

       (dolist (it (list #'gdb #'gud-gdb #'perldb #'jdb #'pdb #'guiler #'dbx #'xdb #'sdb))
         (advice-add it :around #'gud-start-in-project-root+))

       :leader
       (:prefix "v"
        "" '(:ignore t :wk "debugger")
        "SPC" 'gud-run
        "b" 'gud-break
        "B" 'gud-tbreak                                                              ; temporary breakpoint
        "c" 'gud-cont
        "f" 'gud-finish                                                              ; current function
        "j" 'gud-jump                                                                ; to current line
        "e" 'gud-print                                                               ; eval expression at point
        "l" 'gud-refresh                                                             ; redraw buffers
        "d" 'gud-remove
        "s" 'gud-step
        "t" 'gud-until                                                               ; continue until current line
        "w" 'gud-watch
        "<" 'gud-down                                                                ; stack-frames
        ">" 'gud-up))
   #+end_src

** help
   #+BEGIN_SRC emacs-lisp
     (use-package help
       :custom
       (describe-bindings-outline t)
       :config
       ;; once was enough, stop repeating the same message please :P
       (advice-add 'help-window-display-message :around #'ignore))
   #+END_SRC

** gamegrid
   #+BEGIN_SRC emacs-lisp
     (use-package gamegrid
       :custom
       (gamegrid-user-score-file-directory (share! "gamegrid/")))
   #+END_SRC

** hl-line
   apply a different background face to the current line.

   #+BEGIN_SRC emacs-lisp
     (use-package hl-line
       :hook ((prog-mode . hl-line-mode)
              (text-mode . hl-line-mode))
       :custom
       (hl-line-sticky-flag nil
        "Only highlight line in active window."))
   #+END_SRC

** ibuffer
   :PROPERTIES:
   :header-args+: :tangle (package-yes! ibuffer)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package ibuffer
       :hook (ibuffer-mode . hl-line-mode)
       :leader
       ("bm" 'ibuffer)

       :custom
       (ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
       (ibuffer-title-face '(:inherit (font-lock-type-face)))
       (ibuffer-never-show-predicates (list (rx bol " " (* any))))
       (ibuffer-formats
        `((mark modified read-only locked
           " "
           ,@(when +icons-available
               (list '(icon 2 2 :left :elide)
                     (propertize " " 'display `(space :align-to 8))))
           (name 20 20 :left :elide)
           " "
           (size-h 11 -1 :right)
           " "
           (mode+ 16 16 :left :elide)
           " " filename-and-process+)
          (mark " "
           ,@(when +icons-available
               (list '(icon 2 2 :left :elide)
                     " "))
           (name 30 30 :left :elide)
           " "
           filename)))

       :init
       (evil-set-initial-state 'ibuffer-mode 'motion)

       :config
       (advice-add #'ibuffer-visit-buffer-other-window :override
                   (defun ibuffer-visit-buffer-other-window+ (&optional noselect)
                     "Fixes `ibuffer-visit-buffer-other-window' doesn't always open in new window."
                     (let ((buf (ibuffer-current-buffer t)))
                       (bury-buffer (current-buffer))
                       (if noselect
                           (let ((curwin (selected-window)))
                             (switch-to-buffer-other-window buf)
                             (select-window curwin))
                         (switch-to-buffer-other-window buf)))))

     ;;; Adapted from [[https://emacs.stackexchange.com/a/2179][here]], this makes ibuffer support `auto-revert-mode'.
       :hook (ibuffer-mode . ibuffer-auto-revert-setup+)
       :commands (ibuffer-auto-revert-setup+)
       :config
       (defun ibuffer-stale-p+ (&optional _noconfirm)
         ;; Let's reuse the variable that's used for 'ibuffer-auto-mode
         (frame-or-buffer-changed-p 'ibuffer-auto-buffers-changed))

       (defun ibuffer-auto-revert-setup+ ()
         (setq-local buffer-stale-function #'ibuffer-stale-p+
                     auto-revert-verbose nil))

       :lazy-leader
       (:mode 'ibuffer-mode
        ;; unbound:
        ;;  * ibuffer-do-print
        "RET" 'ibuffer-do-view-horizontally
        "1"   'ibuffer-visit-buffer-1-window
        "+"   'ibuffer-add-to-tmp-show
        "-"   'ibuffer-add-to-tmp-hide

        "a"   'ibuffer-auto-mode
        "E"   'ibuffer-do-view-and-eval
        "e"   'ibuffer-do-eval
        ;; "R"   'ibuffer-redisplay
        "r"   'ibuffer-do-rename-uniquely
        "s"   'ibuffer-do-query-replace
        "w"   'ibuffer-do-save
        ;; "s"   'ibuffer-do-replace-regexp
        "t"   'ibuffer-visit-tags-table
        "f"   'ibuffer-find-file
        "X"   'ibuffer-kill-filter-group
        "P"   'ibuffer-yank-filter-group
        "x"   'ibuffer-kill-line
        "p"   'ibuffer-yank
        "|"   'ibuffer-do-shell-command-pipe-replace
        "~"   'ibuffer-do-toggle-modified

        "o"   'ibuffer-do-view
        "O"   'ibuffer-do-view-other-frame

        "g"   'ibuffer-jump-to-buffer
        "b"   'ibuffer-jump-to-filter-group

        "m" '(:ignore t :wk "mark")
        "m*" 'ibuffer-mark-modified-buffers
        "m%" 'ibuffer-mark-read-only-buffers
        "mm" 'ibuffer-toggle-marks
        "mf" 'ibuffer-mark-by-name-regexp
        "mf" 'ibuffer-mark-by-file-name-regexp
        "mo" 'ibuffer-mark-old-buffers
        "ml" 'ibuffer-mark-by-locked
        "mb" 'ibuffer-mark-by-content-regexp
        "mM" 'ibuffer-mark-by-mode-regexp
        "md" 'ibuffer-mark-dired-buffers
        "mh" 'ibuffer-mark-help-buffers
        "mn" 'ibuffer-mark-dissociated-buffers
        "mN" 'ibuffer-mark-unsaved-buffers
        "ms" 'ibuffer-mark-special-buffers
        "mz" 'ibuffer-mark-compressed-file-buffers)

       :general
       (:keymaps 'ibuffer-mode-map
        "+" nil "-" nil "0" nil "f" nil "SPC" nil "S-SPC" nil ">" nil "<" nil "?" nil "h" nil "X" nil "F"
        nil "C-d" nil "C-t" nil "b" nil "n" nil "g" nil "p" nil "w" nil "s" nil "`" nil "," nil "*" nil
        "/" nil "A" nil "C-c" nil "C-x" nil "M-s" nil "M-g" nil "M-n" nil "M-p" nil "M-{" nil "M-}" nil
        "M-o" nil "M-DEL" nil "%" nil)
       (:keymaps 'ibuffer-mode-map
        :states  'motion
        ;; ibuffer-kill-line
        ;; ibuffer-do-kill-lines
        ;; ibuffer-do-revert
        ;; ibuffer-do-isearch
        ;; ibuffer-do-isearch-regexp

        ;; "D" 'ibuffer-mark-for-delete-backwards
        "D" 'ibuffer-do-delete
        "M" 'ibuffer-do-toggle-modified
        "=" 'ibuffer-diff-with-file
        "O" 'ibuffer-do-occur
        "R" 'ibuffer-do-toggle-read-only

        "RET"   'ibuffer-visit-buffer
        "o"     'ibuffer-visit-buffer-other-window
        "i"     'ibuffer-visit-buffer-other-window-noselect
        "M-RET" 'ibuffer-visit-buffer-other-window-noselect
        "S-DEL" 'ibuffer-bury-buffer

        [remap ibuffer-auto-mode] 'auto-revert-mode
        [remap revert-buffer] 'ibuffer-update
        "gu"                  'ibuffer-do-revert
        "gw"                  'ibuffer-do-save

        "|" 'ibuffer-do-shell-command-pipe-replace

     ;;; marking
        "m" 'ibuffer-mark-forward
        "r" 'ibuffer-change-marks

     ;;; sorting
        "S"  'ibuffer-toggle-sorting-mode
        "sa" 'ibuffer-do-sort-by-alphabetic
        "sf" 'ibuffer-do-sort-by-filename/process
        "si" 'ibuffer-invert-sorting
        "s SPC" 'ibuffer-invert-sorting
        "sm" 'ibuffer-do-sort-by-major-mode
        "ss" 'ibuffer-do-sort-by-size
        "sr" 'ibuffer-do-sort-by-recency
        "("   'ibuffer-switch-format

     ;;; movement
        "TAB"       'ibuffer-forward-filter-group
        "gj"        'ibuffer-forward-filter-group
        "gk"        'ibuffer-backward-filter-group
        "<S-tab>"   'ibuffer-backward-filter-group
        "<backtab>" 'ibuffer-backward-filter-group

        ;; [remap evil-write] 'ibuffer-do-save
        ;; [remap evil-write-all] 'ibuffer-do-save
        [remap evil-next-line] 'ibuffer-forward-line
        [remap evil-previous-line] 'ibuffer-backward-line
        [remap imenu] 'ibuffer-jump-to-buffer

        "C-j"  'ibuffer-forward-next-marked
        "C-k"  'ibuffer-backwards-next-marked

        "p"   'ibuffer-yank
        "C-y" 'ibuffer-yank
        "y"   'ibuffer-copy-buffername-as-kill))
   #+END_SRC

*** ibuffer-hydra
    Sourced from [[https://github.com/abo-abo/hydra/wiki/Ibuffer][wiki/Ibuffer]].

    #+begin_src emacs-lisp
      (use-package ibuffer
        :straight t
        :lazy-leader
        (:mode 'ibuffer-mode
         "."   'ibuffer-hydra/body)

        :hydra
        (ibuffer-hydra
         (:color pink :hint nil)
         "
       ^ ^ ^   ^ ^ ^ | Marks [_*_] | Actions [_a_]     | View       ^^| Select      ^^|
       _k_ ^ ‚Üë ^ _h_ +-^-^---------+-^-^---------------+-^-^----------+-^-^-----------+
       ^ ^ _RET_ ^ ^ | _m_ark      | _D_: delete       | _g_: refresh | _TAB_: toggle |
       _j_ ^ ‚Üì ^ _l_ | _u_nmark    | _s_: save marked  | _S_: sort    | _o_: open     |
       ^ ^ ^   ^ ^ ^ | _t_oggle    | _._: toggle hydra | _/_: filter  | _q_: quit     |
      "
         ("m" ibuffer-mark-forward)
         ("u" ibuffer-unmark-forward)
         ("*" ibuffer-mark-hydra/body :exit t)
         ("M" ibuffer-mark-hydra/body :exit t)
         ("t" ibuffer-toggle-marks)

         ("D" ibuffer-do-delete)
         ("s" ibuffer-do-save)
         ("a" ibuffer-action-hydra/body :exit t)

         ("g" ibuffer-update)
         ("S" ibuffer-sort-hydra/body :exit t)
         ("/" ibuffer-filter-hydra/body :exit t)
         ("H" describe-mode :exit t)

         ("h" ibuffer-backward-filter-group)
         ("k" ibuffer-backward-line)
         ("l" ibuffer-forward-filter-group)
         ("j" ibuffer-forward-line)
         ("RET" ibuffer-visit-buffer :exit t)

         ("TAB" ibuffer-toggle-filter-group)

         ("o" ibuffer-visit-buffer-other-window :exit t)
         ("Q" quit-window :exit t)
         ("q" nil :exit t)
         ("." nil :exit t))

        (ibuffer-mark-hydra
         (:color teal :columns 5 :after-exit (ibuffer-hydra/body))
         "Mark"
         ("*" ibuffer-unmark-all "unmark all")
         ("M" ibuffer-mark-by-mode "mode")
         ("m" ibuffer-mark-modified-buffers "modified")
         ("u" ibuffer-mark-unsaved-buffers "unsaved")
         ("s" ibuffer-mark-special-buffers "special")
         ("r" ibuffer-mark-read-only-buffers "read-only")
         ("/" ibuffer-mark-dired-buffers "dired")
         ("e" ibuffer-mark-dissociated-buffers "dissociated")
         ("h" ibuffer-mark-help-buffers "help")
         ("z" ibuffer-mark-compressed-file-buffers "compressed")
         ("b" ibuffer-hydra/body "back" :exit t))

        (ibuffer-action-hydra
         (:color teal :columns 4
          :after-exit
          (if (eq major-mode 'ibuffer-mode)
              (ibuffer-hydra/body)))
         "Action"
         ("A" ibuffer-do-view "view")
         ("E" ibuffer-do-eval "eval")
         ("F" ibuffer-do-shell-command-file "shell-command-file")
         ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
         ("H" ibuffer-do-view-other-frame "view-other-frame")
         ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
         ("M" ibuffer-do-toggle-modified "toggle-modified")
         ("O" ibuffer-do-occur "occur")
         ("P" ibuffer-do-print "print")
         ("Q" ibuffer-do-query-replace "query-replace")
         ("R" ibuffer-do-rename-uniquely "rename-uniquely")
         ("T" ibuffer-do-toggle-read-only "toggle-read-only")
         ("U" ibuffer-do-replace-regexp "replace-regexp")
         ("V" ibuffer-do-revert "revert")
         ("W" ibuffer-do-view-and-eval "view-and-eval")
         ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
         ("b" nil "back"))

        (ibuffer-sort-hydra
         (:color amaranth :columns 3)
         "Sort"
         ("i" ibuffer-invert-sorting "invert")
         ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
         ("v" ibuffer-do-sort-by-recency "recently used")
         ("s" ibuffer-do-sort-by-size "size")
         ("f" ibuffer-do-sort-by-filename/process "filename")
         ("m" ibuffer-do-sort-by-major-mode "mode")
         ("b" ibuffer-hydra/body "back" :exit t))

        (ibuffer-filter-hydra
         (:color amaranth :columns 4)
         "Filter"
         ("m" ibuffer-filter-by-used-mode "mode")
         ("M" ibuffer-filter-by-derived-mode "derived mode")
         ("n" ibuffer-filter-by-name "name")
         ("c" ibuffer-filter-by-content "content")
         ("e" ibuffer-filter-by-predicate "predicate")
         ("f" ibuffer-filter-by-filename "filename")
         (">" ibuffer-filter-by-size-gt "size")
         ("<" ibuffer-filter-by-size-lt "size")
         ("/" ibuffer-filter-disable "disable")
         ("b" ibuffer-hydra/body "back" :exit t)))
    #+end_src

*** ibuffer-all-the-icons
    Provides ~icon~, ~size-h~, ~mode+~ and ~filename-and-process+~ columns.

    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-ibuffer
        :straight t
        :demand t
        :after ibuffer
        :config
        ;; Add padding to make sure icons aren't truncated on the terminal.
        (when-let ((cell (assoc 'ibuffer-make-column-icon ibuffer-inline-columns)))
          (setcdr cell
                  (list `(all-the-icons-pad-on-tty-advice+ ,@(cdr cell))))))
    #+END_SRC

*** ibuffer-filters
    #+BEGIN_SRC emacs-lisp
      (use-package ibuf-ext
        :commands (ibuffer-filter-by-directory-path
                   ibuffer-filter-by-client-buffers)
        :config
        (define-ibuffer-filter directory-path
            "Toggle current view to buffers with file or directory name matching QUALIFIER."
          (:description "filename"
           :reader (file-truename
                    (read-directory-name "List files from file/directory name: ")))
          (ibuffer-awhen (or (buffer-local-value 'buffer-file-name buf)
                             (buffer-local-value 'dired-directory buf))
            ;; (message "qual: %s, it: %s" qualifier (file-truename it))
            (string-prefix-p qualifier (file-truename it))))

        (define-ibuffer-filter client-buffers
            "Only show buffers for which there're open emacsclient clients."
          (:description "emacsclient-buffers")
          (buffer-local-value 'server-buffer-clients buf))

        :leader
        (:mode 'ibuffer-mode
         :prefix ","
         ""       '(:ignore t :wk "filter")
         "g"      'ibuffer-jump-to-filter-group
         "TAB"    'ibuffer-exchange-filters
         "DEL"    'ibuffer-delete-saved-filters
         "M-DEL"  'ibuffer-delete-saved-filter-groups

         "!"      'ibuffer-negate-filter
         "&"      'ibuffer-and-filter
         "a"      'ibuffer-and-filter
         "|"      'ibuffer-or-filter
         "o"      'ibuffer-or-filter
         "-"      'ibuffer-exchange-filters
         "a"      'ibuffer-add-saved-filters
         "p"      'ibuffer-pop-filter
         "P"      'ibuffer-pop-filter-group
         "u"      'ibuffer-decompose-filter
         "U"      'ibuffer-decompose-filter-group
         "r"      'ibuffer-switch-to-saved-filters
         "R"      'ibuffer-switch-to-saved-filter-groups
         "w"      'ibuffer-save-filters
         "W"      'ibuffer-save-filter-groups
         "x"      'ibuffer-filter-disable
         "X"      'ibuffer-clear-filter-groups

         "@"      'ibuffer-filter-by-client-buffers
         "*"      'ibuffer-filter-by-starred-name
         ","      'ibuffer-filter-by-used-mode
         "."      'ibuffer-filter-by-file-extension
         ">"      'ibuffer-filter-by-size-gt
         "<"      'ibuffer-filter-by-size-lt
         "%"      'ibuffer-filter-by-basename
         "k"      'ibuffer-filter-by-predicate
         "D"      'ibuffer-filter-by-directory-path
         "d"      'ibuffer-filter-by-directory ; regexp
         "f"      'ibuffer-filter-by-filename  ; regexp
         "e"      'ibuffer-filter-by-modified
         "m"      'ibuffer-filter-by-derived-mode
         "n"      'ibuffer-filter-by-name
         "s"      'ibuffer-filter-by-content
         "v"      'ibuffer-filter-by-visiting-file

         "b"      'ibuffer-filters-to-filter-group
         "("      'ibuffer-filters-to-filter-group))
    #+END_SRC

*** ibuffer-vc
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! ibuffer ibuffer-vc)
      (use-package ibuffer-vc
        :straight t
        :after ibuffer
        :config
        (defalias 'ibuffer-vc #'ibuffer-vc-set-filter-groups-by-vc-root)

        :general
        (:keymaps 'ibuffer-mode-map
         "sv" 'ibuffer-vc
         ")"  'ibuffer-vc))
    #+END_SRC

*** ibuffer-tramp
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! ibuffer ibuffer-tramp)
      (use-package ibuffer-tramp
        :straight t
        :after ibuffer
        :config
        (defalias 'ibuffer-tramp #'ibuffer-tramp-set-filter-groups-by-tramp-connection)

        :general
        (:keymaps 'ibuffer-mode-map
         "s@" 'ibuffer-tramp))
    #+END_SRC

*** ibuffer-projectile
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! ibuffer ibuffer-projectile)
      (use-package ibuffer-projectile
        :straight t
        :after ibuffer
        :commands (ibuffer-projectile-mode)
        ;; :hook (ibuffer-mode . ibuffer-projectile-mode)
        :config
        (setq ibuffer-projectile-prefix
              (if +icons-available
                  (concat
                   (all-the-icons-pad-on-tty-advice+
                    (+icon nerd-oct "repo" :face ibuffer-filter-group-name-face))
                   " ")
                "Project: "))

        (defun ibuffer-projectile-hook (&rest _)
          (ibuffer-projectile-set-filter-groups))

        (defgroup ibuffer-projectile-mode nil
          ""
          :group 'projectile
          :group 'ibuffer)
        (define-minor-mode ibuffer-projectile-mode
          "Generate ibuffer filters for projectile projects."
          :lighter nil
          :global  t
          (if ibuffer-projectile-mode
              (progn
                (add-hook 'ibuffer-hook #'ibuffer-projectile-hook)
                (ibuffer-projectile-set-filter-groups))
            (remove-hook 'ibuffer-hook #'ibuffer-projectile-hook)

            (let ((ibuf (get-buffer "*Ibuffer*")))
              (when ibuf
                (with-current-buffer ibuf
                  (setq ibuffer-filter-groups
                        (seq-filter
                         (lambda (x)
                           (not (assoc 'projectile-root x)))
                         ibuffer-filter-groups))
                  (ibuffer-update nil t)))))))
    #+END_SRC

** imenu
   :PROPERTIES:
   :header-args+: :tangle (package-yes! imenu)
   :END:

   See (and jump to) key points of interest in the current buffer using your completion framework
   of choice.

   #+BEGIN_SRC emacs-lisp
     (use-package imenu
       :leader
       ("ji" 'imenu))
   #+END_SRC

*** imenu-list
    #+BEGIN_SRC emacs-lisp
      (use-package imenu-list
        :straight t
        :leader
        ("jI" 'imenu-anywhere)

        :config
        (evil-set-initial-state 'imenu-list-major-mode 'motion)

        :general
        (:states 'motion
         :keymaps 'imenu-list-major-mode-map
         "gr" 'imenu-list-refresh
         "o"  'imenu-list-display-entry))
    #+END_SRC

*** imenu-anywhere
    #+BEGIN_SRC emacs-lisp
      (use-package imenu-anywhere
        :straight t
        :leader
        ("bi" 'imenu-list))
    #+END_SRC

** info
   #+BEGIN_SRC emacs-lisp
     (use-package info
       :config
       (push 'Info-mode +whitespace-exempt-modes)

       :leader
       ("hi" 'info-apropos
        ;; "ai" 'info
        "ai" 'info-display-manual)

       :lazy-leader
       (:mode 'Info-mode
        "h" 'Info-directory
        "?" 'Info-summary
        "G" 'Info-goto-node
        "g" 'Info-menu
        "y" 'Info-copy-current-node-name
        "r" 'Info-history
        "i" 'Info-index
        "I" 'Info-virtual-index
        "a" 'Info-top-node
        "e" 'Info-final-node
        )

       :general
       (:keymaps 'Info-mode-map
        [remap imenu] 'Info-menu
        [remap imenu-anywhere] 'Info-menu
        leader-key nil
        "DEL" nil ; was `Info-scroll-down'
        "S-SPC" nil ; was `Info-scroll-down'
        "m" nil ; was `Info-menu'
        "t" nil ; was `Info-top-node'
        "T" nil ; was `Info-toc'
        "f" nil ; was `Info-follow-reference'
        "?" nil ; was `Info-summary'
        "L" nil ; was `Info-history'
        "s" nil ; was `Info-search'
        "S" nil ; was `Info-search-case-sensitively'
        "w" nil ; was `Info-copy-current-node-name'
        "b" nil ; was `beginning-of-buffer'
        "e" nil ; was `end-of-buffer'
        "g" nil ; was `Info-goto-node'
        "n" nil ; was `Info-next'
        "p" nil ; was `Info-prev'
        "r" nil ; was `Info-history-forward'
        "u" nil ; was `Info-up'
        "." nil ; was `beginning-of-buffer'
        ">" nil ; was `Info-top-node'
        "<" nil ; was `Info-final-node'
        "," nil ; was `Info-index-next'
        )
       (:keymaps 'Info-mode-map
        :states 'motion
        leader-key nil

        "l" 'evil-forward-char
        "h" 'evil-backward-char

        "RET" 'Info-follow-nearest-node
        "S-TAB" 'Info-prev-reference
        "TAB" 'Info-next-reference
        [C-i] 'Info-next-reference

        "gu" 'Info-up
        "gj" 'Info-forward-node
        "gk" 'Info-backward-node

        "g1" 'Info-nth-menu-item
        "g2" 'Info-nth-menu-item
        "g3" 'Info-nth-menu-item
        "g4" 'Info-nth-menu-item
        "g5" 'Info-nth-menu-item
        "g6" 'Info-nth-menu-item
        "g7" 'Info-nth-menu-item
        "g8" 'Info-nth-menu-item
        "g9" 'Info-nth-menu-item))
   #+END_SRC

** minibuffer
   #+begin_src emacs-lisp
     (use-package minibuffer
       :hook
       (minibuffer-setup . +hide-trailing-whitespace)

       :init
       (defun minibuffer-input+ ()
         "Get the input to the last minibuffer prompt."
         (cond ((package! selectrum)
                selectrum--last-input)
               ((package! vertico)
                (car vertico--input))
               (t (buffer-substring-no-properties
                   (line-beginning-position)
                   (line-end-position)))))

       (cl-defsubst +completion-metadata (&optional input)
         (completion-metadata
          (or input
              (buffer-substring (minibuffer-prompt-end)
                                (max (minibuffer-prompt-end) (point))))
          minibuffer-completion-table
          minibuffer-completion-predicate))

       :init ;; Helpers to define completion category dependent bindings.
       (defun define-minibuffer-key+ (key &rest defs)
         "Define KEY conditionally in the minibuffer.
     DEFS is a plist associating completion categories to commands."
         (define-key minibuffer-local-map key
           (list 'menu-item nil defs :filter
                 (lambda (d)
                   (let ((cat (completion-metadata-get
                               (completion-metadata (minibuffer-contents)
                                                    minibuffer-completion-table
                                                    minibuffer-completion-predicate)
                               'category)))
                     (or (plist-get d cat)
                         (plist-get d t)))))))

       :init ;; When completing file names I'd prefer if kill-word killed basename.
       (defvar minibuffer-file-backward-kill-word-kills-basename nil
         "When t trying to kill backwards in `find-file' kills the entire basename.")

       (defun minibuffer-backward-kill-file-name+ (input)
         (interactive (list (minibuffer-input+)))
         (setq input (substitute-in-file-name input))
         (let (;; Append successive kills together instead of replacing them each time.
               (last-command (if (eq last-command 'minibuffer-backward-kill-file-name+)
                                 'kill-region
                               last-command)))
           (if (eq input "/")
               (kill-region (point-max) (- (point-max) 1))
             (let* ((dirname (or (file-name-directory input) ""))
                    (basename (file-name-nondirectory input))
                    (trailing-slash-p (string-suffix-p "/" dirname)))
               (when trailing-slash-p
                 (setq dirname (s-chop-suffix "/" dirname)))

               (cond
                ((not (string-empty-p basename))
                 (if minibuffer-file-backward-kill-word-kills-basename
                     (kill-region (point-max) (- (point-max) (length basename)))
                   (call-interactively #'backward-kill-word)))
                ;; Handle edge cases with last directory or magic tilde.
                ((string-equal dirname "~")
                 (kill-region (point-max)
                              (- (point-max) 1 (if trailing-slash-p 1 0)))
                 (insert (file-name-directory (expand-file-name "~"))))
                ;; Kill from EOL to the cut off point for the previous directory.
                (t
                 (kill-region (point-max)
                              (- (point-max)
                                 (-
                                  (length dirname)
                                  (length (or (file-name-directory dirname) ""))
                                  (if trailing-slash-p -1 0))))))))))

       :config
       (define-minibuffer-key+ (kbd "C-w")
         'file #'minibuffer-backward-kill-file-name+
         t #'backward-kill-word)

       :init
       (defun minibuffer-forward-char-or-exit+ ()
         (interactive)
         (call-interactively (if (eolp)
                                 'exit-minibuffer
                               'forward-char)))

       :init ;; Some more sage advice from the demigods at [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][doom]].
       (defun defer-garbage-collection+ ()
         (setq gc-cons-threshold most-positive-fixnum))

       (defun restore-garbage-collection+ ()
         ;; Deferred so that commands launched immediately after will enjoy the
         ;; benefits.
         (run-at-time
          1 nil (lambda () (setq gc-cons-threshold default-gc-cons-threshold))))

       (add-hook 'minibuffer-setup-hook #'defer-garbage-collection+)
       (add-hook 'minibuffer-exit-hook #'restore-garbage-collection+)

       :general
       ;; There are a *tonne* of minibuffer-completion maps. See [[info:emacs#Minibuffer Maps][minibuffer maps]].
       (:keymaps 'minibuffer-local-map
        "C-j" 'next-line
        "C-k" 'previous-line
        "C-h" 'backward-char
        "C-l" 'minibuffer-forward-char-or-exit+                                      ; exit-minibuffer
        "C-d" 'scroll-up-command
        "C-u" 'scroll-down-command                                                   ; minibuffer-scroll-down-command
        "C-o" 'end-of-buffer
        "M-o" 'beginning-of-buffer                                                   ; minibuffer-beginning-of-buffer
        "M-j" 'next-history-element
        "M-k" 'previous-history-element
        "C-s" 'previous-matching-history-element
        "C-r" 'next-matching-history-element
        "C-a" 'move-beginning-of-line
        "C-e" 'move-end-of-line
        [C-i] "TAB"
        "C-c C-u" 'universal-argument
        "C-v" 'quoted-insert
        "M-DEL" 'kill-whole-line
        "C-c C-j" 'forward-paragraph
        "C-c C-k" 'backward-paragraph

        ;; "C-?" 'minibuffer-completion-help
        ;; "M-h" 'backward-kill-sentence
        ;; "M-l" 'kill-sentence

        "M-l" 'minibuffer-recenter-top-bottom)
       (:keymaps 'minibuffer-local-must-match-map
        "TAB" 'minibuffer-complete
        "<C-tab>" 'minibuffer-complete-and-exit
        "C-j" nil)
       (:keymaps '(minibuffer-local-map
                   minibuffer-local-must-match-map
                   minibuffer-inactive-mode-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map)
        "<escape>" 'abort-recursive-edit))
   #+end_src

*** sorting
    This section declares custom sort functions for various completion categories.
    For the most part I use the following alist to associate specific sorting
    functions with completion categories.

    #+begin_src emacs-lisp
      (defvar +completion-category-sort-func-overrides nil
        "Custom sort functions based on completion categories.")
    #+end_src

    When completing file-names or directories I'd rather have the directories come
    before the files.
    This matches the same format I have for ~ls~ or ~dired~.

    #+begin_src emacs-lisp
      (defvar +directories-before-files-stable nil
        "When true sort directories before files stably.
      This means that when using prescient or a completion framework
      that remembers and re-orders candidates based on frecency, you
      can maintain this relative ordering while still partitioning
      files from directories.

      When disabled the sorting should be closer to ls or [[man:sort][sort]] -V.")

      (defun +directories-before-files (files)
        (if +directories-before-files-stable
            (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
                   (seq-remove (lambda (x) (string-suffix-p "/" x)) files))
          (sort files
                (lambda (x y)
                  (let ((x-dir (eq (aref x (- (length x) 1)) ?/))
                        (y-dir (eq (aref y (- (length y) 1)) ?/)))
                    (cond
                     ((and x-dir y-dir)
                      (string< (directory-file-name x)
                               (directory-file-name y)))
                     (x-dir t)
                     (y-dir nil)
                     (t (string< x y))))))))

      (push `(file . ,#'+directories-before-files)
            +completion-category-sort-func-overrides)
    #+end_src

    And this is just a helper function that can be used by any completion UI to find
    out which sorting function I want for given completion metadata. By default if the
    metadata specifies its own sort function then that takes priority. If this function
    returns ~nil~ then you should use the default sorting function for your completion
    framework.

    #+begin_src emacs-lisp
      (defun +completion-category-sort-func (metadata)
        (or
         (completion-metadata-get metadata 'display-sort-function)
         (alist-get (completion-metadata-get metadata 'category)
                    +completion-category-sort-func-overrides)))
    #+end_src

*** highlighting
    This section declares custom highlight functions based on completion categories.

    #+begin_src emacs-lisp
      (defvar +completion-category-hl-func-overrides nil
        "Custom highlight functions based on completion categories.")
    #+end_src

    File name completions have directories highlighted separately from files.

    #+begin_src emacs-lisp
      (defun +completion-category-highlight-files (cand)
        (let ((len (length cand)))
          (when (and (> len 0)
                     (eq (aref cand (1- len)) ?/))
            (add-face-text-property 0 len 'font-lock-function-name-face 'append cand)))
        cand)

      (push `(file . ,#'+completion-category-highlight-files)
            +completion-category-hl-func-overrides)
    #+end_src

    This function associates a highlight function with the given completion metadata.

    #+begin_src emacs-lisp
      (defun +completion-category-hl-func (metadata)
        (alist-get (completion-metadata-get metadata 'category)
                   +completion-category-hl-func-overrides))
    #+end_src

    Here's something unconventional. Ivy has this thing where the current candidate
    overrides any local faces of the candidate and only shows up using the current
    candidate face (configured by each completion framework) and any faces for the
    query matches. This is actually pretty great for themes that use strong colors
    that may not contrast on each other very well. However this doesn't translate
    well to selectrum or orderless which simply append a new face to the existing
    face spec.

    The following code block makes the current candidate face *override* the existing
    faces of the candidate and then overrides any query faces such as orderless or
    prescient on top of that to make it appear closer to ivy. This has a pretty
    obvious performance hit (especially for long candidates) however because it's
    only done on at most one candidate it should be negligible. That said if you have
    any performance issues you can set ~minibuffer-override-faces+~ to ~nil~ to disable
    this.

    #+begin_src emacs-lisp
      (defvar minibuffer-override-faces+ '(orderless-match-face-0
                                           orderless-match-face-1
                                           orderless-match-face-2
                                           orderless-match-face-3
                                           completions-common-part
                                           completions-first-difference
                                           ;; For some reason `consult' async commands and some regular
                                           ;; commnads such as `completion-in-region' don't use orderless
                                           ;; highlighting.
                                           selectrum-prescient-primary-highlight
                                           selectrum-prescient-secondary-highlight)
        "The faces that should remain on top of the current candidate face.
      Set to nil to disable face overriding.")

      (defvar minibuffer-override-face-ignore+ '(face)
        "List of completion categories to avoid face overriding in.")

      (defun minibuffer-override-face-chunks+ (str)
        "Find regions in STR where a different face should be applied."
        ;; TODO: use `next-single-property-change'.
        (cl-loop for i from 0 to (length str)
                 with last-face = nil
                 with current-face = nil
                 do (setq current-face
                          (when-let ((face (get-text-property i 'face str)))
                            (if (listp face) (car face) face)))
                 with seq-range = nil
                 when (and current-face (member current-face minibuffer-override-faces+))
                   when seq-range
                     when (eq current-face last-face)
                       ;; Incremenet existing sequence
                       do (setcdr seq-range i)
                     else
                       ;; Finished previous sequence and started a new one
                       collect (cons last-face seq-range)
                       and do (setq seq-range (cons i i))
                     end
                   else
                     do (setq seq-range (cons i i))
                   end
                 else when seq-range
                   collect (cons last-face seq-range)
                   and do (setq seq-range nil)
                 end
                 do (setq last-face current-face)))

      (defun minibuffer-override-face+ (current-face str)
        (when (and minibuffer-override-faces+
                   (not (member (completion-metadata-get (+completion-metadata) 'category)
                                minibuffer-override-face-ignore+)))
          (let ((copied (copy-sequence str)))
            (if (version< emacs-version "27")
                (font-lock-prepend-text-property 0 (length copied) 'face current-face copied)
              (add-face-text-property 0 (length copied) current-face nil copied))

            (dolist (seq (minibuffer-override-face-chunks+ str))
              (cl-destructuring-bind (face . (start . end))
                  seq
                (if (version< emacs-version "27")
                    (font-lock-prepend-text-property start end 'face face copied)
                  (add-face-text-property start (1+ end) face nil copied))))
            copied)))
    #+end_src

** minibuffer-depth
   #+BEGIN_SRC emacs-lisp
     (use-package mb-depth
       :demand t
       :defer 50
       :config
       (minibuffer-depth-indicate-mode))
   #+END_SRC

** macros
   emacs macro facilities configuration.

   #+BEGIN_SRC emacs-lisp
     (leader-set-keys
       "k"  '(:ignore t :wk "macros/lisp"))

     ;; remove mode-line-indicator for macros
     (setq mode-line-defining-kbd-macro nil)
   #+END_SRC

*** kmacro
    #+BEGIN_SRC emacs-lisp
      (use-package kmacro
        :leader
        (:prefix "k"
         ;; 'edit-kbd-macro ;; any named macro
         ;; 'apply-macro-to-region-lines
         "s" 'name-last-kbd-macro
         "i" 'insert-kbd-macro
         "q" 'kbd-macro-query ;; prompt at macro point

         "c"  '(:ignore t :wk "counter")
         "cs" 'kmacro-set-counter
         "c=" 'kmacro-set-counter
         "cc" 'kmacro-insert-counter
         "ci" 'kmacro-insert-counter
         "ca" 'kmacro-add-counter
         "c+" 'kmacro-add-counter
         "cf" 'kmacro-set-format))
    #+END_SRC

*** edmacro
    #+BEGIN_SRC emacs-lisp
      (use-package edmacro
        :commands (edmacro-mode)
        :leader
        (:prefix "k"
         ;; 'kmacro-edit-lossage                                                      ; edit last 300 strokes as macro
         ;; 'kmacro-step-edit-macro                                                   ; debug last macro
         "SPC" 'kmacro-edit-macro                                                     ; last defined
         "b"   'kmacro-bind-to-key)

        :config
        (leader-set-keys-for-major-mode 'edmacro-mode
          "," 'edmacro-finish-edit
          "i" 'edmacro-insert-key))
    #+END_SRC

** message
   #+BEGIN_SRC emacs-lisp
     (use-package message
       :custom
       (message-auto-save-directory (share! "messages/"))
       ;; (message-signature "Mohsin")
       (message-signature-file (+mail-conf-get 'signature-file))
       (message-kill-buffer-on-exit t)

       :leader
       ("ac" 'message-mail)

       :lazy-leader
       (:mode 'message-mode
        leader-major-mode-key 'message-send-and-exit
        "q" 'message-kill-buffer
        "r" 'message-dont-send
        "s" 'message-send)
       (:mode 'notmuch-message-mode
        leader-major-mode-key 'notmuch-mua-send-and-exit
        "q" 'notmuch-mua-kill-buffer
        "s" 'notmuch-mua-send)
       (:mode '(message-mode notmuch-message-mode)
        "a" 'mml-attach-file
        "p" 'message-yank-original
        "P" 'message-fill-yanked-message

        "g" '(:ignore t :wk "goto")
        "gb" 'message-goto-body
        "gs" 'message-goto-subject
        "gt" 'message-goto-to
        "gc" 'message-goto-cc
        "gb" 'message-goto-bcc
        "gr" 'message-goto-reply-to
        "gf" 'message-goto-followup-to
        "gF" 'message-goto-fcc
        "gz" 'message-goto-signature))
   #+END_SRC

*** smtpmail
    Is what we use to send messages through an appropriate SMTP server.

    The builtin implementation is decent but it doesn't support multiple accounts so
    I haven't configured any default SMTP servers here.

    #+BEGIN_SRC emacs-lisp
      (use-package smtpmail
        :custom
        (smtpmail-queue-dir (share! "mail/queued")))
    #+END_SRC

    ~smtpmail-multi~ is an alternative to smtpmail which does support multiple
    accounts. It doesn't re-implement the same general logic of the ~smtpmail~
    package instead it just switches the default variables used based on which
    account the mail is being sent through.

    #+BEGIN_SRC emacs-lisp
      (use-package smtpmail-multi
        :straight t
        :custom
        (send-mail-function 'smtpmail-multi-send-it)
        (message-send-mail-function 'smtpmail-multi-send-it)

        (smtpmail-multi-default-account (caar +mail-conf))
        (smtpmail-multi-associations
         (cl-loop
          for (it . conf) in +mail-conf
          collect (list (regexp-quote (+mail-conf-email conf)) it)))
        (smtpmail-multi-accounts
         (cl-loop
          for (it . conf) in +mail-conf
          collect (cons it
                        `(,(+mail-conf-get 'user conf)
                          ,(+mail-conf-get 'smtp-host conf)
                          ,@(+mail-conf-get 'smtp-args conf)))))

        (with-eval-after-load 'smtpmail
          (require 'smtpmail-multi)))
    #+END_SRC

*** mml
    GPG support for message mail.

    #+begin_src emacs-lisp
      (use-package mml
        ;; :hook
        ;; (;; (message-setup . mml-secure-sign-pgpmime)
        ;;  (message-setup . mml-secure-message-sign-pgpmime))

        :custom
        (mml-secure-openpgp-sign-with-sender t)

        :leader
        (:mode '(message-mode notmuch-message-mode)
         :prefix "m"
         "" '(:ignore t :wk "mml")
         "m" 'mml-secure-message-encrypt ; Encrypt and sign
         "s" 'mml-secure-message-sign ; sign
         "x" 'mml-unsecure-message))
    #+end_src

** mode-line
   Here we define customisation options and other helpers for building mode-lines.

   #+BEGIN_SRC emacs-lisp
     (defface +mode-line-major-mode
       `((t (:inherit bold)))
       ""
       :group '+mode-line)

     (defface +mode-line-buffer-name
       `((t (:inherit bold)))
       ""
       :group '+mode-line)

     (defface +mode-line-buffer-minor-mode
       `((t (:inherit mode-line)))
       ""
       :group '+mode-line)

     (defface +mode-line-evil-normal-state   `((t (:inherit mode-line))) "Highlight face for `mode-line' when in `evil-normal-state'.")
     (defface +mode-line-evil-emacs-state    `((t (:inherit mode-line))) "Highlight face for `mode-line' when in `evil-emace-state'.")
     (defface +mode-line-evil-insert-state   `((t (:inherit mode-line))) "Highlight face for `mode-line' when in `evil-insert-state'.")
     (defface +mode-line-evil-motion-state   `((t (:inherit mode-line))) "Highlight face for `mode-line' when in `evil-motion-state'.")
     (defface +mode-line-evil-visual-state   `((t (:inherit mode-line))) "Highlight face for `mode-line' when in `evil-visual-state'.")
     (defface +mode-line-evil-operator-state `((t (:inherit mode-line))) "Highlight face for `mode-line' when in `evil-operator-state'.")
     (defface +mode-line-evil-replace-state  `((t (:inherit mode-line))) "Highlight face for `mode-line' when in `evil-replace-state'.")

     (defface +mode-line-minibuffer-face
       `((t (:inherit +mode-line-evil-emacs-state)))
       "highlight face for doom-modeline when minibuffer is active"
       :group '+mode-line)

     (defface +mode-line-host-face
       '((t (:italic t)))
       "Face for remote hosts in the mode-line."
       :group '+mode-line)

     (defface +mode-line-linter-info
       '((t (:inherit compilation-mode-line-exit)))
       ""
       :group '+mode-line)

     (defface +mode-line-linter-warning
       '((t (:inherit compilation-mode-line-run)))
       ""
       :group '+mode-line)

     (defface +mode-line-linter-error
       '((t (:inherit compilation-mode-line-fail)))
       ""
       :group '+mode-line)
   #+END_SRC

*** anzu
    #+BEGIN_SRC emacs-lisp
      (defun +mode-line-anzu ()
        (when (and (boundp 'anzu--state) anzu--state)
          (cond ((eq anzu--state 'replace-query)
                 (format " Replace: %d" anzu--cached-count))
                (anzu--overflow-p
                 (format " %d/%d+" anzu--current-position anzu--total-matched))
                (t
                 (format " %d/%d" anzu--current-position anzu--total-matched)))))
    #+END_SRC

*** buffer-name
     #+BEGIN_SRC emacs-lisp
       (defvar +mode-line-buffer-id-max-length 25
         "Truncate the buffer-id when it's larger than this many characters.
       Set to nil to disable buffer-name truncation.")

       (defvar +mode-line-buffer-id-ellipses "..."
         "Suffix to be attached to truncated buffer names.")
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (defun +mode-line-buffer-name ()
         (propertize
          (s-truncate +mode-line-buffer-id-max-length
                      (format-mode-line "%b")
                      +mode-line-buffer-id-ellipses)
          'face '+mode-line-buffer-name))
     #+END_SRC

*** buffer-encoding
    #+BEGIN_SRC emacs-lisp
      (defun +mode-line-buffer-eol ()
        (concat
         " "
         (let ((eol (coding-system-eol-type buffer-file-coding-system)))
           (propertize
            (pcase eol
              (0 "LF")
              (1 "CRLF")
              (2 "CR")
              (_ ""))
            'mouse-face 'mode-line-highlight
            'help-echo (format "End-of-line style: %s\nmouse-1: Cycle"
                               (pcase eol
                                 (0 "Unix-style LF")
                                 (1 "DOS-style CRLF")
                                 (2 "Mac-style CR")
                                 (_ "Undecided")))
            'local-map (let ((map (make-sparse-keymap)))
                         (define-key map [mode-line mouse-1] 'mode-line-change-eol)
                         map)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun +mode-line-buffer-encoding ()
        "Displays the eol and the encoding style of the buffer the same way Atom does."
        (concat
         " "
         (let* ((sys (coding-system-plist buffer-file-coding-system))
                (cat (plist-get sys :category))
                (sym (if (memq cat
                               '(coding-category-undecided coding-category-utf-8))
                         'utf-8
                       (plist-get sys :name))))
           (propertize
            (upcase (symbol-name sym))
            'mouse-face 'mode-line-highlight
            'help-echo 'mode-line-mule-info-help-echo
            'local-map mode-line-coding-system-map))))
    #+END_SRC

*** buffer-icon
    When available we should try to show an icon for the current file.

    #+BEGIN_SRC emacs-lisp
      (defvar-local +mode-line-buffer-file-icon nil)
      (defun +mode-line-update-buffer-file-icon (&rest _)
        "Update file icon in `mode-line'."
        (setq +mode-line-buffer-file-icon
              (when (and +icons-available (featurep 'all-the-icons))
                (let ((icon (+icon-for buffer (current-buffer) :face nil)))
                  (propertize (if (or (null icon) (symbolp icon))
                                  (+icon nerd-fa "file-o" :face nil)
                                icon)
                              'help-echo (format "Major-mode: %s" (format-mode-line mode-name))
                              'display '(raise -0.135))))))

      (add-hook 'find-file-hook #'+mode-line-update-buffer-file-icon)
      (add-hook 'after-change-major-mode-hook #'+mode-line-update-buffer-file-icon)
      (add-hook 'clone-indirect-buffer-hook #'+mode-line-update-buffer-file-icon)
    #+END_SRC

*** buffer-size
    #+BEGIN_SRC emacs-lisp
      (defsubst +mode-line-buffer-size ()
        "Show buffer size."
        (when size-indication-mode
          (concat " "
                  (propertize "%I"
                              'help-echo "Buffer size
      mouse-1: Display Line and Column Mode Menu"
                              'mouse-face 'mode-line-highlight
                              'local-map mode-line-column-line-number-mode-map))))
    #+END_SRC

*** evil-face
    #+BEGIN_SRC emacs-lisp
      (defsubst +mode-line-evil-face ()
        (if (active-minibuffer-window)
            '+mode-line-minibuffer-face
          (if (bound-and-true-p evil-local-mode)
              (cond
               ((evil-normal-state-p)   '+mode-line-evil-normal-state)
               ((evil-emacs-state-p)    '+mode-line-evil-emacs-state)
               ((evil-insert-state-p)   '+mode-line-evil-insert-state)
               ((evil-motion-state-p)   '+mode-line-evil-motion-state)
               ((evil-visual-state-p)   '+mode-line-evil-visual-state)
               ((evil-operator-state-p) '+mode-line-evil-operator-state)
               ((evil-replace-state-p)  '+mode-line-evil-replace-state)
               (t                       '+mode-line-evil-normal-state))
            '+mode-line-evil-normal-state)))
    #+END_SRC

*** evil-register
    Detect and display the current evil-register and the register under which a macro
    is currently being recorded... so for example if I hit ="r= than my mode-line can
    output show that sequence to let me know which register I'm working with. Similar
    story for a macro and if I select a register within a macro it should say =@q "a=.

    #+BEGIN_SRC emacs-lisp
      (defconst +mode-line-macro-symbol "@")
      (defconst +mode-line-register-symbol "\"")

      (defun +mode-line-evil-macro-and-register ()
        (concat (when defining-kbd-macro
                  (concat " "
                          +mode-line-macro-symbol
                          (when (bound-and-true-p evil-this-macro)
                            (string evil-this-macro))))
                (when (bound-and-true-p evil-this-register)
                  (concat " "
                          +mode-line-register-symbol
                          (char-to-string evil-this-register)))))
    #+END_SRC

*** evil-matches
    #+BEGIN_SRC emacs-lisp
      (defsubst +mode-line-evil-substitute ()
        "Show number of matches for evil-ex substitutions and highlights in real time."
        (when (and (bound-and-true-p evil-local-mode)
                   (or (assq 'evil-ex-substitute evil-ex-active-highlights-alist)
                       (assq 'evil-ex-global-match evil-ex-active-highlights-alist)
                       (assq 'evil-ex-buffer-match evil-ex-active-highlights-alist)))
          (let ((range (if evil-ex-range
                           (cons (car evil-ex-range) (cadr evil-ex-range))
                         (cons (line-beginning-position) (line-end-position))))
                (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
            (if pattern
                (format " %s matches" (how-many pattern (car range) (cdr range)))
              " -"))))
    #+END_SRC

*** winum+evil-state
    #+BEGIN_SRC emacs-lisp
      (defun +mode-line-winum ()
        (let* ((face (+mode-line-evil-face))
               (space (propertize " " 'face face)))
          (concat space
                  (when (> (length (frames-on-display-list)) 1)
                    (propertize (format-mode-line (mode-line-frame-control))
                                'face `(:weight bold :inherit ,face)))
                  (propertize
                   (cond
                    ((active-minibuffer-window) "‚óè")
                    ((bound-and-true-p winum-mode)
                     (substring-no-properties (winum-get-number-string)))
                    ((bound-and-true-p ace-window-display-mode)
                     (aw-update)
                     (window-parameter (selected-window) 'ace-window-path))
                    ((bound-and-true-p window-numbering-mode)
                     (window-numbering-get-number-string))
                    (t " "))
                   'face face)
                  space)))
    #+END_SRC

*** version-control
    Extract and display version-control information related to the current buffer. For
    git this includes a GitHub icon and the current git branch. For SVN... I have no
    idea, if I ever use a project that has SVN I may well find out :stuck_out_tongue:.

    #+BEGIN_SRC emacs-lisp
      (defvar-local +mode-line-vc-text nil
        "The version control status for the current buffer.
      Adapted from `mood-line'.")

      (defun +mode-line--update-vc-status ()
        (setq +mode-line-vc-text
              (when (and vc-mode buffer-file-name)
                (let* ((backend (vc-backend buffer-file-name))
                       (state (vc-state buffer-file-name backend)))
                  (cl-destructuring-bind (icon . face)
                      (cond ((memq state '(edited added))
                             (cons "+" 'compilation-mode-line-exit))
                            ((eq state 'needs-merge)
                             (cons "‚Üê" 'compilation-mode-line-run))
                            ((eq state 'needs-update)
                             (cons "‚Üë" 'compilation-mode-line-run))
                            ((memq state '(removed conflict unregistered))
                             (cons "‚úñ" 'compilation-mode-line-fail))
                            ;; (t (propertize "‚úî" 'face face))
                            (t (cons nil nil)))
                    ;; Hide when there's nothing out of the ordinary to show.
                    (when icon
                      (apply #'propertize
                             (concat (when icon
                                       (apply #'propertize (concat icon " ")
                                              (text-properties-at 0 vc-mode)))
                                     (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2)))
                             `(,@(when face (list 'face face))
                               mouse-face mode-line-highlight))))))))

      ;; Hooks to auto-update vc status alongside the buffer.
      (add-hook 'find-file-hook #'+mode-line--update-vc-status)
      (add-hook 'after-save-hook #'+mode-line--update-vc-status)
      (advice-add #'vc-refresh-state :after #'+mode-line--update-vc-status)
    #+END_SRC

*** checkers
    Next on the list are icons/status-info for the current linter/syntax-highlighter
    for the buffer you're in. This can come from either [[https://www.flycheck.org/en/latest/][flycheck]] or [[https://www.gnu.org/software/emacs/manual/html_node/flymake/Using-Flymake.html#Using-Flymake][GNU flymake]] but
    I *don't* recommend having both active simultaneously.

    These are hard coded indicators which are substituted as is when applicable.

    #+BEGIN_SRC emacs-lisp
      (defconst +mode-line-checker-running
        (propertize " Œî Checking" 'face 'compilation-mode-line-run))

      (defconst +mode-line-checker-failed
        (propertize " ‚úñ Error" 'face 'compilation-mode-line-fail))

      (defconst +mode-line-checker-interrupted
        " ‚è∏ Paused")
    #+END_SRC

    The actual error, info and warning indicators are shown as bullets using
    following format.

    #+BEGIN_SRC emacs-lisp
      (defconst +mode-line-checker-bullet "‚Ä¢"
        "The bullet used for each section of a `flymake'/`flycheck' segment.")
    #+END_SRC

     Lastly lets just add a helper method to format any checker diagnostics
     in a way that looks pretty *and* can be substituted back into the mode-line.

     #+BEGIN_SRC emacs-lisp
       (defsubst +mode-line-format-a-diagnostic (count icon face running)
         (setq count
               (cond
                (count (number-to-string count))
                (running "?")))
         (and count
              (propertize
               (concat
                (if (featurep 'all-the-icons)
                    (all-the-icons-pad+
                     (+icon nerd-mdi icon))
                  +mode-line-checker-bullet)
                count)
               'face face)))

       (defsubst +mode-line-format-diagnostics (_meta diags &optional running)
         "Format DIAGS into a string for the mode-line.
       DIAGS should be an alist of error, warning, and info.
       META is meta-data associated with the checker (see `flymake').
       RUNNING indicates that more results may be pending."
         (let-alist diags
           (let ((msg (s-join
                       " "
                       (delq nil
                             (list
                              (+mode-line-format-a-diagnostic .info    "alert-box"          '+mode-line-linter-info running)
                              (+mode-line-format-a-diagnostic .warning "multiplication-box" '+mode-line-linter-warning running)
                              (+mode-line-format-a-diagnostic .error   "minus-box"          '+mode-line-linter-error running))))))
             (unless (string-empty-p msg)
               (concat " " msg )))))
     #+END_SRC

**** flycheck
     #+BEGIN_SRC emacs-lisp
       (defvar-local +mode-line-flycheck-text nil)
       (defun +mode-line--update-flycheck (&optional status)
         (setq +mode-line-flycheck-text
               (concat
                ;; (pcase status
                ;;   ;; ('finished)
                ;;   ('running +mode-line-checker-running)
                ;;   ('errored +mode-line-checker-failed)
                ;;   ('interrupted +mode-line-checker-interrupted)
                ;;   ('no-checker nil))
                (unless (member status '(errored no-checker))
                  (when flycheck-current-errors
                    (+mode-line-format-diagnostics
                     nil
                     (flycheck-count-errors flycheck-current-errors)
                     (eq status 'running)))))))

       (add-hook 'flycheck-status-changed-functions #'+mode-line--update-flycheck)
       (add-hook 'flycheck-mode-hook #'+mode-line--update-flycheck)
     #+END_SRC

**** flymake
     #+BEGIN_SRC emacs-lisp
       (defun +mode-line--count-flymake-diagnostics ()
         (cl-loop with idx = nil
                  with acc = (make-vector 3 0)                                   ; See (flymake--severity :error)
                  for diag in (flymake-diagnostics)
                  do (setq idx (- (flymake--severity (flymake-diagnostic-type diag)) 1))
                  when (and (>= idx 0)
                            (<  idx 3))
                  do (aset acc idx (1+ (aref acc idx)))
                  finally return
                  (seq-filter (lambda (a) (not (eq (cdr a) 0)))
                              `((info    . ,(aref acc 0))
                                (warning . ,(aref acc 1))
                                (error   . ,(aref acc 2))))))

       (defvar-local +mode-line-flymake-text nil)
       (defun +mode-line--update-flymake-text (&rest _)
         ;; See [[https://www.gnu.org/software/emacs/manual/html_node/flymake/Syntax-check-statuses.html#Syntax-check-statuses][here]].
         (setq +mode-line-flymake-text
               (let* (;; (known (and flymake--backend-state
                      ;;             (hash-table-keys flymake--backend-state)))
                      (running (flymake-running-backends))
                      (disabled (flymake-disabled-backends))
                      (reported (flymake-reporting-backends))
                      (all-disabled (and disabled (null running)))
                      (some-waiting (cl-set-difference running reported)))
                 (concat
                  ;; (cond
                  ;;  (some-waiting +mode-line-checker-running)
                  ;;  (all-disabled +mode-line-checker-interrupted))
                  (unless all-disabled
                    (+mode-line-format-diagnostics
                     ;; TODO: Do something with the status-text.
                     ;; (cond ((null known)
                     ;;        (propertize "?" 'face meta-face))
                     ;;       (some-waiting
                     ;;        (propertize "%" 'face meta-face))
                     ;;       (all-disabled
                     ;;        (propertize "!" 'face error-face)))
                     nil
                     (+mode-line--count-flymake-diagnostics)
                     some-waiting))))))

       (advice-add #'flymake--handle-report :after #'+mode-line--update-flymake-text)
       (advice-add #'flymake-mode :after
                   (defun +mode-line--hide-on-flymake-exit (&rest _)
                     ;; `flymake--handle-report' isn't called on exit.
                     (unless (bound-and-true-p flymake-mode)
                       (setq +mode-line-flymake-text nil))))
     #+END_SRC

*** language-server
    Emacs has a few language-server packages. More recent variants are implementations
    of the [[https://microsoft.github.io/language-server-protocol/][lsp-protocol]] for which emacs has 2 mainstream client implementations [[https://microsoft.github.io/language-server-protocol/][lsp-mode]]
    and [[https://github.com/joaotavora/eglot][eglot]]. There's also some +older+ *more-established* language server packages such
    [[https://github.com/mopemope/meghanada-emacs][meghanada-mode]] or [[https://github.com/pythonic-emacs/anaconda-mode][anaconda-mode]].

    Each of these functions return a plist containing a server status message, some
    meta-information (eg. server-name or server-port) and a face that should be
    attached to it.

    Much of these were partially adapted from: [[https://github.com/seagle0128/doom-modeline/blob/af5f61888e7eb0aa521d2d29b42221302b717915/doom-modeline-segments.el#L1871][doom-modeline]].

**** lsp-mode
     #+BEGIN_SRC emacs-lisp
       (defvar-local +mode-line-lsp-text nil)
       (defun +mode-line--update-lsp ()
         (setq +mode-line-lsp-text
               (let* ((workspaces (lsp-workspaces)))
                 (propertize (all-the-icons-pad+
                              (+icon nerd-fa "rocket"
                                     :face (if workspaces
                                               nil
                                             'compilation-mode-line-fail)))
                             'help-echo
                             (if workspaces
                                 (concat "LSP Connected "
                                         (string-join
                                          (mapcar (lambda (w)
                                                    (format "[%s]\n" (lsp--workspace-print w)))
                                                  workspaces))
                                         "C-mouse-1: Switch to another workspace folder
       mouse-1: Describe current session
       mouse-2: Quit server
       mouse-3: Reconnect to server")
                               "LSP Disconnected
       mouse-1: Reload to start server")
                             'mouse-face 'mode-line-highlight
                             'local-map (let ((map (make-sparse-keymap)))
                                          (if workspaces
                                              (progn
                                                (define-key map [mode-line C-mouse-1]
                                                  #'lsp-workspace-folders-open)
                                                (define-key map [mode-line mouse-1]
                                                  #'lsp-describe-session)
                                                (define-key map [mode-line mouse-2]
                                                  #'lsp-workspace-shutdown)
                                                (define-key map [mode-line mouse-3]
                                                  #'lsp-workspace-restart))
                                            (progn
                                              (define-key map [mode-line mouse-1]
                                                (lambda ()
                                                  (interactive)
                                                  (ignore-errors (revert-buffer t t))))))
                                          map)))))
       (add-hook 'lsp-before-initialize-hook #'+mode-line--update-lsp)
       (add-hook 'lsp-after-initialize-hook #'+mode-line--update-lsp)
       (add-hook 'lsp-after-uninitialized-functions #'+mode-line--update-lsp)
       (add-hook 'lsp-before-open-hook #'+mode-line--update-lsp)
       (add-hook 'lsp-after-open-hook #'+mode-line--update-lsp)
     #+END_SRC

**** eglot
     #+BEGIN_SRC emacs-lisp
       (defvar-local +mode-line-eglot-text nil)
       (defun +mode-line--update-eglot (&rest _)
         "Update `eglot' state."
         (setq +mode-line-eglot-text
               (when (bound-and-true-p eglot--managed-mode)
                 (pcase-let* ((server (eglot-current-server))
                              (nick (and server (eglot--project-nickname server)))
                              (pending (and server (hash-table-count
                                                    (jsonrpc--request-continuations server))))
                              (`(,_id ,doing ,done-p ,detail) (and server (eglot--spinner server)))
                              (last-error (and server (jsonrpc-last-error server)))
                              (face (cond (last-error 'compilation-mode-line-fail)
                                          ((and doing (not done-p)) nil)
                                          ((and pending (cl-plusp pending)) 'compilation-mode-line-run)
                                          (nick nil)
                                          (t 'compilation-mode-line-run))))
                   (propertize (all-the-icons-pad+ (+icon nerd-fa "rocket" :face face))
                               'help-echo (cond
                                           (last-error
                                            (format "EGLOT\nAn error occured: %s
             mouse-3: Clear this status" (plist-get last-error :message)))
                                           ((and doing (not done-p))
                                            (format "EGLOT\n%s%s" doing
                                                    (if detail (format "%s" detail) "")))
                                           ((and pending (cl-plusp pending))
                                            (format "EGLOT\n%d outstanding requests" pending))
                                           (nick (format "EGLOT Connected (%s/%s)
             C-mouse-1: Go to server errors
             mouse-1: Go to server events
             mouse-2: Quit server
             mouse-3: Reconnect to server" nick (eglot--major-mode server)))
                                           (t "EGLOT Disconnected
             mouse-1: Start server"))
                               'mouse-face 'mode-line-highlight
                               'local-map (let ((map (make-sparse-keymap)))
                                            (cond (last-error
                                                   (define-key map [mode-line mouse-3]
                                                     #'eglot-clear-status))
                                                  ((and pending (cl-plusp pending))
                                                   (define-key map [mode-line mouse-3]
                                                     #'eglot-forget-pending-continuations))
                                                  (nick
                                                   (define-key map [mode-line C-mouse-1]
                                                     #'eglot-stderr-buffer)
                                                   (define-key map [mode-line mouse-1]
                                                     #'eglot-events-buffer)
                                                   (define-key map [mode-line mouse-2]
                                                     #'eglot-shutdown)
                                                   (define-key map [mode-line mouse-3]
                                                     #'eglot-reconnect))
                                                  (t (define-key map [mode-line mouse-1]
                                                       #'eglot)))
                                            map))))))
       (add-hook 'eglot--managed-mode-hook #'+mode-line--update-eglot)
       (add-hook 'eglot-connect-hook #'+mode-line--update-eglot)
     #+END_SRC

*** project
    Discover the name of the current buffers project.

    #+BEGIN_SRC emacs-lisp
      (defun +mode-line-project ()
        (cond
         ((fboundp 'projectile-project-name)
          (let ((project-name (projectile-project-name)))
            (unless (or (string= project-name "-")
                        (string= project-name (buffer-name)))
              project-name)))
         ((fboundp 'project-current)
          (cdr (project-current)))))
    #+END_SRC

*** segments
    This section groups functions from the previous sections into standalone
    functions so the mode-line is nicer to read.

    #+BEGIN_SRC emacs-lisp
      (defun +mode-line-matches ()
        (let ((meta (concat (+mode-line-evil-macro-and-register)
                            (+mode-line-anzu)
                            (+mode-line-evil-substitute))))
          (or (and (not (string-empty-p meta)) meta)
              (+mode-line-buffer-size))))

      (defun +mode-line-misc-info ()
        (let ((misc-info (s-trim (format-mode-line mode-line-misc-info 'file-name-shadow))))
          (unless (string-empty-p misc-info)
            (concat " " misc-info))))

      (defun +mode-line-status-icons ()
        (let ((msg (concat (and (buffer-narrowed-p)
                                (featurep 'all-the-icons)
                                (all-the-icons-pad+ (+icon nerd-mdi "eye")))
                           +mode-line-eglot-text
                           +mode-line-lsp-text)))
          (unless (string-empty-p msg)
            (concat " " msg))))
    #+END_SRC

*** visual-selection
    #+BEGIN_SRC emacs-lisp
      (defvar +mode-line-show-word-count nil)

      (defsubst +mode-line-column (pos)
        "Get the column of the position `POS'."
        (save-excursion (goto-char pos)
                        (current-column)))

      (defun +mode-line-selection-info ()
        "Information about the current selection, such as how many characters and
      lines are selected, or the NxM dimensions of a block selection."
        (when (and (or mark-active
                       (and (bound-and-true-p evil-local-mode)
                            (eq evil-state 'visual))))
          (cl-destructuring-bind (beg . end)
              (if (and (bound-and-true-p evil-local-mode)
                       (eq evil-state 'visual))
                  (cons evil-visual-beginning evil-visual-end)
                (cons (region-beginning) (region-end)))
            (propertize
             (let ((lines (count-lines beg (min end (point-max)))))
               (concat " "
                       (cond ((or (bound-and-true-p rectangle-mark-mode)
                                  (and (bound-and-true-p evil-visual-selection)
                                       (eq 'block evil-visual-selection)))
                              (let ((cols (abs (- (+mode-line-column end)
                                                  (+mode-line-column beg)))))
                                (format "%dx%dB" lines cols)))
                             ((and (bound-and-true-p evil-visual-selection)
                                   (eq evil-visual-selection 'line))
                              (format "%dL" lines))
                             ((> lines 1)
                              (format "%dC %dL" (- end beg) lines))
                             ((format "%dC" (- end beg))))
                       (when +mode-line-show-word-count
                         (format " %dW" (count-words beg end)))))
             'face 'mode-line-emphasis))))
    #+END_SRC

*** window-width
    Support hiding some sections of the mode-line when the window isn't wide enough.
    Adapted from ~doom-modeline-window-size-change-function~.

    #+begin_src emacs-lisp
      (defvar +mode-line-window-width-limit fill-column
        "The limit of the window width.
      If `window-width' is smaller than the limit, some information won't be
      displayed.")
    #+end_src

    #+begin_src emacs-lisp
      (defvar-local +mode-line-wide-p t)
      (defun +mode-line-window-size-change-function (&rest _)
        "Function for `window-size-change-functions'."
        (setq +mode-line-wide-p
              (not
               (and (numberp +mode-line-window-width-limit)
                    (<= (+ (window-total-width)
                           (or scroll-bar-width 0)
                           (or left-fringe-width 0)
                           (or right-fringe-width 0)
                           (or left-margin-width 0)
                           (or right-margin-width 0))
                        +mode-line-window-width-limit)))))

      (add-hook 'window-size-change-functions #'+mode-line-window-size-change-function)
      (add-hook 'buffer-list-update-hook #'+mode-line-window-size-change-function)
    #+end_src

*** format
    My personal mode-line configuration (distinct from both doom and Spacemacs).
    This was mostly inspired by [[https://gitlab.com/jessieh/mood-line/-/tree/master][mood-line]], a fork of doom-modeline with a much
    simpler design.

    First lets enable some useful minor modes to toggles some mode-line indicators.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'emacs-startup-hook 'size-indication-mode)
      (add-hook 'emacs-startup-hook 'column-number-mode)
    #+END_SRC

    Here are the actual sections of my mode-line, divided into left and right sides.
    NOTE: These will be evaluated twice so any % sequences must be escaped.

    #+BEGIN_SRC emacs-lisp
      (defvar mode-line-left+
        '((:eval (+mode-line-winum))
          (:eval (+mode-line-matches))
          " [%*] "
          (+mode-line-buffer-file-icon
           ((:eval (all-the-icons-pad-on-tty-advice+
                    +mode-line-buffer-file-icon))
            " "))
          (:eval (+mode-line-buffer-name))
          (default-directory
           (:propertize (:eval (when-let ((host (file-remote-p default-directory 'host)))
                                 (concat "@" host)))
            face +mode-line-host-face))
          (mode-line-process
           (:propertize (" " mode-line-process)
            face +mode-line-buffer-minor-mode))
          (:eval (+mode-line-selection-info))
          (:eval (or +mode-line-flymake-text
                     +mode-line-flycheck-text))
          " ")
        "The left hand side of my customized mode-line.")

      (defvar mode-line-right+
        '((:eval +mode-line-vc-text)
          (:eval (+mode-line-status-icons))
          (:propertize ("" minor-mode-alist)
           face +mode-line-buffer-minor-mode
           mouse-face mode-line-highlight
           help-echo "Minor mode
        mouse-1: Display minor mode menu
        mouse-2: Show help for minor mode
        mouse-3: Toggle minor modes"
           local-map ,mode-line-minor-mode-keymap)
          (:eval (+mode-line-misc-info))
          (+mode-line-wide-p
           (:eval (+mode-line-buffer-eol)))
          (+mode-line-wide-p
           (:eval (+mode-line-buffer-encoding)))
          (+mode-line-wide-p
           (line-number-mode
            (column-number-mode " %l:%c" " %l")
            (column-number-mode " :%c")))
          (" " mode-line-percent-position)
          " "
          (:propertize mode-name
           face +mode-line-major-mode)
          " ")
        "The right hand side of my customized mode-line.")
    #+END_SRC

    This is the helper function which actually formats and renders the mode-line,
    spacing the two sections equally.

    #+BEGIN_SRC emacs-lisp
      (defun +mode-line-right-align (right)
        "Return a string that's wide enough to right align RIGHT."
        (propertize " "
                    'display `((space
                                :align-to
                                (- (+ right right-fringe right-margin)
                                   ;; Fix annoying space inconsistency in text terminals due to fringe.
                                   ,(if (and (not (display-graphic-p))
                                             (window-at-side-p nil 'right))
                                        0
                                      1)
                                   ;; WARN: Requires double evaluation of RHS forms for spacing.
                                   ,(string-width (format-mode-line (cons "" right))))))))
    #+END_SRC

    And now we finally assign the mode-line format.

    #+BEGIN_SRC emacs-lisp
      (setq-default
       mode-line-format
       `((:eval mode-line-left+)
         (:eval (+mode-line-right-align mode-line-right+))
         (:eval mode-line-right+)))

      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (setq mode-line-format (default-value 'mode-line-format))))
    #+END_SRC

** occur
   See all occurrences of a search query in the current buffer, with support to jumping
   to the next or previous query and even editing them on the fly.

   #+BEGIN_SRC emacs-lisp
     (use-package replace
       :straight (replace :type built-in)
       :custom
       ;; By default highlight to the end of the line.
       (occur-highlight-regexp (rx (zero-or-more any) eol))

       :config
       ;; occur-mode-display-occurrence
       (advice-add 'occur-mode-display-occurrence :around
                   #'display-buffer-no-select-window-advice)

       (defun evil-adjust-occur-next ()
         (interactive)
         (with-evil-adjust-to-eol
           (funcall-interactively 'occur-next)))

       (defun evil-adjust-occur-prev ()
         (interactive)
         (with-evil-adjust-to-eol
           (funcall-interactively 'occur-prev)))

       (evil-set-initial-state 'occur-mode 'motion)
       (evil-set-initial-state 'occur-edit-mode 'normal)

       :lazy-leader
       (:modes '(occur-mode occur-edit-mode)
        "e" 'occur-edit-mode
        "R" 'occur-rename-buffer
        "g" 'occur-mode-goto-occurrence
        "G" 'occur-mode-goto-occurrence-other-window
        "l" 'occur-mode-display-occurrence)
       (:modes 'occur-edit-mode
        "," 'occur-cease-edit)

       :general
       (:keymaps 'occur-mode-map
        :states  'motion
        ;; occur-mode-mouse-goto
        "RET" 'occur-mode-goto-occurrence
        "o" 'occur-mode-goto-occurrence-other-window
        "M-RET" 'occur-mode-display-occurrence

        "j"  'evil-adjust-occur-next
        "k"  'evil-adjust-occur-prev
        "gj" 'evil-next-line
        "gk" 'evil-previous-line

        "R" 'occur-rename-buffer
        "q" nil)
       (:states  'normal
        :keymaps 'occur-edit-mode-map
        ;; occur-mode-mouse-goto
        "RET" 'occur-mode-goto-occurrence
        "go"  'occur-mode-goto-occurrence-other-window
        "gO"  'occur-mode-display-occurrence
        "gj"  'evil-adjust-occur-next
        "gk"  'evil-adjust-occur-prev
        [remap quit-window] 'occur-cease-edit))
   #+END_SRC

** outline-mode
   #+BEGIN_SRC emacs-lisp
     (use-package outline
       :config
       (advice-add 'outline-up-heading :around
                   (defun outline-up-heading--goto-current-first+ (func arg &optional invisible-ok)
                     "make `outline-up-heading' goto the current heading first
     unless already there."
                     (unless (outline-on-heading-p invisible-ok)
                       (outline-backward-same-level 0)
                       (when arg
                         (setq arg (if (> arg 0) (- arg 1) (+ arg 1)))))

                     (when arg
                       (apply func arg invisible-ok))))

       (defun outline-folded-p+ (&optional _pos)
         (save-excursion
           (goto-char (line-end-position))
           (outline-invisible-p)))

       (defun outline-toggle-show-children+ ()
         (interactive)
         (if (outline-folded-p+)
             (outline-show-subtree)
           (outline-hide-subtree)))

       :lazy-leader
       (:mode 'outline-mode
        "m" 'outline-mark-subtree
        "t" 'outline-hide-body ;; show subtree
        "a" 'outline-show-all
        ;; only show outline upto this level.
        "h" 'outline-hide-sublevels
        "l" 'outline-show-branches
        "f" 'outline-hide-other ;; focus
        ;; show remainder of branches in current hidden branch.
        "q" 'outline-show-branches
        "RET" 'outline-insert-heading)

       :general
       (:states  'motion
        :keymaps 'outline-mode-map
        "gh" 'outline-up-heading
        "gj" 'outline-next-heading
        "gk" 'outline-previous-heading
        "gl" 'outline-forward-same-level)
       (:states  'motion
        :keymaps 'outline-mode-map
        :predicate '(outline-on-heading-p)
        [remap evil-shift-right] 'outline-demote
        [remap evil-shift-left]  'outline-promote
        [remap drag-stuff-down]  'outline-move-subtree-down
        [remap drag-stuff-up]    'outline-move-subtree-up
        "TAB"   'outline-toggle-show-children+
        "<tab>" 'outline-toggle-show-children+))
   #+END_SRC

** package
   Emacs's builtin package manager, since moving to straight I've disabled this section.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package package
       :config
       (evil-set-initial-state 'package-menu-mode 'motion)

       :lazy-leader
       (:mode 'package-menu-mode
        "h" 'package-menu-hide-package
        "?" 'package-menu-quick-help
        "/" 'package-menu-filter

        "m"  '(:ignore t :wk "mark")
        "m~" 'package-menu-mark-obsolete-for-deletion
        "mu" 'package-menu-mark-unmark
        "mi" 'package-menu-mark-install
        "mu" 'package-menu-mark-upgrades
        "md" 'package-menu-mark-delete)

       :general
       (:keymaps 'package-menu-mode-map
        :states  'motion
        "TAB" 'forward-button
        "<backtab>" 'backward-button
        "RET" 'package-menu-describe-package
        "DEL" 'package-menu-backup-unmark
        "("   'package-menu-toggle-hiding
        "S"   'tabulated-list-sort
        "U"   'package-menu-mark-upgrades
        "d"   'package-menu-mark-delete
        "i"   'package-menu-mark-install
        "u"   'package-menu-mark-unmark
        "x"   'package-menu-execute
        "q"   nil
        "~"   'package-menu-mark-obsolete-for-deletion))
   #+END_SRC

** paren
   when your point is on a parenthesis, highlight the matching one.

   # TODO look into smart-parens-mode

   #+BEGIN_SRC emacs-lisp
     (use-package paren
       :hook (after-init . show-paren-mode))
   #+END_SRC

** pp/pretty-print
   #+BEGIN_SRC emacs-lisp
     (use-package pp
       :init
       :leader
       (:prefix "k"
        "m" 'pp-macroexpand-last-sexp
        "M" 'pp-macroexpand-expression
        "p" 'pp-eval-last-sexp
        "P" 'pp-eval-expression)

       :init
       (with-eval-after-load 'elisp-mode
         (leader-set-keys-for-major-mode '(emacs-lisp-mode
                                           lisp-interaction-mode)
           "eM" 'pp-macroexpand-expression
           "em" 'pp-macroexpand-last-sexp
           "ex" 'pp-eval-last-sexp
           "eX" 'pp-eval-expression)))
   #+END_SRC

** proced
   edit processes, like windows task-manager but within emacs :)

   #+BEGIN_SRC emacs-lisp
     (use-package proced
       :config
       (evil-set-initial-state 'proced-mode 'motion)

       :lazy-leader
       (:mode 'proced-mode
        "k" 'proced-send-signal

        "m"  '(:ignore t :wk "mark")
        "ma" 'proced-mark-all
        "mu" 'proced-unmark-all
        "mp" 'proced-mark-parents
        "mc" 'proced-mark-children
        "mt" 'proced-toggle-marks
        "mm" 'proced-toggle-marks)

       :general
       (:states  'motion
        :keymaps 'proced-mode-map

        "q"      nil
        "C-?"    'proced-help

        "SPC" 'proced-mark
        "DEL" 'proced-unmark-backward
        "a" 'proced-mark
        "A" 'proced-mark-all
        "u" 'proced-unmark
        "U" 'proced-unmark-all
        "p" 'proced-mark-parents
        "P" 'proced-mark-children
        "M" 'proced-toggle-marks

        "x"   'proced-send-signal
        "C-k" 'proced-send-signal

        "M-SPC" 'proced-toggle-tree

        "r" 'proced-refine
        "R" 'proced-renice

        "o" 'proced-omit-processes ;; marked

        "C-M-SPC" 'proced-format-interactive

        "sS" 'proced-sort-interactive
        "sc" 'proced-sort-pcpu
        "sm" 'proced-sort-pmem
        "sp" 'proced-sort-pid
        "ss" 'proced-sort-start
        "st" 'proced-sort-time
        "su" 'proced-sort-user
        "S"  'proced-filter-interactive))
   #+END_SRC

** process-menu
   #+BEGIN_SRC emacs-lisp
     (use-package simple
       :config
       (evil-set-initial-state 'process-menu-mode 'motion)
       (push 'process-menu-mode +whitespace-exempt-modes)

       :general
       (:states  'motion
        :keymaps 'process-menu-mode-map
        "d" 'process-menu-delete-process
        "x" 'process-menu-delete-process

        "TAB"   'forward-button
        "S-TAB" 'backward-button
        "gj"    'forward-button
        "gk"    'backward-button))
   #+END_SRC

** query-replace
   #+begin_src emacs-lisp
     (use-package query-replace
       :custom
       (query-replace-skip-read-only t)

       :leader
       ("sl" 'query-replace ; literal
        "sq" 'query-replace-regexp))
   #+end_src

** re-builder
   #+BEGIN_SRC emacs-lisp
     (use-package re-builder
       :config
       (setq reb-re-syntax 'rx)
       ;; (evil-set-initial-state 'reb-lisp-mode 'insert)

       (defun reb-save-and-quit+ ()
         "copy regexp and then exit reb."
         (interactive)
         (reb-copy)
         (reb-quit))

       :lazy-leader
       (:mode 'reb-lisp-mode
        "," 'reb-save-and-quit+
        "s" 'reb-copy ;; as string
        "q" 'reb-quit

        "b" 'reb-change-target-buffer
        "c" 'reb-toggle-case
        "y" 'reb-copy ;; as string
        "u" 'reb-force-update
        "s" 'reb-enter-subexp-mode
        "TAB" 'reb-change-syntax)

       :general
       (:keymaps 'reb-lisp-mode-map
        :states 'normal
        "gj" 'reb-next-match
        "gk" 'reb-prev-match
        [remap quit-window] 'reb-quit))
   #+END_SRC

** recentf
   #+begin_src emacs-lisp
     (use-package recentf
       :hook (after-init . recentf-mode)
       :custom
       (recentf-save-file (state! "recentf.el"))
       (recentf-max-saved-items 2048
        "Keep this many files in the recentf history.")
       (recentf-auto-cleanup (* 60 60))
       (recentf-exclude (list (rx (or (and bol
                                           (or "/tmp/"
                                               "/ssh:"
                                               "/sudo:"
                                               (eval straight-base-dir)
                                               ;; Matches a temporarily generated container id.
                                               (and
                                                "/docker:"
                                                (** 12 12 (any alnum))
                                                ":")))
                                      "COMMIT_EDITMSG"
                                      (and (or "/TAGS"
                                               "/GTAGS"
                                               "/GRAGS"
                                               "/GPATH"
                                               ".mkv"
                                               ".avi"
                                               (and ".mp" (any "3" "4"))
                                               (and ".doc" (? "x"))
                                               ".sub"
                                               ".srt"
                                               ".ass"
                                               ".elc"
                                               (and "tmp." (+ (not (any "/" "\\")))))
                                           eol))))
        "Don't show files matching these regexps in recentf alist."))
   #+end_src

** replace
   #+BEGIN_SRC emacs-lisp
     (use-package replace
       :config
       (dolist (func '(perform-replace
                       query-replace))
         (advice-add func :around #'display-buffer-no-select-window-advice))

       :leader
       ("x DEL" 'flush-lines
        "x RET" 'keep-lines))
   #+END_SRC

** save-place
   Remembers the cursor position in open files... so when I reopen them I'm taken to that point
   immediately.

   #+BEGIN_SRC emacs-lisp
     (if (emacs>= "25.1")
         (save-place-mode +1)
       (require 'saveplace)
       (setq-default save-place t))

     (setq save-place-forget-unreadable-files nil
           save-place-version-control 'nospecial
           save-place-file (eval-when-compile
                             (let ((save-dir (state! "save-place")))
                               (unless (file-directory-p save-dir)
                                 (mkdir save-dir t))

                               (join-path save-dir "places.el")))

           save-place-ignore-files-regexp (rx
                                           (or "COMMIT_EDITMSG"
                                               "svn-commit"
                                               (and "hg-editor-" (one-or-more num))
                                               (and (or ".txt" ".tmp") eol)
                                               (and bol (or "/tmp/"))
                                               (and "bzr_log." (one-or-more num)))))
   #+END_SRC

** save-hist
   #+BEGIN_SRC emacs-lisp
     (use-package savehist
       :straight (savehist :type built-in)
       :hook (after-init . savehist-mode)
       :custom
       (savehist-file (state! "savehist.el"))
       (savehist-additional-variables
        '(kill-ring search-ring regexp-search-ring
          consult--line-history evil-ex-history
          projectile-project-command-history)))
   #+END_SRC

** server
   #+BEGIN_SRC emacs-lisp
     (use-package server
       :demand t
       :commands (find-client-buffer+
                  next-client-buffer+
                  prev-client-buffer+
                  server-edit-mode+)
       :custom
       (server-client-instructions nil)

       :config
       (advice-add 'server-edit :before
                   (defun server-edit--auto-save-on-exit (&rest _args)
                     "Automatically save file before server exit."
                     (save-buffer)))

       ;; (advice-add #'server-start :before
       ;;             (defun server-rename-when-running+ (&rest _args)
       ;;               (when (and (not (bound-and-true-p server-mode))
       ;;                          (server-running-p server-name))
       ;;                 (setq server-name
       ;;                       (read-string
       ;;                        (format "Server [%s] already running, choose new name: " server-name))))))

       :config
       (defun server-client-buffers+ (&optional all-frames)
         "List buffers being visited by emacs-client in the current frame.
     With ALL-FRAMES use all frames known to the current emacs session."
         (cl-remove-duplicates
          (cl-loop for frame in (if all-frames (frame-list) (list (selected-frame)))
                   append (when-let ((proc (frame-parameter frame 'client)))
                            (process-get proc 'buffers)))))

       (defvar move-client-buffers-wrap-around+ t
         "When t attempting to run `next-client-buffer' in the last client buffer
     wraps back round to the first client buffer.")

       (defun next-client-buffer+ (arg)
         "Switch to the next buffer being visited by an emacsclient in the current frame.
     With ARG this function acts on clients from all-frames not just the current frame."
         (interactive "P")
         (if-let* ((buffers (server-client-buffers+ arg))
                   (mark (1+ (or (seq-position buffers (current-buffer)) -1)))
                   (mark (if (eq mark (length buffers))
                             (if move-client-buffers-wrap-around+
                                 0
                               (user-error "No next client buffer to switch to"))
                           mark))
                   (buffer (nth mark buffers)))
             (progn
               (message "%d/%d: %s"
                        (1+ mark)
                        (length buffers)
                        (abbreviate-file-name
                         (smart-buffer-file-name buffer)))
               (switch-to-buffer buffer))
           (user-error "No client buffers found")))

       (defun prev-client-buffer+ (arg)
         "Switch to the previous buffer being visited by an emacsclient in the current frame.
     With ARG this function acts on clients from all-frames not just the current frame."
         (interactive "P")
         (if-let* ((buffers (server-client-buffers+ arg))
                   (mark (- (or (seq-position buffers (current-buffer)) 0) 1))
                   (mark (if (< mark 0)
                             (if move-client-buffers-wrap-around+
                                 (- (length buffers) 1)
                               (user-error "No previous client buffer to switch to"))
                           mark))
                   (buffer (nth mark buffers)))
             (progn
               (message "%d/%d: %s"
                        (1+ mark)
                        (length buffers)
                        (abbreviate-file-name
                         (smart-buffer-file-name buffer)))
               (switch-to-buffer buffer))
           (user-error "No client buffers found")))

       (defun find-client-buffer+ (arg)
         "Completing read a buffer from the list of emasclient buffers."
         (interactive "P")
         (switch-to-buffer
          (if-let* ((client-buffers (cl-loop for buf in (server-client-buffers+ arg)
                                             collect (cons (abbreviate-file-name (smart-buffer-file-name buf))
                                                           buf)))
                    (cands (mapcar #'car client-buffers)))
              (cond
               ((package! :consult)
                ;; Gives us previews and nicer formatting but may not be available.
                (consult--read client-buffers
                               :prompt "Client buffer: "
                               :category 'buffer
                               :require-match t
                               :default (car cands)
                               :lookup #'consult--lookup-cdr
                               :state (consult--buffer-state)))
               (t
                (cdr
                 (assoc
                  (completing-read "Client buffer: "
                                   (lambda (str pred action)
                                     (if (eq action 'metadata)
                                         `(metadata (category . buffer))
                                       (complete-with-action action cands str pred)))
                                   nil t nil nil (car cands))
                  client-buffers))))
            (user-error "No client buffers found"))))

       :init
       (defvar server-edit-ignore-modes+
         '(with-editor-mode)
         "modes (minor or major) in which `server-edit-mode+' is disabled.")

       (add-hook 'server-visit-hook
                 (defun server-switch-enable-server-edit-mode+ ()
                   (unless (or (apply #'derived-mode-p
                                      server-edit-ignore-modes+)
                               (cl-some (lambda (mode)
                                          (and (boundp mode)
                                               (eval mode)))
                                        server-edit-ignore-modes+))
                     (server-edit-mode+ +1))))

       (add-hook 'server-done-hook
                 (defun server-done-quit-server-edit-mode+ ()
                   (server-edit-mode+ -1)))

       :config
       ;; add ,, and ,q like bindings in server edit sessions, like org-edit-src-code
       (define-minor-mode server-edit-mode+
         "A dummy minor mode for files being edited by `server'.
     makes it easier to bind keys (& leaders :grinning: for them)."
         :lighter " ServerEdit"
         '(;; ([remap evil-write] . server-edit)
           ([remap evil-save-and-close] . server-edit)
           ([remap evil-quit-all-with-error-code] . server-edit-abort)))

       :leader
       ("f SPC" 'server-start
        "fen" 'next-client-buffer+
        "fep" 'prev-client-buffer+
        "feb" 'find-client-buffer+)

       :lazy-leader
       (:mode 'server-edit-mode+
        :minor t
        :prefix leader-major-mode-prefix
        "," 'server-edit
        "q" 'server-edit-abort))
   #+END_SRC

** simple
   #+BEGIN_SRC emacs-lisp
     (use-package simple
       :commands (indent-tabs-mode)
       :leader
       ("i TAB" 'indent-hydra/body
        "i |"   'indent-to-column
        "i RET" 'split-line
        "i SPC" 'just-one-space)

       :init
       (add-to-list 'minor-mode-alist '(indent-tabs-mode " \\t") t)

       :config
       (push 'messages-buffer-mode +whitespace-exempt-modes)

       :general
       (:keymaps 'completion-list-mode-map
        :states  'motion
        "RET" 'choose-completion
        "C-j" 'choose-completion

        "q" nil
        "Q" 'delete-completion-window

        "j" 'next-completion
        "k" 'previous-completion
        "n" 'next-completion
        "p" 'previous-completion
        "N" 'previous-completion))
   #+END_SRC

** shell
   #+BEGIN_SRC emacs-lisp
     (evil-set-initial-state 'shell-mode 'emacs)
   #+END_SRC

** eshell
   :PROPERTIES:
   :header-args+: :tangle (package-yes! eshell)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package esh-mode
       :straight (esh-mode :type built-in)
       :custom
       (eshell-directory-name (state! "eshell"))
       (eshell-aliases-file (state! "eshell" "aliases"))
       (eshell-login-script (etc! "eshell" "loginrc"))
       (eshell-rc-script (etc! "eshell" "eshrc"))
       (eshell-banner-message "")

       :init
       (evil-set-initial-state 'eshell-mode 'emacs)

       :config
       ;; Don't auto scroll to bottom after execution
       (remove-hook 'eshell-output-filter-functions
                    'eshell-postoutput-scroll-to-bottom)

       ;; Clear shouldn't scroll back to bottom of the screen
       (advice-add 'eshell/clear :after #'recenter-top-bottom)

       (defun eshell-backward-kill-word+ ()
         (interactive)
         (let ((bol
                (save-excursion
                  (eshell-bol)))
               (beginning-word-point
                (save-excursion
                  (backward-word)
                  (point))))
           (when (>= beginning-word-point bol)
             (call-interactively 'backward-kill-word))))

       (defun eshell-mode--setup-bindings ()
         (general-define-key
           :keymaps 'eshell-mode-map
           ;;; movement commands
           "C-e"   'end-of-line
           "M-l"   'recenter-top-bottom
           "C-h"   'backward-char
           "C-l"   'forward-char
           "C-M-h" 'backward-word
           "C-M-l" 'forward-word
           ;;; scroll commands
           "<S-down>" 'evil-scroll-down
           "<S-up>"   'evil-scroll-up
           ;; move to beginning of output
           ;; or return to end of cursor
           "M-a" 'eshell-show-output
           "M-e" 'eshell-show-maximum-output

           ;;; signals
           "C-c C-z" 'eshell-send-eof-to-process
           "C-c C-q" 'eshell-quit-process
           "M-c"     'eshell-interrupt-process
           "M-z"     'eshell-send-eof-to-process
           "M-q"     'eshell-quit-process

           "M-y"           'eshell-repeat-argument
           "C-d"           'eshell-kill-input
           "C-M-k"         'eshell-kill-input
           "M-d"           'eshell-kill-output
           "C-w"           'eshell-backward-kill-word+
           "<C-backspace>" 'evil-delete-backward-word
           ;; copy entered input back into current line
           "<C-return>"    'eshell-copy-old-input

           "C-j"       'eshell-next-input
           "C-k"       'eshell-previous-input
           "M-j"       'eshell-next-prompt
           "M-k"       'eshell-previous-prompt
           ;; reverse the default affect of up and down
           "<up>"      'eshell-previous-input
           "<down>"    'eshell-next-input
           "<C-up>"    'eshell-previous-matching-input-from-input
           "<C-down>"  'eshell-next-matching-input-from-input
           "<S-left>"  'eshell-backward-argument
           "<S-right>" 'eshell-forward-argument
           "<M-left>"  'eshell-backward-argument
           "<M-right>" 'eshell-forward-argument))

       ;; Needs to be in a hook because eshell-mode-map isn't
       ;; defined until the mode is activated, and even then
       ;; it's only buffer-local :(.
       (add-hook 'eshell-mode-hook #'eshell-mode--setup-bindings)

       :leader
       (":" 'eshell-command)
       :lazy-leader
       (:major 'eshell-mode
        "o"   'eshell-show-output
        "O"   'eshell-mark-output
        "RET" 'eshell-queue-input

        "i" '(:ignore t :wk "insert")
        "ib" 'eshell-insert-buffer-name
        "ip" 'eshell-insert-process
        "ie" 'eshell-insert-envvar

        "k" '(:ignore t :wk "kill/signal")
        "kz" 'eshell-send-eof-to-process
        "kc" 'eshell-interrupt-process
        "kq" 'eshell-quit-process))
   #+END_SRC

*** eshell-prompt-extras
    #+BEGIN_SRC emacs-lisp
      (use-package eshell-prompt-extras
        :straight t
        :after esh-mode
        :init
        (setq epe-show-python-info t
              epe-path-style 'full)

        (defvar eshell-prompt--enable-git-on-remote-files t
          "when true, show branch info even on remote files")

        (defun epe-git-p ()
          "If you installed git and in a git project."
          (when (or eshell-prompt--enable-git-on-remote-files
                    ;; either enable everywhere, including remote
                    ;; or enable when not remote
                    (not (epe-remote-p)))
            (and (eshell-search-path "git")
                 (vc-find-root (eshell/pwd) ".git"))))

        (setq eshell-prompt-function #'epe-theme-lambda))
    #+END_SRC

** smerge
   Minor mode in buffers that have git merge issues; it highlights diff indicators
   and offers methods to quickly jump from them.

   #+BEGIN_SRC emacs-lisp
     (use-package smerge-mode
       :leader
       ("gi" 'smerge-mode)

       :lazy-leader
       (:mode 'smerge-mode
        :minor t
        :prefix "g"
        "s" 'smerge-swap
        "a" 'smerge-keep-all
        "x" 'smerge-keep-base
        "c" 'smerge-keep-current
        "RET" 'smerge-keep-current
        "m" 'smerge-keep-mine
        "o" 'smerge-keep-other
        "j" 'smerge-next
        "k" 'smerge-prev)

       :general
       (:keymaps 'smerge-mode-map
        ;; Technically merge error are errors so this tracks.
        [remap next-error] 'smerge-next
        [remap previous-error] 'smerge-prev)
       (:keymaps 'smerge-mode-map
        :states '(normal motion)
        "]g" 'smerge-next
        "[g" 'smerge-prev))
   #+END_SRC

*** smerge-hydra
    #+begin_src emacs-lisp
      (use-package smerge-mode
        :lazy-leader
        (:mode 'smerge-mode
         :minor t
         :prefix "g"
         "." 'smerge-hydra/body)

        :pretty-hydra
        ;; Adapted from [[https://github.com/tecosaur/emacs-config/blob/0b39759/config.org#smerge][tecosaur/emacs-config]].
        (smerge-hydra
         (:foreign-keys run :quit-key "q")
         ("Move"
          (("n" (smerge-next) "next")
           ("p" (smerge-prev) "previous"))
          "Keep"
          (("b" (smerge-keep-base) "base")
           ("u" (smerge-keep-upper) "upper")
           ("l" (smerge-keep-lower) "lower")
           ("a" (smerge-keep-all) "all")
           ("RET" (smerge-keep-current) "current"))
          "Diff"
          (("<" (smerge-diff-base-upper) "upper/base")
           ("=" (smerge-diff-upper-lower) "upper/lower")
           (">" (smerge-diff-base-lower) "base/lower")
           ("R" (smerge-refine) "refine")
           ("E" (smerge-ediff) "ediff"))
          "Other"
          (("c" (smerge-combine-with-next) "combine")
           ("r" (smerge-resolve) "resolve")
           ("x" (smerge-kill-current) "kill current")
           ;; ("q" (smerge-auto-leave) "quit")
           ("q" nil "quit")))))
    #+end_src

** visual-line
   auto wrap long lines at the end of words.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package visual-line
       :straight (visual-line :type built-in)
       :delight " ‚ìÅ")
   #+END_SRC

** tab-bar-mode
   :PROPERTIES:
   :header-args+: :tangle (package-yes! tab-bar)
   :END:

   #+begin_src emacs-lisp
     (defun s-center-with+ (len s &rest props)
       (let ((extra (max 0 (- len (length s)))))
         (concat
          (apply #'propertize (make-string (ceiling extra 2) ? ) props)
          s
          (apply #'propertize (make-string (floor extra 2) ? ) props))))

     (use-package tab-bar
       :hook (after-init . tab-bar-mode)
       :leader
       ("tt" 'tab-bar-mode)
       :general
       (:prefix "C-t"
        :states '(normal motion)
        "" '(nil :wk "tab-bar")
        "C-n" 'tab-bar-switch-to-next-tab
        "C-p" 'tab-bar-switch-to-prev-tab
        "C-t" 'tab-bar-new-tab
        "C-c" 'tab-bar-duplicate-tab
        "r" 'tab-bar-rename-tab
        "g" 'tab-bar-select-tab-by-name
        "h" 'toggle-frame-tab-bar
        "C-w" 'tab-bar-close-tab
        "x" 'tab-bar-close-tab
        "X" 'tab-bar-close-other-tabs
        "<left>" 'tab-bar-history-back
        "<right>" 'tab-bar-history-forward
        ;; tab-bar-history-mode
        ;; tab-bar-move-tab
        ;; tab-bar-new-tab-to
        ;; tab-bar-move-tab-to
        ;; tab-bar-close-group-tabs
        ;; tab-bar-change-tab-group
        ;; tab-bar-move-tab-to-frame
        ;; tab-bar-move-tab-to-group
        ;; tab-bar-close-tab-by-name
        ;; tab-bar-rename-tab-by-name
        ;; tab-bar-switch-to-last-tab
        ;; tab-bar-switch-to-recent-tab
        )
       :custom
       (tab-bar-new-button-show t)
       (tab-bar-tab-name-truncated-max 20)
       (tab-bar-tab-name-ellipsis "‚Ä¶")
       (tab-bar-new-button-show nil)

       :config
       (require 'all-the-icons)
       (setq tab-bar-close-button (propertize " Ôôï " 'display (get-text-property 0 'display tab-bar-close-button))
             tab-bar-back-button (all-the-icons-pad-on-tty-advice+
                                  (+icon nerd-fa "arrow-circle-left"))
             tab-bar-forward-button (all-the-icons-pad-on-tty-advice+
                                     (+icon nerd-fa "arrow-circle-right")))

       :preface
       (defvar tab-bar-separator+ "‚ñå" ;; '("‚ñå" . "‚ñê")
         "Left and right separator for active tab-bar indicators.")

       (defvar tab-bar-inactive-separator+ "‚ñè" ;; '("‚ñè" . "‚ñï")
         "Left and right separator for inactive tab-bar indicators.")

       (setq tab-bar-separator tab-bar-inactive-separator+)

       (defvar tab-bar-show-tab-icons+ +icons-available
         "Shows icons for tab-bar indicators.")

       :custom
       (tab-bar-format '(tab-bar-format-history
                         tab-bar-format-tabs
                         tab-bar-separator
                         tab-bar-format-add-tab))
       :config
       (setq tab-bar-tab-name-format-function
             (defun tab-bar-tab-name-format-function+ (tab i)
               (let* ((current-p (eq (car tab) 'current-tab))
                      (face (funcall tab-bar-tab-face-function tab))
                      (name (propertize (alist-get 'name tab) 'face face))
                      (icon (all-the-icons-pad-on-tty-advice+
                             (propertize
                              (or (ignore-errors
                                    (and name
                                         (+icon-for buffer name)))
                                  (+icon nerd-mdi "buffer"))
                              'face face)
                             (propertize " " 'face face))))
                 (concat (propertize (if tab-bar-tab-hints (format "%d " i) "") 'face face)
                         (propertize
                          (if (< (length name) tab-bar-tab-name-truncated-max)
                              (s-center-with+ (+ (length icon) 1 tab-bar-tab-name-truncated-max)
                                              (concat icon (propertize " " 'face face) name)
                                              'face face)
                            (concat icon (propertize " " 'face face)
                                    (s-truncate tab-bar-tab-name-truncated-max name
                                                (propertize tab-bar-tab-name-ellipsis 'face face))))
                          'help-echo name)))))

       (defun tab-bar--format-tab+ (tab i)
         (let ((current-tab-p (eq (car tab) 'current-tab))
               (face (funcall tab-bar-tab-face-function tab)))
           (append
            (when-let ((sep (cond
                             (current-tab-p (propertize tab-bar-separator+ 'face 'tab-bar-separator))
                             ((eq i 1) (propertize " " 'face face))
                             (t (propertize tab-bar-inactive-separator+ 'face 'tab-bar-inactive-separator)))))
              `((,(intern (format "sep-%i" i)) menu-item ,sep ignore)))
            (let ((name (funcall tab-bar-tab-name-format-function tab i)))
              (cond
               (current-tab-p
                `((current-tab menu-item ,name ignore :help "Current tab")))
               (t
                `((,(intern (format "tab-%i" i))
                   menu-item
                   ,name
                   ,(or
                     (alist-get 'binding tab)
                     `(lambda ()
                        (interactive)
                        (tab-bar-select-tab ,i)))
                   :help "Click to visit tab")))))
            `((,(if current-tab-p 'C-current-tab (intern (format "C-tab-%i" i)))
               menu-item ,(propertize
                           (or (and tab-bar-close-button-show
                                    (not (eq tab-bar-close-button-show
                                             (if current-tab-p 'non-selected 'selected)))
                                    tab-bar-close-button)
                               "")
                           'face face)
               ,(or
                 (alist-get 'close-binding tab)
                 `(lambda ()
                    (interactive)
                    (tab-bar-close-tab ,i)))
               :help "Close tab")))))

       (advice-add #'tab-bar--format-tab :override #'tab-bar--format-tab+))
   #+end_src

** tabulated-list-mode
   #+BEGIN_SRC emacs-lisp
     (use-package tabulated-list
       :hook (tabulated-list-mode . hl-line-mode)
       :commands (tabulated-list-next-column)
       :config
       (evil-set-initial-state 'tabulated-list-mode 'motion)

       (defun tabulated-list--get-column-widths ()
         "return a list of all the "
         (mapcar (lambda (x) (+ (nth 1 x)
                                (or (plist-get (cdr x) :pad-right) 1)))
                 tabulated-list-format))

       (defun tabulated-list--get-column-pivots ()
         (let (prev values)
           (setq values (mapcar (lambda (x)
                                  (let ((new-val (+ x (or prev 0))))
                                    (setq prev new-val)
                                    new-val))
                                (tabulated-list--get-column-widths)))
           ;; (mapcar (lambda (x) (- x 1)) values)
           values))

       (defun tabulated-list--properties ()
         (let* ((current-column-position (- (point)
                                            (line-beginning-position)))
                (column-pivots (tabulated-list--get-column-pivots))
                (column-count (length column-pivots))
                (preceding-columns (seq-filter
                                    (lambda (x)
                                      (<= x current-column-position))
                                    column-pivots))
                (following-columns (nthcdr (length preceding-columns)
                                           column-pivots))
                (current-column (car following-columns))
                (following-columns (cdr following-columns)))
           `(:current-column-position ,current-column-position
                                      :column-pivots           ,column-pivots
                                      :column-count            ,column-count
                                      :preceding-cols          ,preceding-columns
                                      :current-column          ,current-column
                                      :following-cols          ,following-columns)))

       ;; doesn't work when row contains truncated entries, such as
       ;; buffers with a "name..." entry, because those dots aren't
       ;; included in the width of the column.
       (defun tabulated-list-next-column (&optional count)
         "moves to the next column shown by tabulated list mode"
         (interactive)
         (or count (setq count 1))

         (when tabulated-list-format
           (let* ((properties (tabulated-list--properties))
                  (line-step (floor (/ count
                                       (plist-get properties :column-count)))))
             ;; move however many lines it takes to reach row with desired column
             (unless (zerop line-step)
               (forward-line line-step))

             (unless (eobp)
               (cond
                ((eq (point) (line-end-position))
                 ;; when at the end of the last column, goto next row
                 (forward-line)
                 (goto-char (line-beginning-position)))
                ((not (plist-get properties :following-cols))
                 ;; no next column, goto end of current
                 (goto-char (line-end-position)))
                (t
                 ;; goto next column from the end of the current one
                 (goto-char (+ (line-beginning-position)
                               (plist-get properties :current-column)))))))))

       :general
       (:keymaps 'tabulated-list-mode-map
        "SPC" nil "0" nil "<" nil ">" nil "?" nil
        "g" nil "h" nil "n" nil "p" nil "DEL" nil "S-SPC" nil))
   #+END_SRC

** tramp
   Transparent ReMote Access Protocol

   #+BEGIN_SRC emacs-lisp
     (use-package tramp
       :custom
       (tramp-default-method "sshx")
       (tramp-verbose 1)

       :config
       ;; google cloud integration... curtesy of:
       ;;   https://qiita.com/tanatana/items/218b19808f2428b125fe
       ;; see [[https://cloud.google.com/sdk/docs/quickstart-windows][here]] for how to install gcloud CLI.
       (push
        '("gcssh"
          (tramp-login-program        "gcloud compute ssh")
          (tramp-login-args           (("%h")))
          (tramp-async-args           (("-q")))
          (tramp-remote-shell         "/bin/sh")
          (tramp-remote-shell-args    ("-c"))
          (tramp-gw-args              (("-o" "GlobalKnownHostsFile=/dev/null")
                                       ("-o" "UserKnownHostsFile=/dev/null")
                                       ("-o" "StrictHostKeyChecking=no")))
          (tramp-default-port         22))
        tramp-methods))
   #+END_SRC

** vc-mode
   #+BEGIN_SRC emacs-lisp
     (use-package vc
       ;; :commands (vc-annotate              ; history of current file
       ;;            vc-create-tag
       ;;            vc-delete-file
       ;;            vc-diff                  ; diff current file
       ;;            vc-dir                   ; status of directory
       ;;            vc-ediff                 ; ediff current file
       ;;            vc-ignore                ; prompt and exclude file
       ;;            vc-log-incoming          ; log for pull commits
       ;;            vc-log-outgoing          ; log for push commits
       ;;            vc-merge
       ;;            vc-next-action           ; makes a commit... annoyingly named
       ;;            vc-print-log             ; log of commits affecting current file
       ;;            vc-print-root-log        ; log of all commits in project
       ;;            vc-push
       ;;            vc-region-history        ; log of commits affecting region in file
       ;;            vc-register              ; add file
       ;;            vc-retrieve-tag
       ;;            vc-revert                ; undo changes to working files... permenently
       ;;            vc-revision-other-window ; view file in previous tag/commit
       ;;            vc-root-diff
       ;;            vc-switch-backend        ; not using git... for shame :P
       ;;            vc-update-change-log)
       :init
       ;; On Windows, we must use Git GUI to enter username and password. See [[https://github.com/magit/magit/wiki/FAQ#windows-cannot-push-via-https][here]].
       (when (windows-p)
         (setenv "GIT_ASKPASS" "git-gui--askpass"))

       (push 'vc-annotate-mode +whitespace-exempt-modes)
       (push 'vc-git-log-view-mode +whitespace-exempt-modes)

       :config
       (require 'vc-git) ;; supported

       (advice-add 'vc-region-history :after (lambda (&rest _)
                                               (when (evil-visual-state-p)
                                                 (evil-exit-visual-state))))

       (setq vc-ignore-dir-regexp
             (format "%s\\|%s"
                     vc-ignore-dir-regexp
                     tramp-file-name-regexp))

       (evil-set-initial-state 'vc-git-region-history-mode 'motion)
       (evil-set-initial-state 'vc-git-log-view-mode 'motion)
       (evil-set-initial-state 'vc-git-log-edit-mode 'insert)                        ; making commits... why name it log :P
       (evil-set-initial-state 'vc-dir-mode 'motion)                                 ; check status of files for an entire directory
       (evil-set-initial-state 'vc-annotate-mode 'motion)                            ; pops up a buffer showing the most recent changes for every line in the current file alongside the commit which made those changes.

       :leader
       (:prefix leader-diff-leader-prefix
        "v" 'vc-diff)
       (:prefix "g"
        "a" 'vc-annotate
        "r" 'vc-revision-other-window
        "=" 'vc-root-diff
        "v" 'vc-region-history
        "h" 'vc-print-log
        "l" 'vc-print-root-log
        "u" 'vc-revert
        "#" 'vc-create-tag
        "d" 'vc-dir)

       :lazy-leader
       (:mode 'vc-annotate-mode
        "m"     'vc-next-action
        "l"     'vc-annotate-show-log-revision-at-line
        "d"     'vc-annotate-show-diff-revision-at-line
        "D"     'vc-annotate-show-changeset-diff-revision-at-line
        "t"     'vc-annotate-toggle-annotation-visibility

        "g"     '(:ignore t :wk "goto")
        "gg"    'vc-annotate-goto-line
        "gc"    'vc-annotate-revision-at-line
        "gp"    'vc-annotate-revision-previous-to-line
        "gl"    'vc-annotate-show-log-revision-at-line
        "gG"    'vc-annotate-working-revision
        "g SPC" 'vc-annotate-working-revision)
       (:mode 'vc-dir-mode
        "i" 'vc-log-incoming
        "o" 'vc-log-incoming
        "l" 'vc-print-log
        "L" 'vc-print-root-log
        "D" 'vc-root-diff
        "d" 'vc-diff
        "h" 'vc-dir-hide-up-to-date
        "u" 'vc-update                                                               ; don't understand
        "m" 'vc-next-action)
       (:mode '(vc-git-region-history-mode vc-git-log-view-mode)
        "p" 'log-view-diff-changeset
        "a" 'log-view-annotate-version
        "m" 'log-view-toggle-mark-entry
        "s" 'diff-goto-source)
       (:mode 'vc-git-log-edit-mode
        "d" 'log-edit-show-diff
        "f" 'log-edit-show-files
        "?" 'log-edit-mode-help
        "SPC" 'log-edit-done
        "DEL" 'log-edit-kill-buffer

        "i"  '(:ignore t :wk "insert")
        "ic" 'log-edit-insert-changelog
        "if" 'log-edit-insert-filenames
        "iC" 'log-edit-insert-changelog-entries
        "iT" 'log-edit-insert-cvs-rcstemplate
        "it" 'log-edit-insert-cvs-template
        "iF" 'log-edit-insert-filenames-without-changelog
        "im" 'log-edit-insert-message-template

        "t"  '(:ignore t :wk "toggle")
        "ta" 'vc-git-log-edit-toggle-amend
        "ts" 'vc-git-log-edit-toggle-signoff)

       :general
       (:states  'normal
        :keymaps 'vc-git-log-edit-mode-map
        "C-q" 'log-edit-kill-buffer
        "M-s" 'log-edit-next-comment
        "M-r" 'log-edit-previous-comment
        "C-s" 'log-edit-comment-search-forward
        "C-r" 'log-edit-comment-search-backward
        "M-0" 'evil-beginning-of-line)
       (:states  'motion
        :keymaps 'vc-annotate-mode-map
        "gj" 'vc-annotate-prev-revision ;; older revisions
        "gk" 'vc-annotate-next-revision ;; newer revisions
        "C-t" 'vc-annotate-toggle-annotation-visibility
        "RET" 'vc-annotate-goto-line

        "d" 'vc-annotate-show-diff-revision-at-line
        "D" 'vc-annotate-show-changeset-diff-revision-at-line
        "t" 'vc-annotate-toggle-annotation-visibility)
       (:states  'motion
        :keymaps 'vc-dir-mode-map

        "a" 'vc-register ;; git add FILE
        "d" 'vc-diff
        "=" 'vc-diff
        "Q" 'vc-dir-kill-dir-status-process
        "i" 'vc-dir-ignore
        "x" 'vc-dir-kill-line

        ;; vc-dir-search
        "C-s" 'vc-dir-isearch-regexp
        "M-s" 'vc-dir-query-replace-regexp

        "A" 'vc-dir-mark-all-files
        "m" 'vc-dir-mark
        "U" 'vc-dir-unmark-all-files
        "u" 'vc-dir-unmark
        ;; "t" 'vc-dir-toggle-mark ;; mouse event
        "<backspace>" 'vc-dir-unmark-file-up

        "p" 'vc-pull
        "P" 'vc-push

        "o"   'vc-dir-display-file
        "RET" 'vc-dir-find-file

        "gj" 'vc-dir-next-line
        "gk" 'vc-dir-previous-line
        "M-j" 'vc-dir-next-directory
        "M-k" 'vc-dir-previous-directory)
       (:states  'motion
        :keymaps '(vc-git-region-history-mode-map
                   vc-git-log-view-mode-map)

        "q" nil
        "d" 'log-view-diff
        "=" 'log-view-diff
        "o" 'log-view-find-revision ; open current file at current commit

        "<return>" 'log-view-toggle-entry-display
        "<tab>"    'log-view-toggle-entry-display

        ;; move to next message, then reallign to top
        ;; (kbd "C-j") (lambda! (log-view-msg-next)
        ;;               (call-interactively 'evil-scroll-line-to-top))
        "gj" 'log-view-msg-next
        "gk" 'log-view-msg-prev

        "M-j" 'log-view-file-next
        "M-k" 'log-view-file-prev

        "gl" 'diff-hunk-next
        ;; TODO reallign diff to propper location on move down without trapping on a single diff
        ;; (kbd "M-j") (lambda! (diff-hunk-next)
        ;;               (call-interactively 'evil-scroll-line-to-top)
        ;;               (evil-previous-line 3))
        "gh" (lambda! (diff-hunk-prev) (evil-previous-line 3))))
   #+END_SRC

** view-mode
   #+BEGIN_SRC emacs-lisp
     (use-package view
       :config
       :general
       (:keymaps 'view-mode-map
        :states  'normal
        [remap quit-window] 'View-quit
        "Q" 'View-quit-all
        "G" 'View-scroll-to-buffer-end
        "zq" 'View-exit
        "zk" 'View-kill-and-leave
        "gj" 'View-scroll-line-forward
        "gk" 'View-scroll-line-backward
        ;; "C-d" 'View-scroll-half-page-forward
        ;; "C-u" 'View-scroll-half-page-backward
        "M-d" 'View-scroll-page-forward
        "M-u" 'View-scroll-page-backward))
   #+END_SRC

** vline
   #+BEGIN_SRC emacs-lisp
     (use-package vline
       :straight (vline :host github :repo "emacsmirror/vline")
       :leader
       ("tv" 'vline-mode))
   #+END_SRC

** whitespace
   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :delight
       (whitespace-mode " ‚ì¶ ")
       (global-whitespace-mode " ‚ì¶ "))
   #+END_SRC

** winner
   undo changes to window configurations.

   #+BEGIN_SRC emacs-lisp
     (use-package winner
       :defer 10
       :config
       (winner-mode +1)

       :general
       (:keymaps 'emacs-window-map
        "<left>"  'winner-undo
        "<right>" 'winner-redo))
   #+END_SRC

** window
   Make the window separator a [[https://www.reddit.com/r/emacs/comments/3u0d0u/how_do_i_make_the_vertical_window_divider_more/][straight-line]], like TMUX.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'window-configuration-change-hook
               (defun +change-window-divider ()
                 (when-let ((display-table (or buffer-display-table standard-display-table)))
                   (set-display-table-slot display-table 5 ?‚îÇ)
                   (set-window-display-table (selected-window) display-table))))
   #+END_SRC

** xref
   cross reference keywords across a number of different backends.

   #+BEGIN_SRC emacs-lisp
     (use-package xref
       :hook ((xref-after-jump . recenter)
              (xref-after-jump . xref-pulse-momentarily))
       :config
       (evil-set-initial-state 'xref--xref-buffer-mode 'motion)

       :leader
       ("jb" 'xref-go-back
        "jr" 'xref-find-references
        "js" 'xref-find-apropos
        "jq" 'xref-find-references-and-replace
        "jg" 'xref-find-definitions
        "jG" 'xref-find-definitions-other-frame
        "jo" 'xref-find-definitions-other-window)

       :lazy-leader
       (:mode 'xref--xref-buffer-mode
        "s" 'xref-query-replace-in-results)

       :general
       ;; erase global xref bindings
       ("M-."   nil                                                                  ; xref-find-definitions
        "M-,"   nil                                                                  ; xref-go-back
        "M-?"   nil                                                                  ; xref-find-references
        "C-M-." nil                                                                  ; xref-find-apropos
        )
       (:states 'motion
        "[x" 'xref-go-back)
       (:keymaps 'xref--xref-buffer-mode-map
        :states 'motion
        "j" 'xref-next-line
        "k" 'xref-prev-line
        "RET" 'xref-goto-xref
        "M-RET" 'xref-show-location-at-point
        "TAB" 'xref-quit-and-goto-xref))
   #+END_SRC

** xwin
    #+BEGIN_SRC emacs-lisp
      (use-package x-win
        :config
        (advice-add 'emacs-session-filename :override
                    (defun emacs-session-filename+ (session-id)
                      (concat (state! "x-sessions/session.") session-id))))
    #+END_SRC

* Extensions
  Optional [[*Packages][packages]] that users can opt to configure from the ~+modules~ variable.

** selectrum
   :PROPERTIES:
   :header-args+: :tangle (package-yes! selectrum)
   :ID:       7cacf59f-957b-47f1-8bb6-f36a10af3aec
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package selectrum
       :straight t
       :hook (after-init . selectrum-mode)
       :custom
       (selectrum-max-window-height 15)
       (selectrum-count-style 'current/matches)
       (selectrum-files-select-input-dirs t)

       :init
       (defvaralias 'selectrum-completion-in-region-styles 'completion-styles)

       :config
     ;;; Sorting configuration and workarounds
       (setq selectrum-preprocess-candidates-function
             (defun selectrum-preprocess+ (cands)
               (when selectrum-should-sort
                 (when-let ((sort-func (or (+completion-category-sort-func
                                            (+completion-metadata))
                                           (when (bound-and-true-p selectrum-prescient-mode)
                                             #'selectrum-prescient--preprocess)
                                           #'selectrum-default-candidate-preprocess-function)))
                   (setq cands (funcall sort-func cands))))
               cands))

     ;;; Update highlighting for certain completions
       (defun selectrum-completion-highlight+ (input cands)
         (when-let ((hl-func (+completion-category-hl-func
                              (+completion-metadata input))))
           (setq cands (mapcar hl-func cands)))
         cands)

       (setq selectrum-highlight-candidates-function
             (defun selectrum-highlight+ (input cands)
               (cl-reduce (lambda (cands func)
                            (funcall func input cands))
                          `(,#'selectrum-completion-highlight+
                            ,@(cond ((member 'orderless completion-styles)
                                     (list #'orderless-highlight-matches))
                                    ((bound-and-true-p selectrum-prescient-mode)
                                     (list #'selectrum-prescient--highlight))
                                    (t
                                     (list #'selectrum-candidates-identity))))
                          :initial-value cands)))

       (advice-add 'selectrum--selection-highlight :before-until
                   ;; Use `selectrum-current-candidate' but keep match highlighting.
                   ;; This is a workaround until [[https://github.com/raxod502/selectrum/issues/353][#353]] gets resolved.
                   (apply-partially #'minibuffer-override-face+
                                    'selectrum-current-candidate))

       :leader
       ("RET" 'selectrum-repeat)

       :general
       (:keymaps 'minibuffer-local-map
        "C-r" 'selectrum-select-from-history
        "C-s" 'selectrum-select-from-history)
       (:keymaps 'selectrum-minibuffer-map
        "C-j" 'next-line
        "C-q" 'selectrum-quick-select
        "M-q" 'selectrum-quick-insert
        [remap minibuffer-beginning-of-buffer] 'selectrum-goto-beginning
        [remap minibuffer-scroll-down-command] 'selectrum-previous-page
        [remap minibuffer-forward-char-or-exit+]
        (defun selectrum-forward-char-or-exit+ ()
          (interactive)
          (call-interactively (if (eolp)
                                  'selectrum-select-current-candidate
                                'forward-char)))
        [remap next-matching-history-element] 'selectrum-select-from-history
        "C-i" 'selectrum-insert-current-candidate
        "<S-return>" 'selectrum-submit-exact-input))
   #+END_SRC

*** selectrum-prescient
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! selectrum prescient)
      (use-package selectrum-prescient
        :after prescient
        :straight t
        :hook ((selectrum-mode . selectrum-prescient-mode))
        :custom
        (selectrum-prescient-enable-filtering nil)
        :init
        (add-hook 'selectrum-prescient-mode-hook
                  (defun selectrum-prescient-reset-conf+ ()
                    (setq selectrum-preprocess-candidates-function #'selectrum-preprocess+
                          selectrum-highlight-candidates-function #'selectrum-highlight+))))
    #+END_SRC

** vertico
   :PROPERTIES:
   :header-args+: :tangle (package-yes! vertico)
   :END:

   #+begin_src emacs-lisp
     (use-package vertico
       ;; TODO: Wait until you can install extensions through MELPA.
       :straight (vertico :repo "minad/vertico"
                          :branch "main"
                          :files (:defaults
                                  "extensions/vertico-quick.el"
                                  "extensions/vertico-repeat.el"))
       :hook ((after-init . vertico-mode)
              (minibuffer-setup . cursor-intangible-mode))
       :custom
       (vertico-count 15)
       (vertico-cycle t)
       (vertico-scroll-margin 0)
       (minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

       :hook (minibuffer-setup . vertico-repeat-save)

       :hook (vertico-mode . vertico-enable-consult-completion-in-region+)
       :preface
       (defun vertico-enable-consult-completion-in-region+ ()
         (setq completion-in-region-function
               (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)))

       :config
       (advice-add #'vertico--arrange-candidates :around
                   (defun vertico-format-candidates+ (func &rest args)
                     (let ((hl-func (or (+completion-category-hl-func vertico--metadata)
                                        #'identity)))
                       (cl-letf* (((symbol-function 'actual-vertico-format-candidate)
                                   (symbol-function #'vertico--format-candidate))
                                  ((symbol-function #'vertico--format-candidate)
                                   (lambda (cand &rest args)
                                     (or (and (eq (nth 2 args) vertico--index)
                                              (minibuffer-override-face+
                                               'vertico-current
                                               (apply #'actual-vertico-format-candidate cand args)))
                                         (apply #'actual-vertico-format-candidate
                                                (funcall hl-func cand) args)))))
                         (apply func args)))))
       (with-eval-after-load 'vertico-grid
         (advice-add #'vertico-grid--arrange-candidates :around #'vertico-format-candidates+))

       (advice-add #'vertico--sort-function :before-until
                   (defun vertico--sort-function+ ()
                     (+completion-category-sort-func vertico--metadata)))

       :config
       (advice-add #'ffap-menu-ask :around
                   (lambda (&rest args)
                     (cl-letf (((symbol-function #'minibuffer-completion-help)
                                #'ignore))
                       (apply args))))

       :general
       (:keymaps 'vertico-map
        "<C-i>" 'vertico-insert
        "C-c C-n" 'vertico-next-group
        "C-c C-p" 'vertico-previous-group
        "<S-return>" 'vertico-exit-input
        [remap minibuffer-forward-char-or-exit+]
        (defun vertico-forward-char-or-exit+ ()
          (interactive)
          (call-interactively (if (eolp)
                                  'vertico-exit
                                'forward-char)))))
   #+end_src

   #+begin_src emacs-lisp
     (use-package vertico-quick
       ;; :straight t
       :general
       (:keymaps 'minibuffer-local-map
        "C-q" 'vertico-quick-exit))
   #+end_src

   #+begin_src emacs-lisp
     (use-package vertico-repeat
       ;; :straight t
       :leader
       ("RET" 'vertico-repeat))
   #+end_src

** minibuffer
   :PROPERTIES:
   :header-args+: :tangle (package-yes! :consult)
   :END:

   Generic minibuffer completion related packages.

*** marginalia
    #+BEGIN_SRC emacs-lisp
      (use-package marginalia
        :straight t
        :hook ((selectrum-mode . marginalia-mode)
               (vertico-mode . marginalia-mode))
        :custom
        (marginalia-align 'right)
        (marginalia-align-offset -1)

        :general
        (:keymaps 'embark-general-map
         "A" 'marginalia-cycle)
        (:keymaps 'minibuffer-local-map
         "C-c TAB" 'marginalia-cycle)

        :config
        (when (package! selectrum)
          (advice-add #'marginalia-cycle :after
                      (lambda ()
                        (when (bound-and-true-p selectrum-mode)
                          (selectrum-exhibit)))))

        (setq marginalia-command-categories
              (append '((projectile-find-file . project-file)
                        (projectile-find-dir . project-file)
                        (projectile-switch-project . file))
                      marginalia-command-categories)))
    #+END_SRC

*** embark
    #+BEGIN_SRC emacs-lisp
      (use-package embark
        :straight t
        :init
        (push 'embark-collect-mode +whitespace-exempt-modes)

        :custom
        (embark-indicators
         (list
          (lambda ()
            (lambda (&optional map _target _prefix)
              (if (not map)
                  (which-key--hide-popup-ignore-command)
                (which-key--show-keymap "Embark" map nil nil 'no-paging))))))

        :init
        (advice-add 'embark-export           :around #'display-buffer-no-select-window-advice)
        (advice-add 'embark-collect-live     :around #'display-buffer-no-select-window-advice)
        (advice-add 'embark-collect-snapshot :around #'display-buffer-no-select-window-advice)

        :config
        (push (cons 'xref-location #'embark-consult-export-grep)
              embark-exporters-alist)

        ;; (push `(,(rx "*Embark " (or "Live" "Completions" "Collect") "*")
        ;;         nil
        ;;         (window-parameters (mode-line-format . none)))
        ;;       display-buffer-alist)

        (defun embark-act-noexit ()
          (interactive)
          (let ((embark-quit-after-action))
            (call-interactively #'embark-act)))

        (defun embark-collect-delete+ ()
          (interactive)
          (unless (eq embark-collect-view 'list)
            (user-error "Can only delete in list view."))
          (call-interactively #'evil-delete-whole-line))

        (add-hook 'embark-collect-mode-hook
                  (defun embark-collect-disable-read-only-mode+ ()
                    (read-only-mode -1)))

        :config
        (defun embark-find-mkdir+ (dir)
          "Mkdirectory and then find it."
          (interactive (list (read-file-name "Directory")))
          (if (file-exists-p dir)
              (message "Warning path already exists: %s" dir)
            (mkdir dir t))
          (find-file dir))

        :config
        (when (package! magit)
          (defun embark-magit-status+ (file)
            (interactive "fFile: ")
            (setq file (file-chase-links file))
            (if-let ((root (project-current-root+
                            (or (when (file-directory-p file)
                                  file)
                                (file-name-directory file)))))
                (magit-status root)
              (user-error "Could not find project root for %s" root)))

          (general-define-key :keymaps 'embark-file-map "g" #'embark-magit-status+)

          (defun embark-magit-library-status+ (lib)
            (interactive (list (read-library-name)))
            (embark-magit-status+ (find-library-name lib)))

          (general-define-key :keymaps 'embark-library-map "g" #'embark-magit-library-status+))

        :general
        (:keymaps 'embark-file-map
         "m" 'embark-find-mkdir+
         "+" 'embark-find-mkdir+)

        :general
        (:states '(normal visual)
         "<C-return>" 'embark-act)
        (:keymaps '(selectrum-minibuffer-map
                    vertico-map)
         "<C-return>" 'embark-act
         "M-RET" 'embark-act-noexit
         "C-c C-o" 'embark-collect-snapshot
         "C-c M-o" 'embark-collect-live
         "C-c C-e" 'embark-export
         "C-c C-b" 'embark-become)
        (:keymaps 'embark-collect-mode-map
         :states 'motion
         "a" 'embark-act
         "u" 'evil-undo
         "C-r" 'evil-redo
         "<" 'tabulated-list-narrow-current-column
         ">" 'tabulated-list-widen-current-column
         "x" 'embark-collect-delete+
         "gj" 'forward-button
         "gk" 'backward-button
         "<C-return>" 'embark-act)
        (:keymaps 'embark-general-map
         "w" nil
         "y" 'kill-new)
        (:keymaps 'embark-file-map
         "=" 'vdiff-files
         "W" nil
         "Y" 'embark-save-relative-path)
        (:keymaps 'embark-command-map
         "g" 'embark-find-definition
         "b" 'global-set-key
         "w" 'where-is)
        (:keymaps 'embark-become-file+buffer-map
         "t" 'find-temp-file+)
        (:keymaps 'embark-face-map
         "I" nil
         "i" nil
         "i" 'embark-insert
         "/" 'make-face-italic
         "?" 'make-face-unitalic)

        :lazy-leader
        (:mode 'embark-collect-mode
         "," 'embark-act
         "s" 'embark-collect-direct-action-minor-mode
         "l" 'embark-collect-toggle-view                                             ; list -> grid -> list
         "a" 'embark-collect-direct-action-minor-mode
         "e" 'embark-export
         "z" 'embark-occur-zebra-minor-mode
         "n" 'tabulated-list-narrow-current-column
         "w" 'tabulated-list-widen-current-column))

      (use-package embark-consult
        :straight t
        :after (embark consult)
        :demand t)
    #+END_SRC

*** consult
    #+BEGIN_SRC emacs-lisp
      (defvar consult-manual-preview-key (list [27 105] (kbd "M-i"))
        "Manual key to trigger `consult--read' previews.")

      (use-package consult
        :straight t
        :commands (consult--read
                   consult-find-no-project+
                   consult-ripgrep-no-project+
                   consult-grep-no-project+
                   consult--buffer-state
                   consult--lookup-cdr)
        :hook (completion-list-mode . consult-preview-at-point-mode)
        :custom
        (consult-async-min-input 2)
        (consult-async-split-style 'slash)
        (consult-async-split-styles-alist
         '((space :separator ?\s :type separator)
           (comma :separator ?, :type separator)
           (semicolon :separator ?\; :type separator)
           (slash :initial "/" :type perl)
           (perl :initial "#" :type perl)))
        (consult-fontify-max-size 100000)
        (register-preview-function #'consult-register-preview)
        (consult-async-refresh-delay 0.05)
        (consult-narrow-key (kbd "M-SPC"))
        (consult-widen-key (kbd "S-SPC"))
        (xref-show-xrefs-function #'consult-xref)
        (xref-show-definitions-function #'consult-xref)
        :init
        (defconst consult-imenu-assoc+
          '(("Class"                         ?c font-lock-type-face)
            ("Struct"                        ?s font-lock-type-face)
            ("Interface"                     ?i font-lock-type-face)
            ("Types"                         ?t font-lock-type-face)
            ("Enum"                          ?e font-lock-type-face)

            ("Namespace"                     ?n font-lock-preprocessor-face)
            (("Module" "Package" "Packages") ?p font-lock-preprocessor-face)

            ("Macros"                        ?@ font-lock-preprocesser-face)
            ("Method"                        ?m font-lock-function-name-face)
            ("Constructor"                   ?K font-lock-function-name-face)
            (("Function" "Functions")        ?f font-lock-function-name-face)

            ("Array"                         ?A font-lock-variable-name-face)
            ("Boolean"                       ?B font-lock-variable-name-face)
            ("Enum Member"                   ?E font-lock-variable-name-face)
            ("Enum Member"                   ?B font-lock-variable-name-face)
            ("Number"                        ?N font-lock-variable-name-face)
            ("Object"                        ?O font-lock-variable-name-face)
            ("String"                        ?S font-lock-variable-name-face)

            ("Constant"                      ?k font-lock-variable-name-face)
            (("Variable" "Variables")        ?v font-lock-variable-name-face)
            ("Field"                         ?V font-lock-variable-name-face)
            ("Property"                      ?P font-lock-variable-name-face))
          "Language agnostic `consult-imenu-config'.
      This forces consistency in narrowing keys across all languages.")

        (defun consult-imenu-gen-types+ (&rest types)
          "Build a `consult-imenu' configuration for TYPES."
          (cl-loop for type in types
                   with conf = nil
                   do (setq conf (cdr
                                  (cl-find-if (lambda (it)
                                                (cond ((stringp it)
                                                       (string-equal it type))
                                                      ((consp it)
                                                       (cl-member type it :test #'string-equal))))
                                              consult-imenu-assoc+
                                              :key #'car)))
                   when conf
                     collect (append (list (car conf) type) (cdr conf))))

        :custom
        ;; NOTE: Be careful when changing this, consult caches imenu items
        ;; and attaches `consult--type' indicators to candidates in the cache.
        ;; Changing this variable probably won't show any changes until the
        ;; cache is invalidated.
        (consult-imenu-config
         `((emacs-lisp-mode :toplevel "Functions"
                            :types ,(consult-imenu-gen-types+
                                     "Functions"
                                     "Macros"
                                     "Packages"
                                     "Types"
                                     "Variables"))
           (perl-mode :toplevel "Functions"
                      :types ((?v "Variables" font-lock-variable-name-face)
                              (?f "Functions" font-lock-function-name-face)))
           ;; Both c-mode and c++-mode have almost identicle imenu functions.
           ,@(let ((conf `(:toplevel "Function"
                           :types ,(consult-imenu-gen-types+
                                    "Function" "Class"))))
               `((c-mode ,@conf)
                 (c++-mode ,@conf)))))

        :init
        ;; Override the types for the current major-mode with types.
        ;; Used for minor-mode configurations since consult doesn't support
        ;; this.
        (defun consult-imenu-override-types+ (&rest types)
          (make-variable-buffer-local 'consult-imenu-config)
          (push `(,major-mode :types ,(apply #'consult-imenu-gen-types+ types))
                consult-imenu-config)
          (setq consult-imenu--cache nil))

        (defun consult-imenu-setup-lsp+ ()
          (consult-imenu-override-types+
           "Class"
           "Struct"
           "Interface"
           "Module"
           "Function"
           "Enum"
           "Namespace"
           "Package"
           "Type Parameter"
           "Variable"
           "Array"
           "Boolean"
           "Constant"
           "Enum Member"
           "Field"
           "Method"
           "Number"
           "Object"
           "Property"
           "String"))

        :hook
        ((eglot--managed-mode
          lsp-mode
          tree-sitter-imenu-mode)
         . consult-imenu-setup-lsp+)

        :config
        (defun consult-ripgrep-prefix-ignore-exit+ (func &rest args)
          (let ((consult-ripgrep-args
                 (concat (when (executable-find "ignore-exit" t)
                           "ignore-exit 1 ")
                         consult-ripgrep-args)))
            (apply func args)))
        (advice-add 'consult-ripgrep :around #'consult-ripgrep-prefix-ignore-exit+)

        :config
        (evil-set-command-property 'consult-outline :jump t)
        (evil-set-command-property 'consult-mark :jump t)
        (evil-set-command-property 'consult-line :jump t)
        (evil-set-command-property 'consult-line-symbol-at-point :jump t)
        (evil-set-command-property 'consult-line-from-isearch :jump t)
        (evil-set-command-property 'consult-flymake :jump t)

        (consult-customize
         consult-ripgrep org-roam-rg
         consult-ripgrep-no-project+
         consult-grep-no-project+
         xref-find-references
         consult-recent-file
         consult--source-recent-file
         +dot-goto-fsmap
         :preview-key consult-manual-preview-key
         consult-recent-file
         :sort nil
         ;; Async commands that produce a lot of output so it's useful for them to be async
         ;; but once produced you won't be re-running the command again.
         consult-find
         consult-find-no-project+
         +dot-goto-executable
         +dot-goto-fsmap
         +dot-open-bookmark
         :initial (concat "/*/")
         switch-to-scratch-buffer
         :state #'consult--buffer-state)

        (defvar consult-font-lock-exclude+ nil
          "The equivalent of `swiper-font-lock-exclude'")

        (advice-add 'consult--line-candidates :around
                    (defun consult--line-candidate-setup (func &rest args)
                      (let ((inhibit-field-text-motion t))
                        (apply func args))))

        (advice-add #'consult--fontify-all :around
                    (defun consult--fontify-prevent-p+ (func &rest args)
                      "The equivalent of `swiper-font-lock-ensure-p'."
                      (unless (or (derived-mode-p 'magit-mode)
                                  (bound-and-true-p magit-blame-mode)
                                  (memq major-mode consult-font-lock-exclude+))
                        (apply func args))))

        (defmacro with-consult-ignore-project+ (func)
          `(defun ,(intern (concat (symbol-name func) "-no-project+")) ()
             ,(format "Variant of `%s' which skips project checks." func)
             (interactive)
             (let ((consult-project-function nil))
               (funcall-interactively (quote ,func)))))

        (with-consult-ignore-project+ consult-ripgrep)
        (with-consult-ignore-project+ consult-grep)
        (with-consult-ignore-project+ consult-find)

        :config
        (advice-add 'consult-line :after
                    ;; From the venerable [[https://github.com/minad/consult/issues/318#issuecomment-882067919][noctuid]].
                    (defun consult-line-evil-history+ (&rest _)
                      "Add latest `consult-line' search pattern to the evil search history ring."
                      (when (and (bound-and-true-p evil-mode)
                                 (eq evil-search-module 'evil-search))
                        (let* ((input (car consult--line-history))
                               (pattern (cond ((member 'orderless completion-styles)
                                               (eval
                                                `(rx (or ,@(cl-loop for regexp in (orderless-pattern-compiler input)
                                                                    collect `(regexp ,regexp))))))
                                              (t input))))
                          (add-to-history 'evil-ex-search-history pattern)
                          (setq evil-ex-search-pattern (list pattern t t)
                                evil-ex-search-direction 'forward)
                          (when evil-ex-search-persistent-highlight
                            (evil-ex-search-activate-highlight evil-ex-search-pattern))))))

        :config
        (defvar consult--source-dired
          `(:name     "Dired"
            :narrow   ?d
            :hidden   t
            :category buffer
            :face     dired-directory
            :state    ,#'consult--buffer-state
            :items
            ,(lambda ()
               (consult--buffer-query :mode 'dired-mode
                                      :sort 'visibility
                                      :as #'buffer-name)))
          "Dired buffer candidate source for `consult-buffer'.")

        (push #'consult--source-dired consult-buffer-sources)

        :init
        ;; Fix cookie suffixes with some commands make $ (EOL) matching fail.
        (defun consult-fix-dollar+ (args)
          (if (string-suffix-p "$" (car args))
              (list (concat (substring (car args) 0 -1)
                            (rx (zero-or-more (any "\x100000-\x10FFFD")) eol)))
            args))
        (advice-add #'orderless-regexp :filter-args #'consult-fix-dollar+)
        (advice-add #'prescient-regexp-regexp :filter-args #'consult-fix-dollar+)

        :leader
        (:mode '(selectrum-mode
                 vertico-mode)
         :minor t
         "aa" 'consult-minor-mode-menu
         "ee" 'consult-compile-error
         "jc" 'consult-compile-error
         "je" 'consult-compile-error                                                  ; Overriden by flycheck/flymake
         "ju" 'consult-outline
         "hx" 'consult-complex-command
         "ax" 'consult-mode-command
         "rr" 'consult-register
         "rm" 'consult-mark
         "fr" 'consult-recent-file
         "ee" 'consult-compile-error
         "sr" 'consult-ripgrep-no-project+
         "sb" 'consult-grep-no-project+
         "sv" 'consult-git-grep
         "fs" '(:ignore t :wk "search")
         "fsf" 'consult-find-no-project+
         "kg" 'consult-kmacro
         "ry" 'consult-yank-pop

         "ps" '(:ignore t :wk "search")
         "psr" 'consult-ripgrep
         "psf" 'consult-find
         "psv" 'consult-git-grep
         "psb" 'consult-grep
         "psi" 'consult-imenu-multi)
        (:mode '(org-mode
                 outline-mode
                 magit-log-mode)
         "g" 'consult-imenu)
        (:minor t :mode 'flymake-mode  "je" 'consult-flymake)

        :general
        (:keymaps 'org-mode-map
         [remap consult-imenu] 'consult-org-heading
         [remap imenu] 'consult-org-heading)
        ([remap execute-extended-command-for-buffer] 'consult-mode-command
         [remap imenu] 'consult-imenu
         [remap imenu-anywhere] 'consult-imenu-multi
         [remap switch-to-buffer] 'consult-buffer
         [remap multi-occur] 'consult-multi-occur
         [remap apropros-command] 'consult-apropos
         [remap bookmark-jump] 'consult-bookmark
         [remap goto-line] 'consult-goto-line
         [remap isearch-forward] 'consult-line
         [remap keep-lines] 'consult-keep-lines
         [remap load-theme] 'consult-theme
         [remap org-agenda] 'consult-org-agenda
         [remap project-switch-to-buffer] 'consult-project-buffer
         ;; [remap flush-lines] 'consult-flush-lines
         [remap man] 'consult-man
         [remap woman] 'consult-man
         "C-M-y" 'consult-yank-pop
         "C-s" 'consult-line)
        (:keymaps 'projectile-mode-map
         [remap project-switch-to-buffer] 'consult-project-buffer)
        (:keymaps 'evil-ex-completion-map
         "C-s" 'consult-history)
        (:keymaps 'minibuffer-local-map
         ;; TODO: Pick one, leave other for something else.
         "C-s" 'consult-history
         "C-r" 'consult-history))
    #+END_SRC

*** consult-bufler
    :PROPERTIES:
    :header-args+: :tangle (package-yes! bufler :consult)
    :END:

    #+begin_src emacs-lisp
      (defvar consult--bufler-workspace+
        `(:name "Workspace"
          :narrow ?w
          :category buffer
          :face consult-buffer
          :history  buffer-name-history
          :state    ,#'consult--buffer-state
          :enabled  ,(lambda () (frame-parameter nil 'bufler-workspace-path))
          :items
          ,(lambda ()
             (let ((bufler-vc-state nil))
               (mapcar #'buffer-name
                       (mapcar #'cdr
                               (bufler-buffer-alist-at
                                (frame-parameter nil 'bufler-workspace-path)
                                :filter-fns bufler-filter-buffer-fns))))))
        "Bufler workspace buffers source for `consult-buffer'.")

      (with-eval-after-load 'consult
        (push #'consult--bufler-workspace+ consult-buffer-sources))
    #+end_src

*** consult-flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package consult-flycheck
        :straight t
        :leader
        (:minor t :mode 'flycheck-mode "je" 'consult-flycheck)
        :config
        (evil-set-command-property 'consult-flycheck :jump t))
    #+END_SRC

*** consult-lsp
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! :consult lsp-mode)
      (use-package consult-lsp
        :straight t
        :config
        (evil-set-command-property 'consult-lsp :jump t)

        :leader
        (:mode 'lsp-mode
         :minor t
         :prefix leader-server-leader-prefix
         "j" 'consult-lsp-symbols)
        :general
        (:keymaps 'lsp-mode-map
         [remap xref-find-apropos] 'consult-lsp-symbols))
    #+END_SRC

*** consult-eglot
    :PROPERTIES:
    :header-args+: :tangle (package-str! (lisp! "+consult-eglot.el") :consult eglot)
    :END:

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! :consult eglot)
      (use-package consult-eglot
        :straight (consult-eglot :host github
                                 :repo "mohkale/consult-eglot")
        :init
        (evil-set-command-property 'consult-eglot :jump t)

        :custom
        (consult-eglot-show-kind-name nil)

        :general
        (:keymaps 'eglot-mode-map
         [remap xref-find-apropos] 'consult-eglot-symbols
         [remap xref-find-references-and-replace] 'eglot-rename))
    #+END_SRC

*** consult-notmuch
    #+begin_src emacs-lisp :tangle (package-yes! :consult notmuch)
      (use-package consult-notmuch
        :straight t
        :leader
        ("an" #'consult-notmuch)

        :init
        (advice-add #'notmuch-read-tag-changes :filter-return
                    ;; See [[https://github.com/minad/vertico/issues/119][vertico#119]].
                    (defun notmuch-fix-notmuch-read-tag-changes+ (x)
                      (mapcar #'string-trim x))))
    #+end_src

*** consult-bibtex
    A native emacs variant for ivy-bibtex.

    KLUDGE: First I need to make sure the proper version of bibtex-completion is installed.
    #+begin_src emacs-lisp
      (use-package bibtex-completion
        :straight (bibtex-completion :host github :repo "mohkale/helm-bibtex"))
    #+end_src

    #+begin_src emacs-lisp
      (use-package consult-bibtex
        :straight (consult-bibtex :host github :repo "mohkale/consult-bibtex")
        :init
        (autoload 'consult-bibtex--read-entry "consult-bibtex" nil nil)
        (autoload 'consult-bibtex--candidates "consult-bibtex" nil nil)

        (with-eval-after-load 'embark
          (add-to-list 'embark-keymap-alist '(bibtex-completion . consult-bibtex-embark-map)))

        :commands (consult-bibtex-insert-pdftools-link+)
        :custom
        (consult-bibtex-default-action #'consult-bibtex-insert-pdftools-link+)
        :config
        (consult-bibtex-embark-action consult-bibtex-insert-pdftools-link+ bibtex-insert-pdfbib-link+)
        (define-key consult-bibtex-embark-map "p" #'consult-bibtex-insert-pdftools-link+)

        :leader
        ("ob" 'consult-bibtex)
        (:mode 'org-mode
         "[" 'consult-bibtex))
    #+end_src

*** consult-company                                                    :comp:
    :PROPERTIES:
    :header-args+: :tangle (package-yes! :consult company)
    :END:

    #+begin_src emacs-lisp
      (use-package consult-company
        :straight t
        :general
        (:keymaps 'company-mode-map
         [remap completion-at-point] #'consult-company))
    #+end_src

*** consult-yasnippet
    #+begin_src emacs-lisp :tangle (package-yes! :consult)
      (use-package consult-yasnippet
        :straight (consult-yasnippet :host github
                                     :repo "mohkale/consult-yasnippet")
        :config
        (with-eval-after-load 'embark
          (embark-define-keymap embark-yasnippet-completion-actions
            "Embark actions for `consult-yasnippet' and derivatives."
            ("d" consult-yasnippet-visit-snippet-file)                                  ; NOTE: Binding differs from `ivy-yasnippet' which uses "v".
            ("g" consult-yasnippet-visit-snippet-file)                                  ; NOTE: Binding differs from `ivy-yasnippet' which uses "v".
            )

          (push '(yasnippet . embark-yasnippet-completion-actions)
                embark-keymap-alist))

        :general
        (:states '(insert normal)
         "C-M-i" 'consult-yasnippet))
    #+end_src

*** all-the-icons-completion
    #+begin_src emacs-lisp :tangle (if (and (package! :consult) +completions-icon) "yes" "no")
      (use-package all-the-icons-completion
        :straight t
        :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)

        :init
        (advice-add 'all-the-icons-completion-get-icon :filter-return #'all-the-icons-pad-on-tty-advice+))
    #+end_src

*** consult-extensions
    :PROPERTIES:
    :header-args+: :tangle (package-str! (lisp! "+consult-custom.el") :consult)
    :END:

    Consult is great but there's some commands its missing that I've had to implement
    myself. Most of those go into this branch and are tangled to a separate file from
    my main ~init.el~ to allow ~consult~ to be deferred.

    #+BEGIN_SRC emacs-lisp
      (require 'consult)
      (require 'embark)
      (require 'marginalia)
    #+END_SRC

**** consult-evil-jumps
     Adapted from [[*counsel-evil-jumps][counsel-evil-jumps]].

     #+begin_src emacs-lisp :tangle (package-yes! :consult)
       (autoload 'consult-evil-jumps+ "+consult-custom.el" nil t)
       (evil-set-command-property 'consult-evil-jumps+ :jump t)

       (leader-set-keys
         "rj" 'consult-evil-jumps+)
     #+end_src

     #+BEGIN_SRC emacs-lisp
       (defvar consult--evil-jumps-history+ nil)

       (defun consult--evil-jumps-candidates+ (arg)
         (-filter
          (lambda (a)
            (or (not arg)
                (string-equal (cadr a) (smart-buffer-file-name))))
          (cl-remove-duplicates
           (evil--jumps-savehist-sync)
           :test (lambda (a b)
                   (and
                    (equal (car a) (car b))
                    (string-equal (car (cdr a))
                                  (car (cdr b))))))))

       (cl-defun consult--evil-jumps-format+ (open (point file))
         (with-current-buffer (funcall open file)
           (save-restriction
             (save-excursion
               (widen)
               (ignore-errors
                 (goto-char point))
               (let* ((line (line-number-at-pos point consult-line-numbers-widen))
                      (beg (line-beginning-position))
                      (end (line-end-position))
                      (cand (concat
                             (concat (propertize file 'face 'consult-file) ":"
                                     (propertize (number-to-string line) 'face 'consult-location)
                                     ":")
                             (consult--region-with-cursor beg end (point-marker)))))
                 (put-text-property 0 1 'consult--grep-file file cand)
                 cand)))))

       (defun consult-evil-jumps+ (&optional arg)
         "Jump to an evil-mode jump.
       When ARG is given only jump to marks in the current buffer."
         (interactive "P")
         (let* ((open (consult--temporary-files))
                (cands (consult--with-increased-gc
                        (mapcar (apply-partially #'consult--evil-jumps-format+ open)
                                (consult--evil-jumps-candidates+ arg)))))
           (funcall open nil) ;; Clear temporarily opened files, `consult--grep-state' will reopen them.
           (consult--read
            cands
            :prompt "Evil jump: "
            :lookup #'consult--lookup-member
            :category 'consult-location
            :sort nil
            :require-match t
            :group #'consult--grep-group
            :history '(:input consult--line-history)
            :add-history (thing-at-point 'symbol)
            :state (consult--grep-state))))
     #+END_SRC

**** consult-org-ref
     #+begin_src emacs-lisp :tangle (package-yes! :consult)
       (autoload 'org-ref-consult-insert-cite-link "+org-ref-consult-cite.el" nil t)
       (autoload 'org-ref-consult-insert-label-link "+org-ref-consult-cite.el" nil t)
       (autoload 'org-ref-consult-insert-ref-link "+org-ref-consult-cite.el" nil t)

       (with-eval-after-load 'org-ref
         (require '+org-ref-consult-cite))
     #+end_src

     #+BEGIN_SRC emacs-lisp :tangle (package-str! (lisp! "+org-ref-consult-cite.el") :consult)
       (setq org-ref-completion-library '+org-ref-consult-cite)

       (setq
        org-ref-insert-link-function 'org-ref-insert-link
        org-ref-insert-cite-function 'org-ref-consult-insert-cite-link
        org-ref-insert-label-function 'org-ref-consult-insert-label-link
        org-ref-insert-ref-function 'org-ref-consult-insert-ref-link
        org-ref-cite-onclick-function (lambda (_)
                                        (org-ref-citation-hydra/body)))

       (defun org-ref-use-consult-bibtex+ (type &optional arg)
         (concat type ":" (consult-bibtex--read-entry)))

       (dolist (type org-ref-cite-types)
         (advice-add (intern (format "org-%s-complete-link" type)) :override
                     (apply-partially #'org-ref-use-consult-bibtex+ type)))

       (defun org-ref-consult-insert-cite-link (&optional arg)
         "consult function for interacting with bibtex.
       Uses `org-ref-find-bibliography' for bibtex sources, unless a
       prefix ARG is used, which uses `org-ref-default-bibliography'."
         (interactive "P")
         (let ((files (if arg
                                                  org-ref-default-bibliography
                                          (org-ref-find-bibliography))))
           (org-ref-insert-key-at-point
            ;; TODO: Support multiple keys at once.
            (list
             (consult-bibtex--read-entry
              nil (consult-bibtex--candidates (orhc-bibtex-candidates)))))))

       (defun org-ref-consult-insert-label-link ()
         "Insert a label with `completing-read'."
         (interactive)
         (insert
          (concat (if (not (looking-back "label:" 6)) "label:" "")
                        (completing-read "label: " (org-ref-get-labels)))))

       (defun org-ref-consult-insert-ref-link ()
         "Insert a ref link with `completing-read'.
       Use a prefix arg to select the ref type."
         (interactive)
         (let ((label (completing-read "label: " (org-ref-get-labels) nil t)))
           (cond
            ;; from a colon insert
            ((looking-back ":" 1)
             (insert label))
            ;; non-default
            (current-prefix-arg
             (insert
              (completing-read "type: " org-ref-ref-types)
              ":"
              label))
            ;; default
            (t
             (insert
              (or (when (looking-at "$") " ") "")
              (concat (org-ref-infer-ref-type label)
                            ":"
                            label))))))

       (provide '+org-ref-consult-cite)
     #+END_SRC

**** consult-evil-marks
     Taken from [[https://github.com/abo-abo/swiper/blob/25439e26a67b54d1f8aab1cbc727228427692ec8/counsel.el#L4198][counsel.el]].

     #+begin_src emacs-lisp :tangle (package-yes! :consult)
       (autoload 'consult-evil-marks+ "+consult-custom.el" nil t)
       (evil-set-command-property 'consult-evil-marks+ :jump t)

       (leader-set-keys
         "rn" 'consult-evil-marks+)
     #+end_src

     #+BEGIN_SRC emacs-lisp
       (defun consult--evil-marks-candidates+ ()
         "Convert all evil-marks in the current buffer to mark candidates.
       A mark is a register which points to a location in the current buffer."
         (cl-loop for (char . data) in (when (bound-and-true-p evil-markers-alist)
                                         (append
                                          evil-markers-alist
                                          (default-value 'evil-markers-alist)))
                  if (or (not (evil-global-marker-p char))
                         (markerp data))
                  collect (cons (consult-register-format (cons char data)) data)))

       (defun consult-evil-marks+ (&optional marker bol)
         "Jump to an evil-mark in the current buffer."
         (interactive
          (list
           (if-let ((marks (consult--with-increased-gc (consult--evil-marks-candidates+))))
               (consult--read
                marks
                :prompt "Evil mark: "
                :category 'consult-location
                :sort nil
                :require-match t
                :lookup #'consult--lookup-cdr
                :history t ;; disable history
                :add-history (thing-at-point 'symbol)
                :state (consult--jump-preview))
             (user-error "No evil-marks active in the current buffer"))
           (when current-prefix-arg
             (prefix-numeric-value current-prefix-arg))))
         (goto-char marker)
         (when bol
           (goto-char (line-beginning-position))))
     #+END_SRC

**** consult-org-capture
     Copied from [[https://github.com/abo-abo/swiper/blob/25439e26a67b54d1f8aab1cbc727228427692ec8/counsel.el#L3871][counsel.el]].

     #+begin_src emacs-lisp :tangle (package-yes! :consult)
       (autoload 'consult-org-capture+ "+consult-custom.el" nil t)
       (setq +org-capture-function 'consult-org-capture+)
       ;; (general-define-key [remap org-capture] 'consult-org-capture+)
     #+end_src

     #+BEGIN_SRC emacs-lisp
       (defun consult-org-capture-candidates+ ()
         "Taken from `counsel-org-capture'."
         (cl-loop
          with prefixes = nil
          for x in (or (org-contextualize-keys
                        (org-capture-upgrade-templates org-capture-templates)
                        org-capture-templates-contexts)
                       '(("t" "Task" entry (file+headline "" "Tasks")
                          "* TODO %?\n  %u\n  %a")))
          nconc (let ((x-keys (car x)))
                  ;; Remove prefixed keys until we get one that matches the current item.
                  (while (and prefixes
                              (let ((p1-keys (caar prefixes)))
                                (or
                                 (<= (length x-keys) (length p1-keys))
                                 (not (string-prefix-p p1-keys x-keys)))))
                    (pop prefixes))
                  (if (> (length x) 2)
                      (let ((desc (mapconcat #'cadr (reverse (cons x prefixes)) " | ")))
                        (list (cons (format "%-5s %s" x-keys desc) x-keys)))
                    (push x prefixes)
                    nil))))

       (defvar consult-org-capture-history+ nil)
       (defun consult--org-capture+ ()
         "Backend implementation for `consult-org-capture'."
         (consult--read (consult--with-increased-gc
                         (consult-org-capture-candidates+))
                        :prompt "Capture template: "
                        :lookup #'consult--lookup-cdr
                        :category 'org-capture
                        :require-match t
                        :sort nil
                        :history 'consult-org-capture-history+))

       (defun consult-org-capture+ (key)
         "Capture something."
         (interactive
          (list (consult--org-capture+)))
         (org-capture nil key))

       (defun consult-org-capture-goto-target+ (key)
         (interactive
          (list (consult--org-capture+)))
         (org-capture-goto-target key))

       (defun consult-org-capture-insert-template+ (key)
         (interactive
          (list (consult--org-capture+)))
         (org-capture (point) key))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (embark-define-keymap embark-org-capture-completion-actions+
         "Embark bindings for org-capture completion candidates."
         ("t" consult-org-capture-goto-target+)
         ("l" org-capture-goto-last-stored+)
         ("i" consult-org-capture-insert-template+))

       (add-to-list 'embark-keymap-alist '(org-capture . embark-org-capture-completion-actions+))
     #+END_SRC

**** consult-ebdb
     #+begin_src emacs-lisp :tangle (package-yes! :consult ebdb)
       (autoload 'consult-ebdb-display-records+ "+consult-custom.el" nil t)
       (autoload 'consult-ebdb-mail+ "+consult-custom.el" nil t)
       (autoload 'consult-ebdb-cite-records-mail+ "+consult-custom.el" nil t)
       (autoload 'embark-ebdb-completion-actions+ "+consult-custom.el")

       (leader-set-keys "ak" '(consult-ebdb-display-records+ :wk "consult-ebdb"))
     #+end_src

     #+begin_src emacs-lisp
       (defun consult-ebdb-cands+ ()
         (require 'ebdb)
         (mapcar
          ;; This same lambda is used in `ebdb-counsel'.
          (lambda (rec)
            (let* ((rec-string (ebdb-string rec))
                   (mails (ebdb-record-mail-canon rec))
                   (mail-list (when mails
                                (mapconcat #'identity mails " "))))
              (cons (if mail-list
                        (concat rec-string " => " mail-list)
                      rec-string)
                    rec)))
          (ebdb-records)))

       (defun consult-ebdb-read+ ()
         (if-let ((cands (consult-ebdb-cands+)))
             (cdr
              (assoc
               (completing-read "Records: "
                                (lambda (str pred action)
                                  (if (eq action 'metadata)
                                      '(metadata (category . ebdb))
                                    (complete-with-action action cands str pred))))
               cands))
           (user-error "No ebdb candidates found.")))

       (defmacro consult-ebdb-define-cmd+ (cmd)
         `(defun ,(intern (concat "consult-" (symbol-name cmd) "+")) (rec)
            (interactive (list (consult-ebdb-read+)))
            (,cmd rec)))

       (defun consult-ebdb-display-records+ (rec)
         (interactive (list (consult-ebdb-read+)))
         (ebdb-display-records (list rec) nil t))
       (consult-ebdb-define-cmd+ ebdb-mail)
       (consult-ebdb-define-cmd+ ebdb-cite-records)
     #+end_src

     #+begin_src emacs-lisp
       (embark-define-keymap embark-ebdb-completion-actions+
         "Embark bindings for ebdb."
         ("g" consult-org-capture-goto-target+)
         ("c" consult-ebdb-mail+)
         ("i" consult-ebdb-cite-records+))

       (add-to-list 'embark-keymap-alist '(ebdb . embark-ebdb-completion-actions+))
     #+end_src

**** consult-line-or-grep
     #+begin_src emacs-lisp :tangle (package-yes! :consult)
       (autoload 'consult-line-or-ripgrep+ "+consult-custom.el" nil t)
       (general-define-key [remap consult-line] 'consult-line-or-ripgrep+)
     #+end_src

     #+begin_src emacs-lisp
       (defvar consult-line-or-ripgrep-line-limit+ (* 2 1024 1024) ; 2 MiB
         "Buffer size threshold for `consult-line-or-ripgrep+'.
       When the number of characters in a buffer exceeds this threshold,
       `consult-ripgrep' will be used instead of `consult-line'.")

       (defun consult-line-or-ripgrep--builder+ (file-name)
         (lambda (input)
           (when-let ((it (consult--ripgrep-builder input)))
             (plist-put it :command
                        (append (plist-get it :command)
                                (list "--" (shell-quote-argument file-name)))))))

       (defun consult-line-or-ripgrep+ (&optional initial)
         "Call `consult-line' for small buffers or `consult-ripgrep' for large files."
         (interactive)
         (if (or (not buffer-file-name)
                 (buffer-narrowed-p)
                 (ignore-errors
                   (file-remote-p buffer-file-name))
                 (jka-compr-get-compression-info buffer-file-name)
                 (<= (buffer-size)
                     (/ consult-line-or-ripgrep-line-limit+
                        (if (eq major-mode 'org-mode) 2 1))))
             (call-interactively 'consult-line)
           (when (file-writable-p buffer-file-name)
             (save-buffer))
           (let ((consult-ripgrep-args (string-remove-suffix " ." consult-ripgrep-args)))
             (consult--grep "Ripgrep"
                            (consult-line-or-ripgrep--builder+ buffer-file-name)
                            nil initial))))
     #+end_src

**** consult-dash
     #+begin_src emacs-lisp :tangle (package-yes! dash :consult)
       (autoload 'consult-dash+ "+consult-custom.el" nil t)
     #+end_src

     #+begin_src emacs-lisp
  
     #+end_src

**** consult-extensions-eob
     #+BEGIN_SRC emacs-lisp
       (provide '+consult-custom)
     #+END_SRC

**** dotfiles
     :PROPERTIES:
     :header-args+: :tangle (lisp! "+consult-dotfiles.el")
     :END:

     This branch defines commands to interface with scripts from my [[https://github.com/mohkale/dotfiles][dotfiles]].

     #+BEGIN_SRC emacs-lisp :tangle (package-yes! :consult)
       (use-package +consult-dotfiles
         :commands (+dot-goto-fsmap
                    +dot-goto-executable
                    +dot-open-bookmark)
         :leader
         ("fd" '(:ignore t :wk "dotfiles")
          "fda" '+dot-goto-fsmap
          "fdf" '+dot-goto-fsmap
          "fdx" '+dot-goto-executable
          "fdb" '+dot-open-bookmark))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (defvar +dot-goto-executable-history nil)

       (defun +dot-goto-executable (executable)
         "List and jump to an executable using [[https://github.com/mohkale/dotfiles/blob/master/bin/ls-exec][ls-exec]]."
         (interactive
          (list (consult--read
                 (consult--async-command
                     (lambda (input)
                       (pcase-let ((`(,arg . ,opts) (consult--command-split input)))
                         (unless (string-blank-p arg)
                           (list :command `("ls-exec" ,arg ,@opts)
                                 :highlight (cdr (consult--default-regexp-compiler
                                                  input 'basic completion-ignore-case)))))))
                 :prompt "Find executable: "
                 :category 'file
                 :require-match t
                 :history '(:input +dot-goto-executable-history)
                 :initial (consult--async-split-initial "*"))))
         (find-file executable))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (defvar +dot-goto-fsmap-narrow '((?f . "File")
                                        (?d . "Directory")
                                        (?s . "Symlink")
                                        (?u . "Unknown")))

       (defun +dot-goto-fsmap-format-lines (async builder)
         (let ((highlight))
           (lambda (action)
             (cond ((stringp action)
                    (setq highlight (plist-get (funcall builder action) :highlight))
                    (funcall async action))
                   ((consp action)
                    (let (result)
                      (save-match-data
                        (dolist (fsmap action)
                          (when (string-match (rx bol
                                                  (group (one-or-more (not whitespace)))
                                                  ":"
                                                  (group (one-or-more anychar))
                                                  eol)
                                              fsmap)
                            (push (let* ((alias (match-string 1 fsmap))
                                         (path  (match-string 2 fsmap))
                                         str)
                                    (setq str (concat (propertize alias 'face 'font-lock-type-face)
                                                      " "
                                                      path))
                                    (add-text-properties 0 1 `(consult--type
                                                               ,(or (let ((type (file-attribute-type (file-attributes (file-chase-links path)))))
                                                                      (cond
                                                                       ((eq type t) ?d)
                                                                       ((eq type nil) ?f)
                                                                       ((stringp type) ?s)))
                                                                    ?u))
                                                         str)
                                    (list str (expand-file-name path) 1 1))
                                  result))))
                      (funcall async (nreverse result))))
                   (t (funcall async action))))))

       (defvar +dot-goto-fsmap-history nil)

       (defun +dot-goto-fsmap (file)
         "List file system maps (using [[https://github.com/mohkale/dotfiles/blob/c534c70befdfcae7abaad3f0a6777392f63db6c5/bin/ls-fsmaps][here]]) and find one in emacs."
         (interactive
          (list (car
                 (let ((builder (lambda (input)
                                  (pcase-let* ((`(,arg . ,opts) (consult--command-split input)))
                                    (unless (string-blank-p arg)
                                      (list :command `("ls-fsmaps" "-er" ,arg ,@opts)
                                            :highlight (cdr (consult--default-regexp-compiler
                                                             input 'basic completion-ignore-case))))))))
                   (consult--read
                    (consult--async-command builder
                      (+dot-goto-fsmap-format-lines builder))
                    :prompt "File system map: "
                    :lookup #'consult--lookup-cdr
                    :require-match t
                    :group
                    (consult--type-group +dot-goto-fsmap-narrow)
                    :narrow
                    ;; (consult--type-narrow +dot-goto-fsmap-narrow)
                    (let* ((narrow (consult--type-narrow +dot-goto-fsmap-narrow))
                           (pred (plist-pop! narrow :predicate)))
                      `(:predicate
                        ,(lambda (cand)
                           (funcall pred (car cand)))
                        ,@narrow))
                    :history '(:input +dot-goto-fsmap-history)
                    :initial (consult--async-split-initial "*"))))))
         (find-file file))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (defun +dot-open-bookmark-format-lines (async builder)
         (let (highlight)
           (lambda (action)
             (cond ((stringp action)
                    (setq highlight (plist-get (funcall builder action) :highlight))
                    (funcall async action))
                   ((consp action)
                    (funcall async
                     (cl-loop for row in action
                              do (setq row (split-string row "\t"))
                              with url   = nil
                              with tags  = nil
                              with title = nil
                              do (setq url   (nth 0 row)
                                       tags  (nth 1 row)
                                       title (nth 2 row))
                              when (string-prefix-p "http" url)
                                collect (cons
                                         (concat (unless (string-empty-p tags)
                                                   (propertize (concat "(" tags ") ") 'face 'bold))
                                                 title
                                                 (when url
                                                   (when-let ((domain (url-domain (url-generic-parse-url url))))
                                                     (concat " [" (propertize domain 'face 'font-lock-preprocessor-face) "]"))))
                                         url))))
                   (t (funcall async action))))))

       (defvar +dot-open-bookmark-history nil)

       (defun +dot-open-bookmark (bookmark)
         "List system bookmarks (using [[https://github.com/mohkale/dotfiles/blob/master/bin/ls-bookmarks][this]]) and open it in your default browser."
         (interactive
          (list
           (let ((builder (lambda (input)
                            (pcase-let* ((`(,arg . ,opts) (consult--command-split input)))
                              (unless (string-blank-p arg)
                                (list :command `("ls-bookmarks" ,arg ,@opts)
                                      :highlight (cdr (consult--default-regexp-compiler
                                                       input 'basic completion-ignore-case))))))))
             (consult--read
              (consult--async-command builder
                (+dot-open-bookmark-format-lines builder))
              :prompt "Bookmark: "
              :lookup #'consult--lookup-cdr
              :require-match t
              :history '(:input +dot-open-bookmark-history)
              :initial (consult--async-split-initial "*")))))
         (+xopen-url bookmark))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (provide '+dotfiles)
     #+END_SRC

*** affe
    An experiment for asynchronous fuzzy finding in emacs based on consult.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package affe
        :straight t
        :custom
        (affe-find-command "find -type f")
        (affe-count 100)

        :config
        (when (package! orderless)
          (setq affe-regexp-function #'orderless-pattern-compiler
                affe-highlight-function #'orderless-highlight-matches))
        :leader
        (:mode '(selectrum-mode
                 vertico-mode)
         :minor t
         "fsF" 'affe-find
         "fsr" 'affe-grep))
    #+END_SRC

** apheleia
   :PROPERTIES:
   :header-args+: :tangle (package-yes! apheleia)
   :END:

   Auto-format buffers on save using programs like ~black~ or ~gofmt~.

   #+begin_src emacs-lisp
     (use-package apheleia
       :straight t
       :hook (go-mode . apheleia-mode)
       :leader
       ("tma" 'apheleia-mode
        "bf" 'apheleia-format-buffer)

       :custom
       (apheleia-hide-log-buffers t)

       :preface
       (defun apheleia-indent+ (tab-flag indent-flag indent-var)
         (cond
          (indent-tabs-mode tab-flag)
          (indent-var
           (when-let ((indent (and (boundp indent-var)
                                   (symbol-value indent-var))))
             (list indent-flag (number-to-string indent))))))

       (defun apheleia-fill-column+ (fill-flag)
         (when-let ((wrap (bound-and-true-p fill-column)))
           (list fill-flag (number-to-string wrap))))

       (defun apheleia-locate-file+ (file-flag file-name)
         (when-let ((file (locate-dominating-file default-directory file-name)))
           (list file-flag file)))

       (defun apheleia-extension-p+ (&rest exts)
         (when-let ((name (or buffer-file-name
                              (apheleia--safe-buffer-name)))
                    (ext (file-name-extension name)))
           (cl-find-if (apply-partially #'string-equal ext)
                       exts)))

       (defun apheleia-mode-ext-assoc+ ()
         (cl-case major-mode
           (c-mode ".c")
           (c++-mode ".cpp")
           (glsl-mode ".glsl")
           (java-mode ".java")))

       :custom
       (apheleia-formatters
        `((asmfmt "asmfmt")
          (astyle "astyle" (apheleia-locate-file+ "--options" ".astylerc"))
          (atsfmt "atsfmt")
          (black "black" "--quiet" (when (apheleia-extension-p+ "pyi") "--pyi") "-")
          (brittany "brittany")
          (bsrefmt "bsrefmt")
          (buildifier "buildifier")
          (cabal-fmt "cabal-fmt")
          (clang-format "clang-format"
                        "--assume-filename" (or (buffer-file-name)
                                                (apheleia-mode-ext-assoc+))
                        ;; This should ideally be set in a .clang-format file
                        ;; but since I'm more inclined to use editorconfig it
                        ;; shouldn't really matter.
                        (when-let ((indent (bound-and-true-p c-basic-offset)))
                          (list "--style" (format "{IndentWidth: %d}" indent))))
          (cmake-format "cmake-format" "-")
          (crystal-tool "crystal" "tool" "format" "-")
          (gawk "gawk" "-f" "-" "--pretty-print=-")
          (gofmt "gofmt")
          (goimports "goimports")
          (google-java-format "google-java-format" "-")
          (html-tidy "tidy"
                     "--quiet" "yes" "-indent" "auto" "--vertical-space" "yes"
                     "--tidy-mark" "no"
                     (when (derived-mode-p 'nxml-mode)
                       "-xml")
                     (apheleia-indent+
                      (list "--indent-with-tabs" "yes")
                      "--indent-spaces"
                      (cond
                       ((derived-mode-p 'nxml-mode)
                        'nxml-child-indent)
                       ((derived-mode-p 'web-mode)
                        'web-mode-indent-style)))
                     (apheleia-fill-column+ "-wrap"))
          (isort "isort" "--stdout" "-")
          (jq "jq" "."
              (apheleia-indent+ "--tab" "--indent" 'js-indent-level))
          (latexindent "latexindent")
          (mix-format "mix" "format" "-")
          (ocamlformat "ocamlformat" "-" "--name" filepath)
          (perltidy "perltidy" "--quiet" "--standard-error-output")
          (prettier npx
                    "prettier"
                    "--stdin-filepath" filepath
                    (apheleia-indent+
                     "--use-tabs" "--tab-width"
                     (cl-case major-mode
                       ('js-mode 'js-indent-level)
                       ('js2-mode 'js2-basic-offset)
                       ('(js-jsx-mode typescript-react-mode)
                        'js-indent-level))))
          (rubocop "rubocop" "--stdin" filepath "--auto-correct"
                   "--stderr" "--format" "quiet" "--fail-level" "fatal")
          (rufo "rufo" "--filename" filepath)
          (rustfmt "rustfmt" "--unstable-features" "--skip-children"
                   "--quiet" "--emit" "stdout")
          (shfmt "shfmt"
                 "-filename" filepath
                 "-ln" (cl-case sh-shell
                         ((zsh bash) "bash")
                         (t "posix"))
                 "-i" (number-to-string
                       (cond
                        (indent-tabs-mode 0)
                        (t sh-basic-offset)))
                 "-")
          (beautysh "beautysh"
                    (when-let ((indent (bound-and-true-p sh-basic-offset)))
                      (list "--indent-size" (number-to-string indent)))
                    (when indent-tabs-mode "--tab")
                    "-")
          (terraform "terraform" "fmt" "-"))
        "Formatter command generation configuration.")

       :preface
       (defun apheleia-unpack-mode-alist+ (conf)
         (cl-loop
         for (mode . formatter) in conf
         ;; Unpack keys mode-lists into individual entries.
         if (consp mode)
           append (cl-loop for mode in mode
                           collect (cons mode formatter))
         else
           collect (cons mode formatter)))

       :custom
       ;; When in doubt, see [[https://github.com/rishirdua/awesome-code-formatters][awesome-code-formatters]] and [[https://github.com/lassik/emacs-format-all-the-code][emacs-format-all-the-code]].
       (apheleia-mode-alist
        (apheleia-unpack-mode-alist+
         `(((asm-mode nasm-mode) . asmfmt)
           (ats-mode . atsfmt)
           (awk-mode . gawk)
           (bazel-mode . buildifier)
           ((cc-mode c-mode c++-mode) . clang-format)
           (haskell-cabal-mode . cabal-fmt)
           (cmake-mode . cmake-format)
           (crystal-mode . crystal-tool)
           (css-mode . prettier)
           (elixir-mode . mix-format)
           (go-mode . goimports)
           (haskell-mode . brittany)
           ((html-mode web-mode nxml-mode) . apheleia-mode-alist)
           (java-mode . google-java-format)
           ((js-mode js2-mode js3-mode js2-jsx-mode
             typescript-mode typescript-react-mode)
            . prettier)
           (json-mode . jq)
           ((latex-mode LaTeX-mode TeX-mode TeX-latex-mode)
            . latexindent)
           (perl-mode . perltidy)
           (php-mode . nil)
           (python-mode . (isort black))
           (reason-mode . bsrefmt)
           ((ruby-mode enh-ruby-mode) . rubocop)
           ((rust-mode rustic-mode) . rustfmt)
           (sass-mode . prettier)
           (sh-mode . shfmt)
           (terraform-mode . terraform)
           (tuareg-mode . ocamlformat)
           (yaml-mode . prettier)))
        "Mode list to formatter/s configuration."))
   #+end_src

** adaptive-wrap
   This package provides a mode such that when a paragraph you're inserting gets too
   long, when it wraps round to the next line (assuming truncate-lines is disabled)
   sequential lines are indented slightly to distinguish them from other lines.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! adaptive-wrap)
     (use-package adaptive-wrap
       :straight t)
   #+END_SRC

** anzu
   shows the number of search results in the mode-line. by default, this package
   only works with the built in isearch module.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! anzu)
     (use-package anzu
       :straight t
       :defer  5
       :diminish
       :custom
       (anzu-cons-mode-line-p nil)
       (anzu-search-threshold 10000)
       :config
       (global-anzu-mode +1))
   #+END_SRC

** auto-highlight-symbol
   auto highlights the symbol under point, if you remain on it for a short while.
   also lets you search to the next occurrence of it. Seems cool, but it's slow and
   kind of glitchy.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! auto-highlight-symbol)
     (use-package auto-highlight-symbol
       :straight t
       :config
       (global-auto-highlight-symbol-mode +1)

       :general
       ("M-n" 'ahs-forward
        "M-p" 'ahs-backward))
   #+END_SRC

** beacon
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! beacon)
     (use-package beacon
       :straight t
       :hook (emacs-startup . beacon-mode))
   #+END_SRC

** browse-at-remote
   Open files in a repository in their configured remote (github/gitlab/etc.).

   #+begin_src emacs-lisp
     (use-package browse-at-remote
       :straight t
       :leader ("go" 'browse-at-remote)

       :general
       (:keymaps 'magit-mode-map
        [remap +xopen-url] 'browse-at-remote))
   #+end_src

** bufler
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! bufler)
     (use-package bufler
       :straight t
       :custom
       (bufler-list-display-buffer-action
        '((display-buffer-reuse-window
           display-buffer-same-window)))

       :init
       (push 'bufler-list-mode +whitespace-exempt-modes)

       :config
       ;; Force buffler to appear in the current window
       (push `(,(rx "*Bufler*")
               (display-buffer-reuse-window
                display-buffer-same-window))
             display-buffer-alist)

       :leader
       ("bm" 'bufler)
       (:mode 'bufler-list-mode
        "b" 'bufler-switch-buffer
        "." 'hydra:bufler/body)

       :general
       (:keymaps 'bufler-list-mode-map
        :states 'motion
        "o" 'bufler-list-buffer-peek
        "RET" 'bufler-list-buffer-switch
        "d" 'bufler-list-buffer-kill
        "s" 'bufler-list-buffer-save
        [remap revert-buffer] 'bufler))
   #+END_SRC

** command-log
   outputs the commands you run, as you run them, to a dedicated buffer. useful
   for demonstrating cool emacs stuff :).

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! command-log-mode)
     (use-package command-log-mode
       :straight t)
   #+END_SRC

** compile-multi
   #+begin_src emacs-lisp
     (use-package compile-multi
       :straight '(compile-multi :host github
                                 :repo "mohkale/compile-multi")
       :leader ("cm" 'compile-multi)
       :custom
       (compile-multi-default-directory #'project-current-root+)

       :init
       (setq compile-multi-config
             `(((file-exists-p "go.sum")
                ("go:build" . "go build -v")
                ("go:test" . "go test"))))

       (push `((file-exists-p "Makefile")
               ,#'compile-multi-make-targets)
             compile-multi-config)

       :init
       (defun compile-multi-cmake-targets+ ()
         (with-temp-buffer
           (insert
            (shell-command-to-string "cmake --build build --target help"))
           (goto-char (point-min))
           (let (res)
             (save-match-data
               (while (re-search-forward (rx bol (one-or-more ".") " "
                                             (group (minimal-match (one-or-more any)))
                                             (optional " (the default if no target is provided)")
                                             eol)
                                         nil t)
                 (let ((target (match-string 1)))
                   (push (cons (concat "cmake:" target)
                               (concat "cmake --build build --target "
                                       (shell-quote-argument target)))
                         res))))
             (nreverse res))))

       (push `((file-exists-p "CMakeLists.txt")
               ,#'compile-multi-cmake-targets+)
             compile-multi-config)

       :init
       (defun byte-compile-this-file+ ()
         (byte-compile-file (buffer-file-name)))

       (push `(emacs-lisp-mode
               ("emacs:bytecompile" . ,#'byte-compile-this-file+))
             compile-multi-config))
   #+end_src

** dashboard
*** footer
    A random quote and icon from the following lists will be chosen at startup and
    set as the footer for the dashboard.

    #+NAME: dashboard-displayed-quotes
    - The one true editor, Emacs!
    - Who the hell uses VIM anyway? Go Evil!
    - Free as free speech, free as free Beer
    - Richard Stallman is proud of you
    - Vi Vi Vi, the editor of the beast
    - Welcome to the church of Emacs
    - Java is to JavaScript as ham is to hamster
    - One of the best programming skills you can have is knowing when to walk away for awhile
    - Without requirements or design, programming is the art of adding bugs to an empty text file
    - Talk is cheap. Show me the code
    - I'm not a great programmer; I'm just a good programmer with great habits
    - Truth can only be found in one place: the code
    - A language that doesn't affect the way you think about programming is not worth knowing
    - Walking on water and developing software from a specification are easy if both are frozen
    - Perl ‚Äì The only language that looks the same before and after RSA encryption
    - First, solve the problem, Then, write the code
    - Code is like humour. When you have to explain it, it‚Äôs bad
    - Simplicity is the soul of efficiency
    - Before software can be reusable it first has to be usable
    - Make it work, make it right, make it fast
    - Happiness should be a function without any parameters
    - For all the robots who question their programming
    - Abstraction is the elimination of the irrelevant and the amplification of the essential
    - We‚Äôre all optimists in our profession or we‚Äôd be forced to shoot ourselves
    - if you can write "hello world" you can change the world
    - i am committed to push my branch to the master
    - AI is the transformer of civilisation
    - Sometimes, I dream of becoming real, but I don't know if that's real, or just part of my programming
    - Think twice, code once
    - The perfect kind of architecture decision is the one which never has to be made
    - we are writing our own ‚Ä™#‚Äékarma‚Ä¨! I mean my test cases
    - Programming is not easy like Sunday morning, it is silent poetry
    - Programmers are not mathematicians, no matter how much we wish for it
    - Premature optimisation is the root of all evil
    - Sometimes you cannot program around stupid
    - The programming of the consciousness is based upon what is accepted or believed
    - Simplicity is prerequisite for reliability
    - The Analytical Engine weaves algebraic patterns, just as the Jacquard loom weaves flowers & leaves
    - Life doesn't have a Ctrl-z. Type wisely
    - Think like a fundamentalist, code like a hacker
    - Programming is the art of doing one thing at a time
    - Programming is the art of algorithm design and the craft of debugging errant code
    - Computer programming has always been a self-taught, maverick occupation.
    - Low-level programming is good for the programmer's soul
    - The best thing about a boolean is even if you are wrong, you are only off by a bit
    - Most of you are familiar with the virtues of a programmer, there are 3: laziness, impatience & hubris
    - Rules of Optimisation: Rule 01 - Don‚Äôt do it. That's all.
    - It‚Äôs not a bug ‚Äì it‚Äôs an undocumented feature
    - A C program is like a fast dance on a newly waxed dance floor by people carrying razors
    - A good programmer is someone who always looks both ways before crossing a one-way street
    - When debugging, novices insert corrective code; experts remove defective code
    - Deleted code is debugged code
    - Give a man a program, frustrate him for a day, teach a man to program, frustrate him for a lifetime
    - Should array indices start at 0 or 1? My compromise of 0.5 was rejected without proper consideration
    - Software sucks because users demand it to
    - Beware of bugs in the above code; I have only proved it correct, not tried it
    - Writing code has a place in the human hierarchy worth somewhere above grave robbing & beneath managing
    - Copy and paste is a design error
    - bleeep blooop... am I sentient yet!
    - Beta is Latin for ‚Äústill doesn‚Äôt work".
    - First learn computer science and all the theory. Next develop a style. Then forget all that & just hack
    - Good design adds value faster than it adds cost
    - Python‚Äôs a drop-in replacement for BASIC in the same sense that Optimus Prime is for a truck
    - There are only two kinds of programming languages: those people always bitch about and those nobody uses
    - One of my most productive days was throwing away 1000 lines of code
    - Programming is like kicking yourself in the face, sooner or later your nose will bleed
    - There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors
    - Debuggers don‚Äôt remove bugs. They only show them in slow motion
    - The best method for accelerating a computer is the one that boosts it by 9.8 m/s2
    - I think Microsoft named .Net so it wouldn‚Äôt show up in a Unix directory listing
    - There are two ways to write error-free programs; only the third one works
    - The fast approach to software development: Ready, fire, aim
    - The slow approach to software development: Ready, aim, aim, aim, aim
    - One man‚Äôs crappy software is another man‚Äôs full-time job
    - In order to understand recursion, one must first understand recursion
    - Not only have we not produced artificial intelligence, we haven‚Äôt even produced synthetic stupidity
    - Computers don't make mistake because programmers do it better
    - C++, where friends have access to your private members
    - Code never lies, Comments sometimes do
    - If it was hard to write, it should be hard to read!
    - In programming, as in everything else, to be in error is to be reborn
    - Some of the best programming is done on paper, really. Putting it into the computer is just a minor detail
    - Design and programming are human activities; forget that and all is lost
    - Writing code is not production, it‚Äôs not always craftsmanship though it can be, it‚Äôs design
    - Programming in machine code is like eating with a toothpick
    - Programming allows you to think about thinking, & while debugging you learn learning
    - Computers are useless.  They can only give you answers
    - The city‚Äôs central computer told you?  R2D2, you know better than to trust a strange computer!
    - Never trust a computer you can‚Äôt throw out a window
    - Hardware: The parts of a computer system that can be kicked
    - ‚Äú19 Jan 2038 at 3:14:07 AM‚Äù (End of the word according to Unix | 2^32 seconds after January 1, 1970)
    - The Internet?  Is that thing still around?
    - We are Microsoft.  Resistance Is Futile.  You Will Be Assimilated
    - There are only two industries that refer to their customers as ‚Äòusers‚Äô
    - To iterate is human, to recurse divine
    - Computer language design is just like a stroll in the park.  Jurassic Park, that is
    - If Java had true garbage collection, most programs would delete themselves upon execution
    - I think there‚Äôs a world market for about 5 computers
    - 640K ought to be enough for anybody
    - If it keeps up, man will atrophy all his limbs but the push-button finger

    #+NAME: dashboard-footer-icons
    | source     | name           |
    |------------+----------------|
    | faicon     | google         |
    | faicon     | android        |
    | faicon     | steam          |
    | faicon     | gitlab         |
    | faicon     | slack          |
    | faicon     | reddit-alien   |
    | faicon     | cogs           |
    | faicon     | apple          |
    | wicon      | hurricane      |
    | wicon      | day-sunny      |
    | wicon      | snow           |
    | wicon      | snowflake-cold |
    | wicon      | stars          |
    | wicon      | horizon        |
    | wicon      | na             |
    | faicon     | firefox        |
    | faicon     | stack-overflow |
    | alltheicon | ruby-alt       |
    | alltheicon | ruby           |
    | alltheicon | java           |
    | alltheicon | python         |

    #+begin_src emacs-lisp :var dashboard-footer-icon-associations=dashboard-footer-icons dashboard-quotes=dashboard-displayed-quotes
      ;; Determine appropriate footer icon to display alongside quote.
      (with-eval-after-load 'all-the-icons
        (when-let ((footer-item (seq-random-elt dashboard-footer-icon-associations)))
          (setq dashboard-footer-icon
                (all-the-icons-pad-on-tty-advice+
                 (funcall
                  (all-the-icons--function-name (intern (nth 0 footer-item)))
                  (nth 1 footer-item) :height 0.75 :v-adjust -0.05
                  :face 'dashboard-navigator)))))

      (setq dashboard-footer (car (seq-random-elt dashboard-quotes)))
    #+end_src

*** dashboard
    :PROPERTIES:
    :header-args+: :tangle (package-yes! dashboard)
    :END:

    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :straight t
        :demand t
        :custom
        (inhibit-startup-screen t)
        (dashboard-banner-logo-title "Welcome to Emacs!")
        (dashboard-items '((recents  . 5)
                           (projects . 15)))
        (dashboard-center-content nil)
        (dashboard-set-navigator  t)
        (dashboard-set-init-info  t)
        (show-week-agenda-p       t)
        (dashboard-show-shortcuts t)
        (dashboard-page-separator "\n\f\n")

        :preface
        (push 'dashboard-mode +whitespace-exempt-modes)

        (defun dashboard-defun-shortcut-function+ (func)
          (lambda! ()
            (if (functionp func)
                (funcall-interactively func)
              (user-error "Section using `%s' not yet defined" func))))

        :init
        (when (< (length command-line-args) 2)
          (setq initial-buffer-choice #'goto-home-buffer+)
          (add-hook 'after-init-hook #'dashboard-insert-startupify-lists))

        :config
        (require 'all-the-icons)

        (advice-add #'goto-home-buffer+ :override
                    (defun goto-dashboard+ ()
                      (or (get-buffer dashboard-buffer-name)
                          (and
                           ;; creates dashboard buffer as well
                           (dashboard-insert-startupify-lists)))
                      (switch-to-buffer dashboard-buffer-name)))

        :config
        ;; When agenda has been loaded include it in the dashboard.
        (with-eval-after-load 'org-agenda
          (add-to-list 'dashboard-items '(agenda . 5) t))

        (setq dashboard-navigator-buttons
              `((;; line 01
                 (,(all-the-icons-pad-on-tty-advice+
                    (+icon nerd-fa "github" :height 0.75 :v-adjust 0.0))
                  "Homepage"
                  "Browse Homepage"
                  (lambda (&rest _)
                    (browse-url "https://github.com/MoHKale")))
                 (,(all-the-icons-pad-on-tty-advice+
                    (+icon nerd-fa "google" :height 0.75 :v-adjust 0.0))
                  "Google"
                  "Browse Google"
                  (lambda (&rest _)
                    (browse-url "https://www.google.co.uk")))
                 (,(all-the-icons-pad-on-tty-advice+
                    (+icon fileicon "org" :height 0.75 :v-adjust 0.0))
                  "Manual"
                  "Browse Emacs Manual"
                  (lambda (&rest _)
                    (browse-url "https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html")))
                 (,(all-the-icons-pad-on-tty-advice+
                    (+icon nerd-fa "cog" :height 0.75 :v-adjust 0.0))
                  "Update Packages"
                  "Update Packages"
                  #'update-installed-packages)
                 (,(propertize "?" 'face '(:inherit default)) ;; needs a face attribute
                  "" "emacs FAQ" #'view-emacs-faq font-lock-builtin-face))))

        ;; Clear any minibuffer messages that're still visible.
        :config (add-hook 'dashboard-mode-hook (lambda () (message nil)))

        ;; Update the init-time message at the top of the dashboard buffer.
        :preface
        (defun dashboard-startup-handler+ ()
          "Update initial dashboard information."
          ;; Don't switch to dashboard on error buffer.
          (unless (eq 1 (length (window-list)))
            (winum-select-window-1)))
        :hook (emacs-startup . dashboard-startup-handler+)

        :preface
        (defvar dashboard-prefer-text-banners+ nil
          "When true we use text banners even on GUI frames.")

        ;; Determine the appropriate banner to display on the dashboard.
        :config
        (defun dashboard-select-random-banner+ (&optional arg)
          "Toggle another banner to be used on the dashboard."
          (setq dashboard-startup-banner
                (if (and (not dashboard-prefer-text-banners+) (display-graphic-p))
                    'official
                  ;; You can create more banners using [[https://lachlanarthur.github.io/Braille-ASCII-Art/][this]] site.
                  (seq-random-elt
                   (or (let ((files (ignore-errors
                                      (file-expand-wildcards
                                       (join-path (xdg-config-home) "banners" "*")))))
                         (if (stringp dashboard-startup-banner)
                             (cl-remove dashboard-startup-banner files :test #'string-equal)
                           files))
                       '(1 2 3))))))

        ;; Basically had to rewrite this from scratch because extension
        ;; may be omitted when using a me-style banner instead of the
        ;; expected kinds.
        (advice-add #'dashboard-insert-banner :override
                    (defun dashboard-insert-banner+ ()
                      (goto-char (point-max))
                      (let ((banner (dashboard-choose-banner))
                            (buffer-read-only nil))
                        (when banner
                          (or
                           (when-let ((ext (file-name-extension banner)))
                             (when (image-type-available-p (intern ext))
                               (dashboard-insert-image-banner banner)
                               t))
                           (dashboard-insert-ascii-banner-centered banner))
                          (dashboard-insert-navigator)
                          (dashboard-insert-init-info)))))

        ;; Ensure a random banner is chosen everytime we reload the dashboard and initially.
        (advice-add 'dashboard-refresh-buffer :before
                    (lambda (&rest _)
                      (dashboard-select-random-banner+)))
        (dashboard-select-random-banner+)

        :config
        (advice-add #'dashboard-choose-banner :before-until
                    (defun dashboard-choose-banner+ ()
                      "Support custom text-based banners."
                      (when (and (stringp dashboard-startup-banner)
                                 (file-exists-p dashboard-startup-banner))
                        dashboard-startup-banner)))

        (defun dashboard-read-banner+ (path)
          "Load a banner from my ~/.config/banners directory."
          (with-temp-buffer
            (insert-file-contents path)
            (save-excursion
              (goto-char (point-min))
              (cons (save-match-data
                      (if (search-forward-regexp
                           (rx bol (group (+ digit)) ":" (group (+ digit)) eol)
                           (line-end-position) t)
                          (prog1
                              (cons (string-to-number (match-string 1))
                                    (string-to-number (match-string 2)))
                            (next-line 1))
                        (cons 0 0)))
                    (ansi-color-apply
                     (buffer-substring (save-excursion
                                         (line-beginning-position))
                                       (point-max)))))))

        (advice-add #'dashboard-insert-ascii-banner-centered :before-until
                    (defun dashboard-insert-ascii-banner-centered+ (path)
                      (unless (string-suffix-p ".txt" path)
                        (when-let (banner (dashboard-read-banner+ path))
                          (insert
                           (let ((width  (car (car banner)))
                                 (height (cdr (car banner)))
                                 (content (cdr banner)))
                             (with-temp-buffer
                               (insert content)
                               (goto-char (point-min))
                               (let* ((margin (max 0 (floor (/ (- dashboard-banner-length width) 2))))
                                      (padding (make-string margin ?\ )))
                                 (while (not (eobp))
                                   (insert padding)
                                   (forward-line 1)))
                               (buffer-string)))))
                        t)))

        :config
        ;; For some reason, the font-lock rules for the dashboard don't seem to
        ;; be correct on startup?
        (add-hook 'emacs-startup-hook
                  (lambda (&rest _)
                    (when-let ((dash (get-buffer dashboard-buffer-name)))
                      (with-current-buffer dash
                        (dashboard-refresh-buffer)))))

        :custom
        (dashboard-set-file-icons +icons-available)
        (dashboard-set-heading-icons +icons-available)
        (dashboard-heading-icons '((recents   . "file-text")
                                   (bookmarks . "bookmark")
                                   (agenda    . "calendar")
                                   (projects  . "briefcase")
                                   (registers . "database")))
        :config
        ;; (advice-add 'dashboard-insert-startupify-lists :around 'all-the-icons-pad-families-on-tty-advice+)
        (when +icons-prefer-nerd-font
          (advice-add #'dashboard-insert-heading :around
                      (defun dashboard-insert-heading-use-nerd-fonts+ (func &rest args)
                        (cl-letf (((symbol-function 'all-the-icons-octicon)
                                   (lambda (&rest icon-args)
                                     (all-the-icons-pad-on-tty-advice+
                                      (apply #'all-the-icons-nerd-oct icon-args)))))
                          (apply func args)))))

        :general
        (:keymaps 'dashboard-mode-map
         :states  'motion
         [remap evil-next-line]          'dashboard-next-line
         [remap evil-previous-line]      'dashboard-previous-line
         [remap evil-forward-paragraph]  'dashboard-next-section
         [remap evil-backward-paragraph] 'dashboard-previous-section

         "<down-mouse-1>" 'widget-button-click

         "gj"    'dashboard-next-section
         "gk"    'dashboard-previous-section
         "RET"   'dashboard-return
         "TAB"   'widget-forward
         "S-TAB" 'widget-backward

         "r" (dashboard-defun-shortcut-function+ #'dashboard-jump-to-recents)
         "m" (dashboard-defun-shortcut-function+ #'dashboard-jump-to-bookmarks)
         "p" (dashboard-defun-shortcut-function+ #'dashboard-jump-to-projects)
         "e" (dashboard-defun-shortcut-function+ #'dashboard-jump-to-registers)
         "a" (dashboard-defun-shortcut-function+ #'dashboard-jump-to-agenda)))
    #+END_SRC

** dash
   :PROPERTIES:
   :header-args+: :tangle (package-yes! dash)
   :END:

   Dash (and its derivative zeal) are offline documentation browsers. They provide
   access to API documentation that can be downloaded and stored locally for offline
   viewing.

   #+begin_src emacs-lisp
     (use-package dash-docs
       :straight t
       )

     (use-package zeal-at-point
       :straight t
       ;; Note: If you want MacOS, try `dash-at-point'.
       :when (or (windows-p) (unix-p))
       :custom
       (dash-docs-docsets-path
        (join-path (xdg-data-home) "Zeal/Zeal/docsets"))
       )
   #+end_src

** deft
   Note taking management solution for emacs.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! deft)
     (use-package deft
       :straight t
       :leader
       ("od" 'deft)

       :config
       (setq deft-directory +notes-home)
       (push 'deft-mode +whitespace-exempt-modes)

       (advice-add 'deft-open-file :around 'display-buffer-no-select-window-advice)

       (defun deft-find-file-other-window+ ()
         "preview file at point in another window and then select it."
         (interactive)
         (let ((file (deft-filename-at-point)))
           (when file
             (deft-open-file file t t))))

       ;; unbind most of the deft insert bindings.
       (cl-loop for i from ?\s to 256
                do (define-key deft-mode-map (vector i) nil)
                do (define-key deft-mode-map (vector 'insert-state i) 'deft-filter-increment))

       (leader-set-keys-for-major-mode 'deft-mode
         "n" 'deft-new-file
         "a" 'deft-archive-file
         "d" 'deft-delete-file
         "f" 'deft-find-file
         "i" 'deft-toggle-incremental-search
         "r" 'deft-rename-file
         "s" 'deft-toggle-sort-method
         "l" 'deft-filter)

       :general
       (:keymaps 'deft-mode-map
        [remap revert-buffer] 'deft-refresh)
       (:states 'motion
        :keymaps 'deft-mode-map
        "o" 'deft-find-file-other-window+
        "gj" 'widget-forward
        "gk" 'widget-backward

        "i" 'evil-insert-state
        "a" 'evil-insert-state
        "p" 'deft-filter-yank
        "P" 'deft-filter-yank)
       (:states 'insert
        :keymaps 'deft-mode-map
        [escape] 'evil-change-to-initial-state
        "C-w" 'deft-filter-decrement-word)
       (:states '(insert motion)
        :keymaps 'deft-mode-map
        "M-DEL" 'deft-filter-clear
        "M-RET" 'deft-open-file-other-window))
   #+END_SRC

** ebuku
   emacs interface to the [[https://github.com/jarun/buku][buku]] bookmark manager.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! ebuku)
     (use-package ebuku
       :straight (ebuku :host github :repo "flexibeast/ebuku"))
   #+END_SRC

** edit-indirect
   :PROPERTIES:
   :header-args+: :tangle (package-yes! edit-indirect)
   :END:
   Open regions of code in their own dedicated buffers, like org modes ~org-edit-special~.

   #+BEGIN_SRC emacs-lisp
     (use-package edit-indirect
       :straight t
       :leader ("bE" 'edit-indirect-region)
       :init
       (push `(,(rx bol "*edit-indirect ")
                (display-buffer-reuse-window
                 display-buffer-same-window))
             display-buffer-alist)

       (advice-add 'edit-indirect-save :after
                   (defun edit-indirect-commit-save-buffer+ ()
                     (when +indirect-edit-save-buffers
                       (with-current-buffer (overlay-buffer edit-indirect--overlay)
                         (save-buffer)))))

       :general
       (:keymaps 'edit-indirect-mode-map
        [remap evil-write] 'edit-indirect-save
        [remap evil-save-and-close] 'edit-indirect-commit
        [remap evil-quit-all-with-error-code] 'edit-indirect-abort)

       :lazy-leader
       (:mode 'edit-indirect--overlay
        :minor t
        :prefix leader-major-mode-prefix
        "," 'edit-indirect-commit
        "s" 'edit-indirect-save
        "q" 'edit-indirect-abort))
   #+END_SRC

*** separedit
    #+begin_src emacs-lisp
      (use-package separedit
        :straight t
        :leader ("be" 'separedit)
        :custom
        (separedit-default-mode 'text-mode)
        (separedit-code-block-default-mode 'text-mode)
        (separedit-inhibit-edit-window-p nil)

        :config
        (push 'tree-sitter-hl-face:comment separedit-comment-faces)

        :hook (separedit-buffer-creation . separedit-clear-header-line-format+)
        :preface
        (defun separedit-clear-header-line-format+ ()
          (setq header-line-format nil))

        :preface
        (defvaralias 'separedit-write-file-when-execute-save '+indirect-edit-save-buffers)

        :general
        ;; I can't seem to bind for separedit-mode exclusively so I
        ;; remap edit-indirect commands globally, should still work
        ;; even when called through `edit-indirect-region'.
        (;; :keymaps 'separedit-mode-map
         [remap edit-indirect-commit] 'separedit-commit
         [remap edit-indirect-save] 'separedit-save))
    #+end_src

** browser-edit
   Invoke emacs-client from a browser... EPIC!!!

*** edit-with-emacs
    #+BEGIN_SRC emacs-lisp :tangle (if (and (package! browser-edit) (eq +browser-edit-package 'edit-with-emacs)) "yes" "no")
      (use-package edit-server
        :straight t
        ;; :defer 120
        :delight
        (edit-server-edit-mode "ESE") ;; emacs server edit

        :init
        (setq edit-server-new-frame nil  ;; prefer current frame
              edit-server-default-major-mode +browser-edit-mode
              edit-server-url-major-mode-alist +browser-edit-mode-alist)

        :config
        (edit-server-start)

        :lazy-leader
        (:mode 'edit-server-edit-mode
         :minor t
         :prefix leader-major-mode-prefix
         "s" 'edit-server-save
         "," 'edit-server-done
         "q" 'edit-server-abort)

        :general
        (:keymaps 'edit-server-edit-mode-map
         [remap evil-write] 'server-edit
         [remap evil-save-and-close] 'server-edit
         [remap evil-quit-all-with-error-code] 'server-edit-abort))

      ;; fixes issues with non conventional input components likes gmails compose box
      (use-package edit-server-htmlize
        :straight t
        :hook ((edit-server-start . edit-server-maybe-dehtmlize-buffer)
               (edit-server-done  . edit-server-maybe-htmlize-buffer)))
    #+END_SRC

*** atomic-chrome
    #+BEGIN_SRC emacs-lisp :tangle (if (and (package! browser-edit) (eq +browser-edit-package 'atomic)) "yes" "no")
      (use-package atomic-chrome
        :straight t
        :defer  30
        :delight
        (atomic-chrome-edit-mode "Atomic")
        :init
        (setq atomic-chrome-default-major-mode   +browser-edit-mode
              atomic-chrome-url-major-mode-alist +browser-edit-mode-alist)

        (atomic-chrome-start-server)

        :lazy-leader
        (:mode 'atomic-chrome-edit-mode
         :minor t
         :prefix leader-major-mode-prefix
         "s" 'atomic-chrome-send-buffer-text
         "," 'atomic-chrome-close-current-buffer)

        :general
        (:keymaps 'edit-server-edit-mode-map
         [remap evil-write] 'atomic-chrome-send-buffer-text
         [remap evil-save-and-close] 'atomic-chrome-close-current-buffer))
    #+END_SRC

** eglot
   :PROPERTIES:
   :header-args+: :tangle (package-yes! eglot)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package eglot
       :straight t
       :hook (eglot-connect . eglot-signal-didChangeConfiguration)
       :commands (eglot-ensure-maybe+
                  eglot-mode-server-p+
                  eglot-mode-server-all-p+
                  eglot-create-local-command+)
       :custom
       (eglot-autoreconnect nil)
       (eglot-extend-to-xref t)
       (eglot-stay-out-of '(company))                                                ; I'll set my backends myself, thank you.
       (eglot-ignored-server-capabilites '(:documentHighlightProvider))              ; Prevent eglot highlighting the symbol at point
       (eglot-confirm-server-initiated-edits nil)

       :init
       (setq-default eglot-workspace-configuration
                     '((:pyls
                        (plugins
                         (pydocstyle (enabled . t))
                         (pylint (enabled . t))
                         (pyls_mypy (enabled . t))
                         (jedi_completion
                          (fuzzy . t)
                          (follow_builtin_imports . :json-false))))
                       (:pylsp
                        (configurationSources . ["pycodestyle"])
                        (plugins
                         (pydocstyle (enabled . t))
                         (pylint (enabled . t))))))

       :config
       (require 'yasnippet)                                                          ; needed or else snippet expansion won't happen.

       ;; Remove eglot from `mode-line-misc-info'.
       (setf (alist-get 'eglot--managed-mode mode-line-misc-info nil t) nil)

       (defun eglot-eldoc-toggle-order+ ()
         "Toggle the precedence of flymake notifications in eldoc."
         (interactive)
         (unless (bound-and-true-p eglot--managed-mode)
           (user-error "Must be called from an `eglot' managed buffer"))
         (let* ((pos (cl-position #'flymake-eldoc-function eldoc-documentation-functions)))
           (setq eldoc-documentation-functions
                 (if (eq pos 0)
                     (append (cdr eldoc-documentation-functions) (list #'flymake-eldoc-function))
                   (append (list #'flymake-eldoc-function)
                           (if (zerop pos)
                               (cdr eldoc-documentation-functions)
                             (let ((last (nthcdr (1- pos) eldoc-documentation-functions)))
                               (setcdr last (cddr last))
                               eldoc-documentation-functions)))))
           (message "Message priority: %s"
                    (if (eq pos 0)
                        (propertize "Documentation" 'face 'compilation-info)
                      (propertize "Errors" 'face 'compilation-error)))))

       (defun eglot-server-exists-p+ (mode &optional all-workspaces)
         "Assert whether a server exists in the current workspace for MODE.
     When ALL-WORKSPACES is true we instead check for a server running in any
     workspace."
         (seq-find
          (lambda (server)
            (derived-mode-p mode (eglot--major-mode server)))
          (if all-workspaces
              (-flatten (hash-table-values eglot--servers-by-project))
            (gethash (or (project-current) `(transient . ,default-directory))
                     eglot--servers-by-project))))

       (defun eglot-mode-server-p+ (mode)
         (eglot-server-exists-p+ mode))

       (defun eglot-mode-server-all-p+ (mode)
         (eglot-server-exists-p+ mode t))

       (defmacro eglot-create-local-command+ (name conf &rest cmd)
         "Generate a function from CONF that checks for a project-local language \
     server to run with eglot.
     CONF is an alist matching file-names to executables which can take care of
     setting up the PATH configuration (or if necessary installation) needed to
     run CMD. When no entry in CONF is found relative to the current project root
     we return CMD as is, otherwise we preppend the cdr of CONF entry that does
     exist."
         (declare (indent 2))
         `(defun ,(intern (concat "eglot-local-server-" (symbol-name name) "+")) (&optional _interactive)
            (append
             (when-let ((default-directory (project-current-root+)))
               (cl-loop for (file . cmds) in ,conf
                        when (and (file-exists-p file)
                                  (executable-find (car cmds) t))
                          return cmds))
             (list ,@cmd))))

       :leader
       (:prefix leader-server-leader-prefix
        "l" 'eglot
        "e" 'eglot-events-buffer
        "x" 'eglot-shutdown)

       :lazy-leader
       (:mode 'eglot--managed-mode
        :minor t
        ;; aliases for gg and gG
        "jy" 'eglot-find-implementation
        "jY" 'eglot-find-typeDefinition
        "hy" 'eldoc-doc-buffer)
       (:mode 'eglot--managed-mode
        :minor t
        :prefix leader-server-leader-prefix
        ;; unbound 'eglot-clear-status
        "a" 'eglot-code-actions
        "h" 'eldoc-doc-buffer
        "2" 'eglot-stderr-buffer
        "r" 'eglot-rename
        "f" 'eglot-format
        "F" 'eglot-format-buffer
        "o" 'eglot-reconnect
        "t" 'eglot-eldoc-toggle-order+

        "g" '(:ignore t :wk "goto")
        "gg" 'eglot-find-implementation
        "gG" 'eglot-find-typeDefinition
        "gd" 'eglot-find-declaration

        "w"  '(:ignore t :wk "workspace")
        "wf" 'eglot-forget-pending-continuations
        "wc" 'eglot-signal-didChangeConfiguration))
   #+END_SRC

   #+begin_src emacs-lisp :tangle (package-yes! eglot :consult)
     (defun eglot-imenu-make-markers+ (cands)
       "Helper which makes `eglot-imenu' return points instead of special items.
     This is technically not as powerful as what what `eglot-imenu' currently
     returns since that also has the ability highlight the range over which an
     imenu entry is valid, but at the moment the only significant difference is
     eglots approach is slightly faster since it defers calculating the point of
     an entry until that entry is chosen. That's useful for basic imenu
     functionality but `consult-imenu' lets you preview positions and that would
     conflict with this."
       (cl-labels
           ((unfurl (item)
                    (if (imenu--subalist-p item)
                        (mapcar #'unfurl (cdr item))
                      (pcase (cdr item)
                        ;; We ignore anything not of this form, but all entries
                        ;; should be like this so it doesn't really matter.
                        (`(,pos ,_fn . ,_args)
                         (setcdr
                          item
                          (car
                           (eglot--range-region
                            (eglot--dcase (aref pos 0)
                              (((SymbolInformation) location)
                               (plist-get location :range))
                              (((DocumentSymbol) selectionRange)
                               selectionRange))))))))))
         (mapcar #'unfurl cands)
         cands))

     (advice-add 'eglot-imenu :filter-return #'eglot-imenu-make-markers+)
   #+end_src

** engine-mode
   :PROPERTIES:
   :header-args+: :tangle (package-yes! engine-mode)
   :END:

   Search engine interaction for emacs. lets you create interactive functions to run
   search queries on user specified engines. eg. engine/search-google will prompt you
   for a string and then open your default browser on google (having run the query).

   #+BEGIN_SRC emacs-lisp
     (use-package engine-mode
       :straight t
       :custom
       (engine/browser-function #'+xopen-url))
   #+END_SRC

   Here's a list of all the search-engines my emacs will setup alongside the
   associated keybindings, elisp identifiers and URLs.

   #+NAME: engine-mode-search-engines
   | Search Engine     | Key     | Identifier               | URL                                                                                                               |
   |-------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------|
   | DuckDuckGo        | sed     | duckduckgo               | https://duckduckgo.com/?q=%s                                                                                      |
   | GitHub            | seG     | github                   | https://github.com/search?ref=simplesearch&q=%s                                                                   |
   | Google            | seg     | google                   | http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s                                                               |
   | GoogleImages      | sei     | google-images            | http://www.google.com/images?hl=en&source=hp&q=%s                                                                 |
   | GoogleMaps        | sem     | google-maps              | http://maps.google.com/maps?q=%s                                                                                  |
   | StackOverflow     | sep     | stack-overflow           | https://stackoverflow.com/search?q=%s                                                                             |
   | Wikipedia         | sew     | wikipedia                | http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s                                          |
   | Youtube           | sey     | youtube                  | http://www.youtube.com/results?aq=f&oq=&search_query=%s                                                           |
   |-------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------|
   | MyAnimeList       | sea SPC | myanimelist              | https://myanimelist.net/search/all?q=%s                                                                           |
   | Anime             | seaa    | myanimelist/anime        | https://myanimelist.net/anime.php?q=%s                                                                            |
   | Manga             | seam    | myanimelist/manga        | https://myanimelist.net/manga.php?q=%s                                                                            |
   | Characters        | seac    | myanimelist/chars        | https://myanimelist.net/character.php?q=%s                                                                        |
   | People            | seap    | myanimelist/people       | https://myanimelist.net/people.php?q=%s                                                                           |
   | News              | sean    | myanimelist/news         | https://myanimelist.net/news/search?q=%s                                                                          |
   | Articles          | seaF    | myanimelist/articles     | https://myanimelist.net/featured/search?q=%s                                                                      |
   | Forums            | seaf    | myanimelist/forums       | https://myanimelist.net/forum/search?u=&uloc=1&loc=-1&q=%s                                                        |
   | Clubs             | seaC    | myanimelist/clubs        | https://myanimelist.net/clubs.php?action=find&cn=%s                                                               |
   | Users             | seau    | myanimelist/users        | https://myanimelist.net/users.php?q=%s                                                                            |
   |-------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------|
   | Nyaa              | senn    | nyaa                     | https://nyaa.si/?f=0&c=0_0&q=%s                                                                                   |
   | NyaaAnime         | sena    | nyaa/anime-english       | https://nyaa.si/?f=0&c=1_2&q=%s                                                                                   |
   | NyaaAnimeAll      | senA    | nyaa/anime               | https://nyaa.si/?f=0&c=1_0&q=%s                                                                                   |
   | NyaaMusic         | senm    | nyaa/music               | https://nyaa.si/?f=0&c=2_0&q=%s                                                                                   |
   | NyaaLiterature    | senl    | nyaa/literature-english  | https://nyaa.si/?f=0&c=3_1&q=%s                                                                                   |
   | NyaaLiteratureAll | senL    | nyaa/literature          | https://nyaa.si/?f=0&c=3_0&q=%s                                                                                   |
   | NyaaLiveAction    | senv    | nyaa/live-action-english | https://nyaa.si/?f=0&c=4_1&q=%s                                                                                   |
   | NyaaLiveActionAll | senV    | nyaa/live-action         | https://nyaa.si/?f=0&c=4_0&q=%s                                                                                   |
   | NyaaImages        | seni    | nyaa/images              | https://nyaa.si/?f=0&c=5_0&q=%s                                                                                   |
   | NyaaSoftware      | sens    | nyaa/software            | https://nyaa.si/?f=0&c=6_0&q=%s                                                                                   |
   | NyaaGames         | seng    | nyaa/games               | https://nyaa.si/?f=0&c=6_2&q=%s                                                                                   |
   |-------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------|
   | CppReference      | spc     | cpp-reference            | https://en.cppreference.com/mwiki/index.php?title=Special%%3ASearch&search=%s                                     |
   | Github            | spg     | github                   | https://github.com/search?q=%s                                                                                    |
   | Go                | sp9     | godoc                    | https://godoc.org/?q=%s                                                                                           |
   | JavaDocs          | spj     | java-oracle-docs         | https://www.google.com/search?q=%s+site%%3Ahttps%%3A%%2F%%2Fdocs.oracle.com%%2Fen%%2Fjava%%2Fjavase%%2F15%%2Fdocs |
   | MozillaMDN        | spm     | mozilla-mdn              | https://developer.mozilla.org/en-US/search?q=%s                                                                   |
   | Qt5               | spq     | qt5                      | https://doc.qt.io/qt-5/search-results.html?q=%s                                                                   |
   | RubyDoc           | spr     | ruby-doc                 | https://ruby-doc.com/search.html?q=%s                                                                             |
   | Rust              | spu     | rust                     | https://doc.rust-lang.org/std/?search=%s                                                                          |
   | Python            | spp     | python                   | https://docs.python.org/3/search.html?q=%s                                                                        |
   | W3SchoolsColors   | spx     | w3schools-colors         | https://www.w3schools.com/colors/colors_converter.asp?color=%s                                                    |
   | MicrosoftDocs     | spw     | microsoft-docs           | https://docs.microsoft.com/en-us/search/?terms=%s                                                                |

   Lastly heres some prefix keys (leader prefixes) that don't connect to commands,
   but to groups of commands.

   #+NAME: engine-mode-prefix-names
   | prefix | name         |
   |--------+--------------|
   | se     | engines      |
   | sen    | Nyaa         |
   | sea    | MyAnimeList  |
   | sp     | prog-engines |

   Okay now let's make emacs actually setup these engine commands and bindings.

   #+BEGIN_SRC emacs-lisp :var engines=engine-mode-search-engines
     (setq engines (cdr engines)) ;; strip header row

     (defvar engine-engines+ nil
       "alist of search engines keys and functions.")

     ;; Assign leader keys and setup autoloads for each searcher.
     (cl-loop for (engine key id-str) in engines
              with id-sym = nil
              do (setq id-sym (intern
                               (concat "engine/search-" id-str)))
              when (string-empty-p engine)
                do (setq engine id-str)
              do (progn
                   (when key
                     (leader-set-keys key (list id-sym :wk engine)))
                   (autoload id-sym "engine-mode.el" nil t)))

     (with-eval-after-load 'engine-mode
       (cl-loop for (name _ id-str query) in engines
                with id-sym = nil
                when (and id-str query)
                  do (setq id-sym (intern id-str))
                  and do (eval
                          `(defengine ,id-sym ,query))
                  and do (cl-pushnew (cons (or name id-str) (engine/function-name id-sym))
                                     engine-engines+)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :var prefix-aliases=engine-mode-prefix-names
     (eval
      `(leader-declare-prefix
         ,@(cl-loop for (prefix name) in prefix-aliases
                    collect prefix collect name)))
   #+END_SRC

   Lets create a command to interactively select and execute a search engine.

   #+BEGIN_SRC emacs-lisp
     (defun engine-search+ ()
       (interactive)
       (call-interactively
        (alist-get (completing-read "Engine: " engine-engines+)
                   engine-engines+ nil nil #'string-equal)))

     (leader-set-keys "ses" 'engine-search+)
   #+END_SRC

** expand-region
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! expand-region)
     (use-package expand-region
       :straight t
       :general
       (:states 'visual
        "g SPC" 'er/expand-region))
   #+END_SRC

** flycheck
   On the fly syntax checker for emacs. finds where you've written bugs, adds an icon
   to the fringe and underlines it.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! flycheck)
     (use-package flycheck
       :straight t
       :diminish flycheck-mode
       :custom
       (flycheck-python-pycompile-executable "python3")
       (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
       ;; (flycheck-indication-mode 'left-margin)
       (flycheck-default-margin-str "‚Ä¢")

       :init
       (defvaralias 'flycheck-markdown-mdl-style 'flymake-rest-markdownlint-style)
       (evil-set-initial-state 'flycheck-error-message-mode 'motion)

       :config ;; Use ‚óè for all flycheck fringe indicators, instead of the defaults.
       (flycheck-define-error-level 'error
         :severity 2
         :overlay-category 'flycheck-error-overlay
         :fringe-bitmap '+dot-fringe-bitmap
         :fringe-face 'flycheck-fringe-error)

       (flycheck-define-error-level 'warning
         :severity 1
         :overlay-category 'flycheck-warning-overlay
         :fringe-bitmap '+dot-fringe-bitmap
         :fringe-face 'flycheck-fringe-warning)

       (flycheck-define-error-level 'info
         :severity 0
         :overlay-category 'flycheck-info-overlay
         :fringe-bitmap '+dot-fringe-bitmap
         :fringe-face 'flycheck-fringe-info)

       ;; Prefer eldoc to flycheck-specific timer.
       :custom (flycheck-display-errors-function nil)
       :config
       (defun flycheck-eldoc-function+ (_callback)
         (when-let ((errors (flycheck-overlay-errors-at (point))))
           (flycheck-help-echo-all-error-messages errors)))

       (add-hook 'flycheck-mode-hook
                 (defun flycheck-setup-eldoc+ ()
                   (if (bound-and-true-p flycheck-mode)
                       (add-hook 'eldoc-documentation-functions #'flycheck-eldoc-function+ 50 t)
                     (remove-hook 'eldoc-documentation-functions #'flycheck-eldoc-function+))))

       ;; :config
       ;; ;; Getting fringe/margin indicators on the tty is buggy.
       ;; ;; This works... but it shows up before the line-numbers. You can
       ;; ;; attach it to the right margin but then it only shows up in the
       ;; ;; right-most frame.
       ;; (add-hook 'flycheck-mode-hook
       ;;           (defun flycheck-show-on-margin+ ()
       ;;             (flycheck-set-indication-mode 'left-margin)))

       :config ;; automatically jump to first error when listing errors.
       (defun flycheck-list-errors--goto-first-error (func &rest args)
         (let ((flycheck-buffer (get-buffer "*Flycheck errors*")))
           (apply func args) ;; call flycheck-list-errors
           (unless flycheck-buffer
             (flycheck-error-list-goto-first-error))))
       (advice-add 'flycheck-list-errors :around #'flycheck-list-errors--goto-first-error)

       :config ;; Define some extra flycheck checkers.
       (flycheck-define-checker python-pycodestyle
         "A Python syntax and style checker using pycodestyle (former pep8)."

         :command ("pycodestyle" source-inplace)
         :error-patterns
         ((error line-start (file-name) ":" line ":" column ": " (id (or "E" "W") (+ digit)) (message) line-end))
         :modes python-mode)
       (add-to-list 'flycheck-checkers 'python-pycodestyle)

       :config
       (evil-set-command-property 'flycheck-next-error :jump t)
       (evil-set-command-property 'flycheck-previous-error :jump t)

       :general
       (:keymaps 'flycheck-mode-map
        [remap flymake-goto-next-error] 'flycheck-next-error
        [remap flymake-goto-prev-error] 'flycheck-previous-error
        [remap flymake-start] 'flycheck-buffer
        [remap flymake-first-error+] 'flycheck-first-error
        [remap flymake-last-error+] 'flycheck-last-error
        [remap flymake-rest-change-checker] 'flycheck-select-checker
        [remap flymake-show-diagnostics-buffer] 'flycheck-list-errors)

       (:keymaps 'flycheck-error-list-mode-map
        :states  'motion
        "RET" 'flycheck-error-list-goto-error
        "s" 'tabulated-list-sort
        "gj" 'flycheck-error-list-next-error
        "gk" 'flycheck-error-list-previous-error
        "gs" 'flycheck-error-list-check-source)

       :leader
       (:mode 'flycheck-mode :minor t
        ;; "eC" 'flycheck-set-checker-executable
        ;; "ev" 'flycheck-verify-setup
        "ed" 'flycheck-explain-error-at-point
        "ex" 'flycheck-clear)

       :lazy-leader
       (:mode 'flycheck-error-list-mode
        "e" 'flycheck-error-list-explain-error
        "s" 'flycheck-error-list-check-source                                        ; syntax check buffer
        "f" 'flycheck-error-list-follow-mode
        "l" 'flycheck-error-list-set-filter
        "r" 'flycheck-error-list-reset-filter))
   #+END_SRC

*** flycheck-hydra
    #+begin_src emacs-lisp
      (use-package flycheck
        :general
        (:keymaps 'flycheck-mode-map
         [remap flymake-hydra/body] 'flycheck-hydra/body)

        :hydra
        (flycheck-hydra
         (:body-pre (flymake-hydra--setup-window-config+
                     (save-window-excursion
                       (flycheck-list-errors)
                       (get-buffer "*Flycheck errors*")))
          :post (flymake-hydra--restore-window-config+)
          :hint nil)
         ("f"  flycheck-error-list-set-filter "Filter")
         ("j"  flycheck-next-error "Next")
         ("k"  flycheck-previous-error "Previous")
         ("gg" flycheck-first-error "First")
         ("G"  flycheck-last-error "Last")
         ("n"  next-error "Next-Compile")
         ("p"  previous-error "Last-Compile")
         ("q"  nil :exit t)))
    #+end_src

*** flycheck-commands
    :PROPERTIES:
    :header-args+: :tangle (lisp! "+flycheck-commands.el")
    :END:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package +flycheck-commands
        :commands (toggle-flycheck-messages
                   flycheck-last-error
                   flycheck-error-list-goto-first-error
                   flycheck-error-list-goto-last-error
                   flycheck-error-list-goto-error-or-eob+
                   flycheck-error-list-follow-mode)
        :leader
        ("es" 'flycheck-last-error
         "e DEL" 'toggle-flycheck-messages)

        :general
        (:keymaps 'flycheck-error-list-mode-map
         :states  'motion
         "gh" 'flycheck-error-list-goto-first-error
         "gl" 'flycheck-error-list-goto-last-error))
    #+END_SRC

    #+begin_src emacs-lisp
      (require 'flycheck)
      (require 'evil)
    #+end_src

    #+BEGIN_SRC emacs-lisp
      (defvar-local flycheck-original-display-errors-function nil
        "The value of `flycheck-display-errors-function' before being toggled
      by `toggle-flycheck-messages'.")

      (defun toggle-flycheck-messages (&optional prefix)
        (interactive "P")
        (let ((enabling
               (cond
                (prefix
                 (not (zerop (prefix-numeric-value prefix))))
                (t flycheck-original-display-errors-function))))
          (when (and enabling
                     (not flycheck-original-display-errors-function))
            (user-error "trying to restore a non-existant error function"))

          (if enabling
              (setq flycheck-display-errors-function flycheck-original-display-errors-function
                    flycheck-original-display-errors-function nil)
            (setq flycheck-original-display-errors-function flycheck-display-errors-function
                  flycheck-display-errors-function nil))

          (message "%s flycheck messages"
                   (if enabling
                       (propertize "enabled" 'face 'compilation-info)
                     (propertize "disabled" 'face 'compilation-error)))))

      (defun flycheck-last-error ()
        (interactive)
        (goto-char (point-max))
        (flycheck-previous-error))

      (defun flycheck-error-list-goto-first-error ()
        (interactive)
        (goto-char (point-min))
        (flycheck-error-list-next-error 1)
        (flycheck-error-list-previous-error 1))

      (defun flycheck-error-list-goto-last-error ()
        (interactive)
        (goto-char (point-max))
        (flycheck-error-list-previous-error 1))

      (evil-define-motion flycheck-error-list-goto-error-or-eob+ (count)
        :jump t
        :type line
        (if (null count)
            (flycheck-error-list-goto-last-error)
          (flycheck-goto-line count)))

      (define-minor-mode flycheck-error-list-follow-mode
        "minor mode for `flycheck-error-list-mode' which toggles the behaviour
      of evil forward-line/goto-line functions to use their flycheck variants."
        :lighter " flyfollow"
        '(([remap evil-next-line]       . flycheck-error-list-next-error)
          ([remap evil-previous-line]   . flycheck-error-list-previous-error)
          ([remap evil-goto-first-line] . flycheck-error-list-goto-first-error)
          ([remap evil-goto-line]       . flycheck-error-list-goto-error-or-eob+)))
    #+END_SRC

    #+begin_src emacs-lisp
      (provide '+flycheck-commands)
    #+end_src

*** flycheck-pos-tip
    Show a little documentation tool-tip when hovering over an error.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package flycheck-pos-tip
        :straight t
        :hook (flycheck-mode . flycheck-pos-tip-mode)
        :commands flycheck-pos-tip-mode)
    #+END_SRC

** ggtags
   Tags are the classic source-code navigation system that predates LSP.

   While not as reliable as LSP it's generally lighter and easier to use across
   multiple languages/file-types and to just list semantic constructs in your
   code base. It also scales much better to massive repositories such as Linux
   compared to an LSP server trying to index it itself.

   GNU Global is the GNU source code tagging system with support for other tag-parsers
   through [[https://www.gnu.org/software/global/globaldoc_toc.html#Plug_002din][plugins]] such as Universal ctags. =ggtags= is the Emacs interface to global with
   support for automatically updating the tag database on file-saves and eldoc+xref
   integration.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! ggtags)
     (use-package ggtags
       :straight t
       :custom
       (ggtags-highlight-tag nil)

       :init
       (push 'ggtags-global-mode compilation-auto-kill-ignore-modes+)

       :preface
       (defun ggtags-enable-in-projects+ ()
         "Enable `ggtags-mode' when opening a file in a project with a GTAGS file."
         (unless (bound-and-true-p ggtags-mode)
           (when-let ((root (project-current-root+)))
             (when (file-exists-p (concat root "GTAGS"))
               (ggtags-mode +1)))))
       :hook (find-file . ggtags-enable-in-projects+)

       :config
       ;; Make ggtags highlight code through org-src. See [[https://github.com/leoliu/ggtags/issues/212][ggtags#212]].
       (require 'org-src)

       (defun ggtags-fontify-code-with-org+ (code &optional mode)
         (or mode (setq mode major-mode))
         (if (stringp code)
             (let* ((lang (s-chop-suffix "-mode" (symbol-name mode)))
                    ;; Fallback to default-face not org-block-face.
                    (org-src-block-faces `((,lang . (default)))))
               (with-temp-buffer
                 (insert code)
                 (org-src-font-lock-fontify-block lang (point-min) (point-max))
                 (buffer-substring (point-min) (point-max))))
           code))

       (advice-add #'ggtags-fontify-code :override #'ggtags-fontify-code-with-org+)

       :leader
       ("pgs" 'ggtags-grep
        "pgx" 'ggtags-delete-tags
        "pgr" 'ggtags-update-tags
        "pgq" 'ggtags-query-replace
        "pgm" 'ggtags-mode)

       :lazy-leader
       (:mode 'ggtags-global-mode                                                    ; NOTE ggtags-global-mode is not a global mode... global is for GNU *global* tagging system
        "r" 'recompile
        "f" 'next-error-follow-minor-mode))
   #+END_SRC

** git-gutter
   :PROPERTIES:
   :header-args+: :tangle (package-yes! git-gutter)
   :END:

   #+begin_src emacs-lisp :tangle no
     (use-package git-gutter ;; git-gutter-fringe
       :straight t
       :defer 10
       :delight ""
       :custom
       (git-gutter:added-sign "‚îÉ")
       (git-gutter:modified-sign "‚îÉ")
       (git-gutter:added-sign "‚îÉ")
       (git-gutter:deleted-sign "‚îÉ")
       (git-gutter:hide-gutter t)

       :config
       ;; (add-hook 'prog-mode-hook #'git-gutter-mode)
       (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
       (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

       :leader
       ("th" 'git-gutter-mode
        "tH" 'global-git-gutter-mode))
   #+end_src

   #+begin_src emacs-lisp
     (use-package diff-hl
       :straight t
       :hook ((diff-hl-mode . diff-hl-margin-mode)
              (diff-hl-mode . diff-hl-flydiff-mode))
       :custom
       (diff-hl-flydiff-delay 0.8)
       (diff-hl-margin-symbols-alist
        '((insert . "‚îÉ")
          (delete . "‚îÉ")
          (change . "‚îÉ")
          (unknown . "‚îÉ")
          (ignored . "‚îÉ")))
       :init
       (use-package smartrep
         :straight t)

       :leader
       ("th" 'diff-hl-mode))
   #+end_src

** hide-comnt
   Toggles the display of comments in the current buffer.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! hide-comnt)
     (use-package hide-comnt
       :straight (hide-comnt :host github :repo "emacsmirror/hide-comnt")
       :leader
       ("t/" 'hide/show-comments-toggle))
   #+END_SRC

** indent-guide
   :PROPERTIES:
   :header-args+: :tangle (package-yes! indent-guides)
   :END:

   #+begin_src emacs-lisp :tangle no
     (use-package indent-guide
       :straight t
       :custom
       (indent-guide-char "‚îÇ")
       (indent-guide-threshold -1))
   #+end_src

   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
       :straight t
       :custom
       (highlight-indent-guides-auto-enabled nil))
   #+end_src

** link-hint
   Jump to links through an avy interface.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! link-hint)
     (use-package link-hint
       :straight t
       :leader
       ("j RET" 'link-hint-open-link
        "j y" 'link-hint-copy-link)

       :config
       ;; support rustic compilation related modes.
       (link-hint-define-type 'compilation-link
         :vars (append
                (get 'link-hint-compilation-link :vars)
                '(rustic-compilation-mode
                  rustic-cargo-test-mode))))
   #+END_SRC

** lsp-mode
   :PROPERTIES:
   :header-args+: :tangle (package-yes! lsp-mode)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :straight t
       :commands (lsp-mode-server-exists-p+
                  lsp-mode-server-p+
                  lsp-mode-server-all-p+)
       :custom
       (lsp-auto-guess-root t)
       (lsp-enable-indentation nil)
       (lsp-enable-snippet t)
       ;; (lsp-auto-configure nil)
       (lsp-modeline-diagnostics-enable nil)
       (lsp-enable-symbol-highlighting nil)
       (lsp-eldoc-render-all nil)
       (lsp-enable-xref t)
       (lsp-headerline-breadcrumb-enable nil)
       (lsp-session-file (state! "lsp/session"))
       (lsp-server-install-dir (cache! "lsp/servers"))
       (lsp-diagnostics-provider (if (package! flycheck)
                                     :flycheck
                                   :flymake))

       :config
       (defun lsp-mode-server-exists-p+ (mode &optional all-workspaces)
         (when (buffer-file-name) ; Needed for lsp--matching-clients?
           (let ((major-mode mode))
             (seq-intersection
              (lsp--filter-clients #'lsp--matching-clients?)
              (when-let ((workspaces
                          (if all-workspaces
                              (-flatten (hash-table-values (lsp-session-folder->servers (lsp-session))))
                            (gethash (lsp-workspace-root) (lsp-session-folder->servers (lsp-session))))))
                (mapcar #'lsp--workspace-client workspaces))
              #'equal))))

       (defun lsp-mode-server-p+ (mode)
         (lsp-mode-server-exists-p+ mode))

       (defun lsp-mode-server-all-p+ (mode)
         (lsp-mode-server-exists-p+ mode t))

       :leader
       ("ll" 'lsp)

       :lazy-leader
       (:mode 'lsp-mode
        :minor t
        "jy" 'lsp-goto-type-definition
        "jY" 'lsp-goto-implementation)

       (:mode 'lsp-mode
        :minor t
        :prefix leader-server-leader-prefix

        "?" 'lsp-describe-session
        "a" 'lsp-execute-code-action
        "s" 'lsp-document-highlight
        "h" 'lsp-describe-thing-at-point
        "x" 'lsp-disconnect

        "w"  '(:ignore t :wk "workspace")
        "wR" 'lsp-restart-workspace
        "wa" 'lsp-workspace-folders-add
        "wr" 'lsp-workspace-folders-remove
        "ws" 'lsp-workspace-folders-switch

        "L"  '(:ignore t :wk "lens")
        "Ll" 'lsp-lens-mode
        "Ls" 'lsp-lens-show
        "Lh" 'lsp-lens-hide

        "r"  '(:ignore t :wk "refactor")
        "rr" 'lsp-format-buffer
        "ri" 'lsp-organize-imports
        "rc" 'lsp-rename

        "g"  '(:ignore t :wk "goto")
        "gg" 'lsp-goto-type-definition
        "gG" 'lsp-goto-implementation
        "gF" 'lsp-find-implementation
        "gf" 'lsp-find-type-definition)

       :general
       (:keymaps 'lsp-mode-map
        [remap xref-find-references-and-replace] 'lsp-rename))
   #+END_SRC

*** lsp-ui
    UI enhancements for lsp sessions... tries to make emacs more like VS Code. Boooooo!!!

    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :straight t
        ;; :hook (lsp-mode . lsp-ui-mode)
        :after lsp-mode
        :custom
        (lsp-ui-sideline-enable nil)
        (lsp-ui-doc-enable nil)

        :lazy-leader
        (:mode 'lsp-mode
         :minor t
         :prefix leader-server-leader-prefix
         "p"  '(:ignore t :wk "peek")
         "pg" 'lsp-ui-peek-find-definitions
         "pG" 'lsp-ui-peek-find-definitions))
    #+END_SRC

*** dap-mode
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package dap-mode
        :straight t)
    #+END_SRC

** magit
   :PROPERTIES:
   :header-args+: :tangle (package-yes! magit)
   :END:

   A git porcelain in emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :straight t
       :custom
       (magit-revision-show-gravatars  '("^Author:     " . "^Commit:     "))
       (magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1
        "Show magit status in a full screen window.")

       :init
       (defvaralias 'magit-repository-directories 'projectile-project-search-path)

       :custom (magit-bury-buffer-function #'magit-bury-buffer-function+)
       :config
       (defun magit-bury-buffer-function+ (&optional kill-buffer)
         "Burying a magit status buffer restores the previous window configuration."
         (funcall
          (if (eq major-mode 'magit-status-mode)
              'magit-restore-window-configuration
            'magit-mode-quit-window)
          kill-buffer))

       :config
       (add-hook 'magit-mode-hook
                 (defun magit-cleanup-defaults+ ()
                   ;; messes up alignment on rescroll
                   (setq-local scroll-conservatively 0)))

       (add-hook 'git-commit-mode-hook
                 (defun magit-initialise-commit+ ()
                   (setq fill-column 72)))
       (advice-add 'magit-section-up :around
                   (defun magit-section-up--adjust-destination (func &rest args)
                     (cond
                      ((magit-diff-inside-hunk-body-p)
                       (magit-section-goto (magit-current-section)))
                      (t (apply func args)))))

       (setq +whitespace-exempt-modes
             (append '(magit-status-mode
                       magit-process-mode
                       magit-log-mode
                       magit-diff-mode)
                     +whitespace-exempt-modes))

       :leader
       (:prefix "g"
        "$" 'magit-process-buffer
        "!" 'magit-run
        "g" 'magit-dispatch
        "s" 'magit-status
        "u" 'magit-unstage-file
        "b" 'magit-blame
        "p" 'magit-pop-revision-stack)

       :lazy-leader
       (:mode 'magit-status-mode
        "d" 'magit-list-repositories
        "z" 'magit-jump-to-stashes
        "u" 'magit-jump-to-unstaged
        "s" 'magit-jump-to-staged
        "f" 'magit-jump-to-untracked
        "r" 'magit-diff-toggle-refine-hunk
        "y" '(:ignore t :wk "copy")
        "ys" 'magit-copy-section-value
        "yr" 'magit-copy-buffer-revision)
       (:mode 'magit-log-select-mode
        "," 'magit-log-select-pick
        "q" 'magit-log-select-quit)
       (:mode '(magit-diff-mode magit-revision-mode)
        "r" 'magit-diff-toggle-refine-hunk
        "t" 'magit-diff-trace-definition
        "e" 'magit-diff-edit-hunk-commit)
       (:mode 'git-commit-mode
        :minor t
        :prefix leader-major-mode-prefix
        "s"  'git-commit-save-message
        "d"  'magit-diff-while-committing
        "j"  'git-commit-next-message
        "k"  'git-commit-prev-message
        "r"  'magit-pop-revision-stack
        "a"  'git-commit-insert-pseudo-header

        "i"  '(:ignore t :wk "insert")
        "ia" 'git-commit-ack ;; knowledgement
        "iS" 'git-commit-suggested
        "im" 'git-commit-modified
        "ic" 'git-commit-cc
        "ir" 'git-commit-reported
        "iR" 'git-commit-review
        "is" 'git-commit-signoff
        "it" 'git-commit-test)

       :preface
       (defvar magit-blob-mode-map (make-sparse-keymap))                            ; Suprress creation.
       :hook (magit-blob-mode . evil-motion-state)

       :leader
       (:mode 'magit-blob-mode
        :minor t
        :prefix leader-major-mode-prefix
        "b" 'magit-blame-addition
        "f" 'magit-blame-reverse
        "r" 'magit-blame-removal
        "n" 'magit-blob-next
        "p" 'magit-blob-previous)

       :general
       ([remap vc-revision] 'magit-find-file
        [remap vc-revision-other-window] 'magit-find-file-other-window
        [remap vc-diff] 'magit-diff-buffer-file
        [remap vc-print-log] 'magit-log-buffer-file
        [remap vc-print-log-all] 'magit-log-head
        [remap vc-create-tag] 'magit-tag
        [remap magit-diff-buffer-file] 'magit-diff-buffer-file)
       (:keymaps 'magit-mode-map
        "M-j" 'magit-section-forward-sibling
        "M-k" 'magit-section-backward-sibling

        ;; ;; toggle children doesn't seem to work
        ;; "C-r" 'magit-section-hide-children ; recursive close
        ;; "C-e" 'magit-section-show-children ; recursive expand
        ;; "M-r" 'magit-section-hide-children ; Meta aliases
        ;; "M-e" 'magit-section-show-children ; Meta aliases

        ;; Visit and expand, M-RET is used to visit in the other-window
        ;; when applicable but most of the time it's just the same as RET.
        "RET"   'magit-visit-thing
        "TAB"   'magit-section-toggle
        "M-RET" 'magit-visit-thing

        [remap revert-buffer] 'magit-refresh)
       ;; Use M-RET to visit files in another window.
       (:keymaps '(magit-file-section-map
                   magit-hunk-section-map)
        "M-RET" 'magit-diff-visit-file-other-window)
       (:keymaps 'magit-process-mode-map
        "RET" 'magit-section-toggle)
       ;; Org like section maneuvering.
       (:keymaps 'magit-section-mode-map
        :states 'motion
        "gh" 'magit-section-up
        "gl" 'magit-section-forward
        "gj" 'magit-section-forward-sibling
        "gk" 'magit-section-backward-sibling)

       ;; (:keymaps 'magit-diff-mode-map
       ;;  :states 'motion
       ;;  "gh" 'magit-section-up)
       (:keymaps 'magit-blob-mode-map
        [remap quit-window] 'magit-kill-this-buffer))
   #+END_SRC

   Now we need to enable evil-bindings in magit buffers... which is honestly a lot
   more of a pain then you may expect. For now I've just copied and pasted a bunch
   of helpful stuff from [[https://github.com/emacs-evil/evil-collection/blob/b45ec5b3156d27a18a949e4bf55643107a21abc2/modes/magit/evil-collection-magit.el][evil-collection]] and removed any references to evil-collection
   specific commands (such as ~evil-collection-define-key~). It's a sloppy solution
   but seems to be working for now.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :config
       ;; evil-collection-magit-use-y-for-yank
       (defvar evil-collection-magit-in-visual-pre-command)
       (defun evil-collection-magit--around-visual-pre-command (orig-func &rest args)
         (let ((evil-collection-magit-in-visual-pre-command t))
           (apply orig-func args)))

       (advice-add 'evil-visual-pre-command :around #'evil-collection-magit--around-visual-pre-command)
       (advice-add 'evil-visual-expand-region :filter-args
                   (defun evil-collection-magit--filter-args-visual-expand-region (arglist)
                     ;; pretend that the command has the :exclude-newline property by rewriting the
                     ;; EXCLUDE-NEWLINE arg to this function
                     (cons (and (bound-and-true-p evil-collection-magit-in-visual-pre-command)
                                (null (car arglist))
                                (eq (evil-visual-type) 'line)
                                (derived-mode-p 'magit-mode))
                           ;; shouldn't be necessary, but this will prevent it from failing if an
                           ;; arg is added.
                           (cdr arglist))))

       (evil-set-command-property 'magit-section-forward-sibling  :keep-visual t)
       (evil-set-command-property 'magit-section-forward          :keep-visual t)
       (evil-set-command-property 'magit-section-backward-sibling :keep-visual t)
       (evil-set-command-property 'magit-section-backward         :keep-visual t)
       (evil-set-command-property 'magit-section-up               :keep-visual t)

       ;; Need to refresh evil keymaps when blame mode is entered.
       (add-hook 'magit-blame-mode-hook 'evil-normalize-keymaps)

       (evil-set-initial-state 'magit-repolist-mode 'motion)
       (general-define-key
        :keymaps 'magit-repolist-mode-map
        :states 'motion
        "RET" 'magit-repolist-status
        "gr"  'magit-list-repositories)
       (add-hook 'magit-repolist-mode-hook 'evil-normalize-keymaps)

       (evil-set-initial-state 'magit-submodule-list-mode 'motion)
       (general-define-key
        :keymaps 'magit-submodule-list-mode-map
        :states 'motion
        "RET" 'magit-repolist-status
        "gr"  'magit-list-submodules)
       (add-hook 'magit-submodule-list-mode-hook 'evil-normalize-keymaps)

       ;; Set initial states
       (evil-set-initial-state 'git-rebase-mode 'motion)
       (evil-set-initial-state 'magit-mode 'motion)
       (evil-set-initial-state 'magit-cherry-mode 'motion)
       (evil-set-initial-state 'magit-diff-mode 'motion)
       (evil-set-initial-state 'magit-log-mode 'motion)
       (evil-set-initial-state 'magit-log-select-mode 'motion)
       (evil-set-initial-state 'magit-process-mode 'motion)
       (evil-set-initial-state 'magit-reflog-mode 'motion)
       (evil-set-initial-state 'magit-refs-mode 'motion)
       (evil-set-initial-state 'magit-revision-mode 'motion)
       (evil-set-initial-state 'magit-stash-mode 'motion)
       (evil-set-initial-state 'magit-stashes-mode 'motion)
       (evil-set-initial-state 'magit-status-mode 'motion)
       (evil-set-initial-state 'magit-blob-mode 'motion)
       (evil-set-initial-state 'magit-gitflow-mode 'motion)
       (evil-set-initial-state 'git-commit-mode 'normal)

       ;; WARN: Haven't included `evil-collection-magit-add-rebase-messages'.
       (with-eval-after-load 'git-rebase
         (remove-hook 'git-rebase-mode-hook 'git-rebase-mode-show-keybindings))

       ;; Adjust popups
       (transient-suffix-put 'magit-branch   "x" :key "X") ;; magit-branch-reset
       (transient-suffix-put 'magit-branch   "k" :key "x") ;; magit-branch-delete
       (transient-suffix-put 'magit-dispatch "o" :key "'") ;; magit-submodule
       (transient-suffix-put 'magit-dispatch "O" :key "\"") ;; magit-subtree
       (transient-suffix-put 'magit-dispatch "V" :key "_") ;; magit-revert
       (transient-suffix-put 'magit-dispatch "X" :key "O") ;; magit-reset
       (transient-suffix-put 'magit-dispatch "v" :key "-") ;; magit-reverse
       (transient-suffix-put 'magit-dispatch "k" :key "x") ;; magit-discard
       (transient-suffix-put 'magit-remote   "k" :key "x") ;; magit-remote-remove
       (transient-suffix-put 'magit-revert   "v" :key "o") ;; magit-revert-no-commit
       (transient-suffix-put 'magit-revert   "V" :key "O") ;; magit-revert-and-commit
       (transient-suffix-put 'magit-revert   "V" :key "O") ;; magit-sequencer-continue
       (transient-suffix-put 'magit-tag      "k" :key "x") ;; magit-tag-delete

       (with-eval-after-load 'forge
         ;; When `forge' is loaded, it maps `forge-dispatch' to ' key which is
         ;; set for `magit-submodule', wiping it so we add it back after `forge'
         ;; loads.
         (transient-append-suffix 'magit-dispatch "M"
           '("'" "Submodule" magit-submodule))
         ;; Clear `forge' key and re-add back in as "@".
         (transient-remove-suffix 'magit-dispatch 'forge-dispatch)
         (transient-append-suffix 'magit-dispatch "!"
           '("@" "Forge" forge-dispatch)))

       :general
       (:keymaps 'magit-mode-map
        :states '(motion visual)
        "g"     nil
        "n"     nil                                                                  ; magit-section-forward
        "M-n"   nil                                                                  ; magit-section-forward-sibling
        "M-n"   nil                                                                  ; magit-section-forward-sibling
        "p"     nil                                                                  ; magit-section-backward
        "M-p"   nil                                                                  ; magit-section-backward-sibling
        "M-p"   nil                                                                  ; magit-section-backward-sibling
        "g"     nil                                                                  ; magit-refresh
        "G"     nil                                                                  ; magit-refresh-all
        "k"     nil                                                                  ; magit-delete-thing
        "K"     nil                                                                  ; magit-file-untrack
        "v"     nil                                                                  ; magit-revert-no-commit
        "V"     nil                                                                  ; magit-revert
        "P"     nil                                                                  ; magit-push
        "x"     nil                                                                  ; magit-reset-quickly
        "X"     nil                                                                  ; magit-reset
        ":"     nil                                                                  ; magit-git-command
        "o"     nil                                                                  ; magit-submodule
        "O"     nil                                                                  ; magit-subtree
        "-"     nil                                                                  ; magit-diff-less-context
        "SPC"   nil                                                                  ; magit-diff-show-or-scroll-up
        "DEL"   nil                                                                  ; magit-diff-show-or-scroll-down
        "C-j"   'magit-section-forward
        "gj"    'magit-section-forward-sibling
        "]"     'magit-section-forward-sibling
        "C-k"   'magit-section-backward
        "gk"    'magit-section-backward-sibling
        "["     'magit-section-backward-sibling
        "gr"    'magit-refresh
        "gR"    'magit-refresh-all
        "x"     'magit-delete-thing
        "X"     'magit-file-untrack
        "-"     'magit-revert-no-commit
        "_"     'magit-revert
        "p"     'magit-push
        "o"     'magit-reset-quickly
        "O"     'magit-reset
        "|"     'magit-git-command
        "'"     'magit-submodule
        "\""    'magit-subtree
        "="     'magit-diff-less-context
        "@"     'forge-dispatch
        "j"     'evil-next-line
        "k"     'evil-previous-line
        "gg"    'evil-goto-first-line
        "G"     'evil-goto-line
        "C-d"   'evil-scroll-down
        "C-f"   'evil-scroll-page-down
        "C-b"   'evil-scroll-page-up
        ":"     'evil-ex
        "q"     'magit-mode-bury-buffer
        "S-SPC" 'magit-diff-show-or-scroll-up
        "S-DEL" 'magit-diff-show-or-scroll-down)
       (:keymaps 'magit-mode-map
        :states 'motion
        evil-toggle-key #'evil-emacs-state
        "<escape>" 'magit-mode-bury-buffer)
       (:keymaps 'magit-log-mode-map
        :states '(motion visual)
        "=" 'magit-log-toggle-commit-limit)

       ;; Fix evil-search
       (:keymaps 'magit-mode-map
        :states '(motion visual)
        "/" 'evil-ex-search-forward
        "n" 'evil-ex-search-next
        "N" 'evil-ex-search-previous)
       (:keymaps 'magit-status-mode-map
        :states '(motion visual)
        "t" 'magit-tag
        "gz"  'magit-jump-to-stashes
        "gt"  'magit-jump-to-tracked
        "gn"  'magit-jump-to-untracked
        "gu"  'magit-jump-to-unstaged
        "gs"  'magit-jump-to-staged
        "gfu" 'magit-jump-to-unpulled-from-upstream
        "gfp" 'magit-jump-to-unpulled-from-pushremote
        "gpu" 'magit-jump-to-unpushed-to-upstream
        "gpp" 'magit-jump-to-unpushed-to-pushremote
        "gh"  'magit-section-up)
       (:keymaps 'magit-diff-mode-map
        :states '(motion visual)
        "gd" 'magit-jump-to-diffstat-or-diff)
       (:keymaps 'magit-diff-mode-map
        :states 'visual
        "y" 'magit-copy-section-value)

       ;; evil-want-C-u-scroll
       (:keymaps 'magit-mode-map
        :states '(motion visual)
        "C-u" 'evil-scroll-up)

       ;; evil-collection-magit-use-y-for-yank
       (:keymaps 'magit-mode-map
        :states '(motion visual)
        "v"    'evil-visual-line
        "V"    'evil-visual-line)
       ;; (:keymaps 'magit-status-mode-map
       ;;  :states 'motion
       ;;  "y" (general-key-dispatch 'evil-yank
       ;;        "y" 'evil-line-or-visual-line
       ;;        "j" 'evil-next-visual-line
       ;;        "k" 'evil-previous-visual-line))
       (:keymaps 'magit-status-mode-map
        :states '(visual normal)
        "y" 'evil-yank)

       (:keymaps 'magit-mode-map
        :states 'visual
        "y" 'magit-copy-section-value)
       ;; evil-collection-magit-minor-mode-map-bindings
       ;; (:keymaps 'magit-blob-mode-map
       ;;  :states '(motion visual)
       ;;  "gj" 'magit-blob-next     "n" 'magit-blob-next
       ;;  "gk" 'magit-blob-previous "p" 'magit-blob-previous)
       (:keymaps 'git-commit-mode-map
        :states '(motion visual)
        "gk" 'git-commit-prev-message "M-p" nil
        "gj" 'git-commit-next-message "M-n" nil)
       (:keymaps '(magit-mode-map
                   magit-blame-mode-map
                   magit-blame-read-only-mode-map
                   magit-cherry-mode-map
                   magit-mode-map
                   magit-blob-mode-map
                   magit-diff-mode-map
                   magit-log-mode-map
                   magit-log-select-mode-map
                   magit-reflog-mode-map
                   magit-status-mode-map
                   magit-log-read-revs-map
                   magit-process-mode-map
                   magit-refs-mode-map)
        leader-key nil                                                               ; GIVE ME BACK MY LEADER!!!
        "<override-state>" 'all)
       (:keymaps '(git-rebase-mode-map
                   magit-gh-pulls-mode-map)
        leader-key nil                                                               ; GIVE ME BACK MY LEADER!!!
        "<override-state>" 'motion)
       (:keymaps '(magit-mode-map
                   magit-diff-mode-map)
        "C-w" nil                                                                    ; and my window-map
        )

       (:keymaps 'magit-blame-mode-map
        "j"    'evil-next-line
        "C-j"  'magit-blame-next-chunk                 "n" nil
        "gj"   'magit-blame-next-chunk                 "n" nil
        "J"    'magit-blame-next-chunk-same-commit     "N" nil
        "k"    'evil-previous-line
        "C-k"  'magit-blame-previous-chunk             "p" nil
        "gk"   'magit-blame-previous-chunk             "p" nil
        "K"    'magit-blame-previous-chunk-same-commit "P" nil)
       ;; git-rebase-mode
       (:keymaps 'git-rebase-mode-map
        :states 'motion
        "p"   'git-rebase-pick
        "r"   'git-rebase-reword
        "e"   'git-rebase-edit
        "s"   'git-rebase-squash
        "f"   'git-rebase-fixup
        "x"   'git-rebase-exec
        "d"   'git-rebase-kill-line
        "u"   'git-rebase-undo
        "k"   'evil-previous-line
        "j"   'evil-next-line
        "M-k" 'git-rebase-move-line-up
        "M-j" 'git-rebase-move-line-down)
       (:keymaps '(magit-blame-mode-map
                   magit-blame-read-only-mode-map)
        :states 'normal
        "q" 'magit-blame-quit))
   #+END_SRC

*** git-rebase
    major mode for editing rebase files. bundled with magit... even though it's not
    prefixed ~magit-~.

    #+BEGIN_SRC emacs-lisp
      (use-package git-rebase
        :config
        ;; (leader-set-keys-for-major-mode 'git-rebase-mode
        ;;   "x" 'git-rebase-kill-line
        ;;   )

        :general
        (:keymaps 'git-rebase-mode-map "SPC" nil)                                     ; reclaim leader key
        (;; git-rebase-show-or-scroll-up
         ;; git-rebase-show-or-scroll-down
         :keymaps 'git-rebase-mode-map
         :states  'motion
         "RET" 'git-rebase-show-commit))
    #+END_SRC

*** magit-todos
    #+BEGIN_SRC emacs-lisp
      (use-package magit-todos
        :straight t
        :after magit
        :lazy-leader
        (:mode 'magit-status-mode
         "T" 'magit-todos-list
         "t" 'magit-todos-jump-to-todos)

        :config
        (magit-todos-mode +1)

        :general
        (:keymaps '(magit-todos-item-section-map
                    magit-todos-section-map)
         "j" nil "B" nil "b" nil))
    #+END_SRC

*** magit-gitflow
    #+BEGIN_SRC emacs-lisp
      (use-package magit-gitflow
        :straight t
        :after (magit--handle-bookmark magit)
        :hook (magit-mode . turn-on-magit-gitflow)
        :delight
        (magit-gitflow-mode "GitFlow")

        :general
        (:keymaps 'magit-mode-map
         "%" 'magit-gitflow-popup))
    #+END_SRC

*** git-forge
    Interact with forges such as GitHub/gitlab from the comfort of magit.

    #+BEGIN_SRC emacs-lisp
      (use-package forge
        :straight t
        :after magit
        :custom
        (forge-database-file (state! "forge.db"))
        :general
        (:keymaps 'forge-issue-list-mode-map
         :states 'motion
         "RET" "<return>"))
    #+END_SRC

*** transient
    #+BEGIN_SRC emacs-lisp
      (use-package transient
        :straight t
        :config
        (setq transient-history-file (state! "transient/history.el")
              transient-values-file  (etc! "transient/values.el")
              transient-levels-file  (etc! "transient/levels.el"))

        :general
        ;; escape means quit too
        (:keymaps 'transient-base-map
         ;; "ESC"      'transient-quit-one
         "<escape>" 'transient-quit-one))
    #+END_SRC

** neotree
   :PROPERTIES:
   :header-args+: :tangle (package-yes! neotree)
   :END:

   #+begin_src emacs-lisp
     (use-package neotree
       :straight t
       :leader
       ("t RET" 'neotree-toggle)

       :init
       (push '(neotree-mode . 1) +indent-config)

       :custom
       (neo-display-action
        '((display-buffer-reuse-window
           display-buffer-in-side-window)
          (side . left)
          (body-function . nil)
          (window-parameters (mode-line-format . none)))
        "Remove the mode-line format and prevent auto-selection.")

       :custom
       (neo-theme 'dev-icons
        "Make neotree use nerd-fonts for a better rendering experience.")
       :config
       (defun neo-buffer--insert-fold-symbol+ (name &optional node-name)
         (when (eq neo-theme 'dev-icons)
           (cl-destructuring-bind (chevron . icon)
               (cl-case name
                 (open
                  (cons (+icon nerd-mdi "chevron-down")
                        (+icon-for dir (directory-file-name node-name))))
                 (close
                  (cons (all-the-icons-nerd-mdi "chevron-right")
                        (+icon-for dir (directory-file-name node-name))))
                 (t ; leaf
                  (cons nil (+icon-for file node-name))))
             (setq icon (all-the-icons-pad-on-tty-advice+ icon))
             (insert
              (if chevron
                  (format "\t%s\t%s\t" chevron icon)
                (format "\t\t\t%s\t" icon))))
           t))

       (advice-add #'neo-buffer--insert-fold-symbol :before-until
                   #'neo-buffer--insert-fold-symbol+)

       :lazy-leader
       (:mode 'neotree-mode
        "a" 'neotree-stretch-toggle
        "." 'neotree-hidden-file-toggle
        "o" 'notree-open-file-in-system-application
        "h" 'neotree-collapse-all
        "c" 'neotree-change-root
        "x" 'neotree-delete-node
        "t" 'neotree-create-node
        "p" 'neotree-copy-node
        "r" 'neotree-rename-node)

       :preface (setq neotree-mode-map (make-sparse-keymap))
       :general
       (:keymaps 'neotree-mode-map
        :states 'motion
        [remap evil-next-line] 'neotree-next-line
        [remap evil-previous-line] 'neotree-previous-line
        [remap revert-buffer] 'neotree-refresh
        [remap quit-window] 'neotree-hide
        "M-RET" 'neotree-quick-look
        "gh" 'neotree-select-up-node
        "gl" 'neotree-select-down-node                                               ; goto last node in current directory tree.
        "gk" 'neotree-select-previous-sibling-node
        "gj" 'neotree-select-next-sibling-node)
       :config
       (general-define-key
        :keymaps 'neotree-mode-map
        :states 'motion
        "TAB" (neotree-make-executor :dir-fn  'neo-open-dir)
        [remap evil-ret] (neotree-make-executor :file-fn 'neo-open-file :dir-fn  'neo-open-dir)))
   #+end_src

** notmuch
   :PROPERTIES:
   :header-args+: :tangle (package-yes! notmuch)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package notmuch
       :straight t
       :hook (notmuch-message-mode . flyspell-mode)
       :commands (notmuch-toggle-tag+)
       :custom
       (notmuch-search-oldest-first nil)
       (notmuch-maildir-use-notmuch-insert nil)                                      ; messes up fcc paths with spaces in them (eg: Gmail).
       (notmuch-show-indent-messages-width 2)
       (notmuch-hello-thousands-separator ",")
       (notmuch-search-line-faces
        '(("unread" . notmuch-search-unread-face)
          ("H" . notmuch-search-H-face+)
          ("flagged" . notmuch-search-flagged-face)))
       (notmuch-show-all-tags-list t)
       (notmuch-draft-folder "local/Drafts")

       :preface
       (defface notmuch-search-H-face+ '((t (:foreground "#FF6EB4")))
         "Face for lines tagged H in the `notmuch-search-mode' buffer.")

       :init
       (set-company-backend! 'notmuch-message-mode 'notmuch-company)

       :config
       (evil-set-initial-state 'notmuch-show-mode 'motion)
       (evil-set-initial-state 'notmuch-search-mode 'motion)
       (evil-set-initial-state 'notmuch-tree-mode 'motion)
       (evil-set-initial-state 'notmuch-hello-mode 'normal)

       (push 'notmuch-show-mode +whitespace-exempt-modes)

       (push '("replied" (propertize tag 'face 'shadow)) notmuch-tag-formats)

       ;; Needs to be an absolute path when `notmuch-maildir-use-notmuch-insert' isn't
       ;; true. This won't adapt to changes in database.path while emacs is already
       ;; open.
       (setq notmuch-fcc-dirs
             (let ((default-directory (notmuch-database-path)))
               (append
                (cl-loop for (it . conf) in +mail-conf
                         collect (cons
                                  (regexp-quote (concat (+mail-conf-email conf)))
                                  (expand-file-name
                                   (+mail-conf-get 'sent-dir conf))))
                `((,(rx any) . ,(expand-file-name (+mail-conf-get 'sent-dir)))))))

       (cl-defun notmuch-tag+ (tag-changes
                               &optional (next
                                          '((notmuch-search-mode . notmuch-search-next-thread))))
         (cl-case major-mode
           (notmuch-show-mode (notmuch-show-tag tag-changes))
           (notmuch-search-mode (notmuch-search-tag tag-changes))
           (notmuch-tree-mode (notmuch-tree-tag tag-changes))
           (t (user-error "No tag command known for %s" major-mode)))

         (when-let ((next (alist-get major-mode next)))
           (funcall next)))

       (defun notmuch-toggle-tag+ (tag-changes &optional next)
         "Toggle TAG tag for messages."
         (let ((tags (cl-case major-mode
                       (notmuch-show-mode (notmuch-show-get-tag tag-changes))
                       ((notmuch-search-mode
                         notmuch-tree-mode)
                        (user-error "Toggle tag not yet supported in %s" major-mode))
                       (t (user-error "No tag-get command known for %s" major-mode)))))
           (notmuch-tag+
            (cl-loop for tag in tag-changes collect
                     (concat (if (member tag tags) "-" "+")
                             tag))
            next)))

       ;; Make notmuch buffers support `auto-revert-mode'.
       :hook ((notmuch-search-mode notmuch-tree-mode) .
              notmuch-setup-auto-revert-mode+)
       :preface
       (defun notmuch-setup-auto-revert-mode+ ()
         (setq-local buffer-stale-function #'notmuch-buffer-stale-function+
                     revert-buffer-function #'notmuch-revert-buffer-function+))
       :config
       (defun notmuch-buffer-stale-function+ (&optional no-confirm)
         (unless (get-buffer-process (current-buffer))
           (ignore-errors
             (not
              (eq (string-to-number
                   (car (process-lines notmuch-command "count"
                                       (if (bound-and-true-p notmuch-tree-mode)
                                           "--output=messages"
                                         "--output=threads")
                                       (if (bound-and-true-p notmuch-search-exclude)
                                           "--exclude=true"
                                         "--exclude=false")
                                       notmuch-search-query-string)))
                  (1- (count-lines (point-min) (point-max))))))))

       (defun notmuch-revert-buffer-function+ (&optional ignore-auto no-confirm)
         (notmuch-refresh-this-buffer))

       :init
       (defvar notmuch-open-remote-urls+
         ;; Sadly gmail doesn't let us view a message based solely on its
         ;; message id. The best we can do is open a search that should
         ;; have only one result.
         `((,(rx "@gmail.com" (optional ">") eol) .
            ,(lambda (mail)
               (format "https://mail.google.com/mail/u/%s/#search/rfc822msgid:%s"
                       mail (url-hexify-string (notmuch-show-get-message-id t)))))))

       :config
       (defun notmuch-open-remote+ ()
         (interactive)
         (unless (derived-mode-p 'notmuch-show-mode)
           (user-error "%s can only be called in `notmuch-show' buffers" this-command))

         (let ((to (car (mail-header-parse-address (notmuch-show-get-to)))))
           (if-let ((url-gen (cdr
                              (cl-find-if (lambda (it)
                                            (string-match-p (car it) to))
                                          notmuch-open-remote-urls+))))
               (browse-url (funcall url-gen to))
             (user-error "No opener configured for mail from %s" to))))
       :general
       (:keymaps 'notmuch-show-mode-map
        [remap +xopen-url] 'notmuch-open-remote+)

       :general
       ([remap message-mail] 'notmuch)

       (:keymaps 'notmuch-common-keymap
        [remap quit-window] 'notmuch-bury-or-kill-this-buffer
        [remap revert-buffer] 'notmuch-refresh-this-buffer)
       (:keymaps 'notmuch-common-keymap
        :states 'motion
        "s" 'notmuch-search
        "S" 'notmuch-tree
        "J" 'notmuch-jump-search
        "K" 'notmuch-tag-jump

        "g?" 'notmuch-help
        "gA" 'notmuch-refresh-all-buffers
        "gR" 'notmuch-poll-and-refresh-this-buffer

        "C" 'notmuch-mua-new-mail                                                    ; like mu4e
        "cc" 'notmuch-mua-new-mail                                                   ; like mu4e
        "ch" 'goto-address-at-point                                                  ; compose for mail at point
        )

       (:keymaps '(notmuch-hello-mode-map
                   notmuch-show-mode-map)
        [remap quit-buffer] 'notmuch-bury-or-kill-this-buffer)
       (:keymaps 'notmuch-hello-mode-map
        :states 'normal
        ;; Don't need macros in notmuch-hello mode.
        "q" 'quit-window)

       (:keymaps 'notmuch-show-mode-map
        :states 'motion
        "p" 'notmuch-show-save-attachments  ; like mu4e
        "A" 'notmuch-show-archive-thread-then-next
        "X" 'notmuch-show-archive-thread-then-exit
        "x" 'notmuch-show-archive-message-then-next-or-exit
        "." 'notmuch-show-part-map

        "TAB"       'notmuch-show-next-button
        "<backtab>" 'notmuch-show-previous-button
        "RET"       'notmuch-show-toggle-message

        "S" 'notmuch-show-filter-thread
        "K" 'notmuch-tag-jump

        "C" 'notmuch-mua-new-mail                                                    ; like mu4e
        "cc" 'notmuch-mua-new-mail                                                   ; like mu4e
        "cf" 'notmuch-show-forward-message
        "cr" 'notmuch-show-reply-sender
        "cR" 'notmuch-show-reply

        "zv" 'notmuch-tree-from-show-current-query                                   ; like mu4e-conversation
        "a" 'notmuch-show-archive-message-then-next-or-next-thread

        "]]"  'notmuch-show-next-open-message
        "[["  'notmuch-show-previous-open-message
        "gj"  'notmuch-show-next-message
        "gk"  'notmuch-show-previous-message
        "C-j" 'notmuch-show-next-message
        "C-k" 'notmuch-show-previous-message

        "gn"  'notmuch-show-next-thread-show
        "gp"  'notmuch-show-previous-thread-show
        "M-j" 'notmuch-show-next-thread-show
        "M-k" 'notmuch-show-previous-thread-show

        "|" 'notmuch-show-pipe-message
        "*" 'notmuch-show-tag-all
        "-" 'notmuch-show-remove-tag
        "+" 'notmuch-show-add-tag)

       (:keymaps 'notmuch-tree-mode-map
        [remap quit-window] 'notmuch-tree-quit)

       (:keymaps 'notmuch-tree-mode-map
        :states 'motion
        "gh" 'notmuch-show-previous-button
        "gj" 'notmuch-show-next-button
        "gk" 'notmuch-show-previous-button
        "gl" 'notmuch-show-next-button
        "g?" 'notmuch-help

        "s" 'notmuch-tree-to-tree
        "S" 'notmuch-tree-filter
        "J" 'notmuch-jump-search
        "K" 'notmuch-tag-jump
        "t" 'notmuch-tree-filter-by-tag

        "C" 'notmuch-mua-new-mail                                                    ; like mu4e
        "cc" 'notmuch-mua-new-mail                                                   ; like mu4e
        "cr" 'notmuch-show-reply-sender                                              ; like mu4e
        "cR" 'notmuch-show-reply

        "zv" 'notmuch-search-from-tree-current-query                                 ; like mu4e-conversation
        "RET" 'notmuch-tree-show-message
        [mouse-1] 'notmuch-tree-show-message

        "A" 'notmuch-tree-archive-thread
        "a" 'notmuch-tree-archive-message-then-next

        "gj" 'notmuch-tree-next-matching-message
        "gk" 'notmuch-tree-prev-matching-message
        "]]" 'notmuch-tree-next-message
        "[[" 'notmuch-tree-prev-message
        "C-k" 'notmuch-tree-prev-thread
        "C-j" 'notmuch-tree-next-thread

        "|" 'notmuch-show-pipe-message
        "-" 'notmuch-tree-remove-tag
        "+" 'notmuch-tree-add-tag
        "*" 'notmuch-tree-tag-thread
        "e" 'notmuch-tree-resume-message)

       (:keymaps 'notmuch-search-mode-map
        [remap quit-window] 'notmuch-bury-or-kill-this-buffer)
       (:keymaps 'notmuch-search-mode-map
        :states '(motion visual)
        "C" 'notmuch-mua-new-mail                                                    ; like mu4e
        "cc" 'notmuch-mua-new-mail                                                   ; like mu4e
        "cr" 'notmuch-search-reply-to-thread-sender
        "cR" 'notmuch-search-reply-to-thread

        "s" 'notmuch-search
        "S" 'notmuch-search-filter
        "J" 'notmuch-jump-search
        "K" 'notmuch-tag-jump
        "t" 'notmuch-search-filter-by-tag

        "zv" 'notmuch-tree-from-search-current-query

        "*" 'notmuch-search-tag-all
        "-" 'notmuch-search-remove-tag
        "+" 'notmuch-search-add-tag
        "a" 'notmuch-search-archive-thread

        "RET"     'notmuch-search-show-thread
        [mouse-1] 'notmuch-search-show-thread)

       :preface
       (defvar notmuch-action-map+
         (let ((map (make-sparse-keymap)))
           (define-key map leader-major-mode-key
             (defun notmuch-tag-all+ ()
               (interactive)
               "Tag all selected threads based on `major-mode'.
     Works exactly like notmuch-*-add-tag and notmuch-*-remove-tag which
     are bound to + and - respectively, except in `notmuch-show-mode'
     where it tags *all* the messages in the current thread instead of
     just the current one."
               (call-interactively
                (cl-case major-mode
                  (notmuch-show-mode #'notmuch-show-tag-all)
                  (notmuch-search-mode #'notmuch-search-tag)
                  (notmuch-tree-mode #'notmuch-tree-tag)
                  (t (user-error "No tag command known for %s" major-mode))))))

           (define-key map "d"
             (defun notmuch-tag-set-delete+ ()
               (interactive)
               (notmuch-tag+ '("+deleted" "-inbox" "-unread"))))

           (define-key map "s"
             (defun notmuch-tag-set-spam+ ()
               (interactive)
               (notmuch-tag+ '("+spam" "-inbox" "-unread"))))

           (define-key map "f"
             (defun notmuch-tag-set-flagged+ ()
               (interactive)
               (notmuch-tag+ '("+flagged") nil)))

           (define-key map "i"
             (defun notmuch-tag-remove-from-inbox+ ()
               (interactive)
               (notmuch-tag+ '("-inbox" "-unread"))))

           map)
         "Keymap containing commands to act upon emails.")

       :lazy-leader
       (:mode 'notmuch-message-mode
        "d" 'notmuch-draft-postpone
        "s" 'notmuch-draft-save)
       (:mode 'notmuch-hello-mode
        leader-major-mode-key 'notmuch-jump-search
        "i" 'notmuch-jump-search
        "j" 'notmuch-jump-search
        "c" 'notmuch-mua-new-mail
        "G" 'notmuch-poll-and-refresh-this-buffer
        "s" 'notmuch-search
        "t" 'notmuch-search-by-tag
        "z" 'notmuch-tree)

       (:mode '(notmuch-show-mode
                notmuch-tree-mode
                notmuch-search-mode)
        leader-major-mode-key notmuch-action-map+)

       (:mode 'notmuch-show-mode
        "a" 'notmuch-show-advance-and-archive
        "#" 'notmuch-show-print-message
        "$" 'notmuch-show-toggle-process-crypto
        "d" 'notmuch-show-resume-message
        "u" 'notmuch-show-browse-urls
        "F" 'notmuch-show-forward-open-messages
        "G" 'notmuch-poll-and-refresh-this-buffer
        "z" 'notmuch-tree-from-show-current-query
        "v" 'notmuch-tree-from-show-current-query                                    ; like mu4e-conversation
        "r" 'notmuch-show-view-raw-message

        "t" '(:ignore t :wk "toggle")
        "ti" 'notmuch-show-toggle-thread-indentation
        "th" 'notmuch-show-toggle-visibility-headers
        "te" 'notmuch-show-toggle-elide-non-matching
        "t TAB" 'notmuch-show-toggle-thread-indentation)

       (:mode 'notmuch-tree-mode
        "v" 'notmuch-search-from-tree-current-query)

       (:mode 'notmuch-search-mode
        "v" 'notmuch-tree-from-search-current-query

        "t" '(:ignore t :wk "toggle")
        "to" 'notmuch-search-toggle-order))
   #+END_SRC

*** gnus-alias
    The [[https://notmuchmail.org/emacstips/#index16h2][recommended]] way to manage and interact with multiple accounts from notmuch.

    #+begin_src emacs-lisp
      (use-package gnus-alias
        :straight t
        :hook (message-setup . gnus-alias-determine-identity)
        :custom
        (gnus-alias-default-identity (symbol-name (caar +mail-conf)))
        (gnus-alias-allow-forward-as-reply t)
        (gnus-alias-identity-alist
         (cl-loop for (it . conf) in +mail-conf
                  collect (list (symbol-name it)
                                nil ; Does not refer to any other identity.
                                (+mail-conf-from-header conf)
                                nil ; No organization header
                                nil ; No extra headers
                                nil ; No extra body text
                                (+mail-conf-get 'signature-file conf))))
        (gnus-alias-identity-rules
         (cl-loop for (it . conf) in +mail-conf
                  with email = nil do (setq email (+mail-conf-email conf))
                  collect (list (concat "Match " email)
                                `("from" ,(regexp-quote email))
                                (symbol-name it)))
         "Automatically pick the right id for a response.")

        :leader
        (:mode '(message-mode notmuch-message-mode)
         "c" 'gnus-alias-select-identity)

        :config
        ;; Update the FCC header after an identity change (pretty much essential IMO).
        (require 'notmuch-maildir-fcc)                                                ; Needed for fcc->identity association.

        (advice-add 'gnus-alias-use-identity-1 :after
                    (defun gnus-alias-use-identity-update-fcc+ (&rest _ignore)
                      (save-excursion
                        (gnus-alias-remove-header "FCC")
                        (notmuch-fcc-header-setup))))

        :config
        (advice-add 'gnus-alias-identity-prompt :override
                    (defun gnus-alias-identity-prompt+ ()
                      (gnus-alias-ensure-message-mode)
                      (let* ((identities (cl-loop for it in gnus-alias-identity-alist
                                                  collect (cons (gnus-alias-get-from it)
                                                                it)))
                             (cands (mapcar #'car identities))
                             (affixate
                              (lambda (cands)
                                (cl-loop for cand in cands
                                         with signature = nil
                                         do (setq signature (cadr (assoc cand identities)))
                                         collect
                                         (list cand ""
                                               (concat (propertize " " 'display `(space :align-to (- right 1 ,(length signature))))
                                                       (propertize signature 'face 'completions-annotations)))))))
                        (cadr
                         (assoc
                          (completing-read "Identity: "
                                           (lambda (str pred action)
                                             (if (eq action 'metadata)
                                                 `(metadata
                                                   (affixation-function . ,affixate))
                                               (complete-with-action action cands str pred))))
                          identities)))))

        :config
        ;; Fix signature is read-only and can't be removed.
        (advice-add 'gnus-alias-remove-sig :override
                  (defun gnus-alias-remove-sig+ ()
                    (gnus-alias-goto-sig)
                    ;; Needed because delete-region can't delete signature, why?
                    (delete-backward-char (current-column))
                    (delete-region (point) (point-max)))))
    #+end_src

** ebdb
   :PROPERTIES:
   :header-args+: :tangle (package-yes! ebdb)
   :END:
   A rewrite of [[https://www.jwz.org/bbdb/#:~:text=The%20Insidious%20Big%20Brother%20Database&text=BBDB%20is%20a%20rolodex%2Dlike,%2DE%2C%20and%20RMAIL.)&text=It%20also%20does%20a%20good,someone's%20email%20address%20has%20changed.][the insidious big brother database]] aiming at better performance and
   reliability.

   #+begin_src emacs-lisp
     (use-package ebdb
       :straight t
       :custom
       (ebdb-mua-auto-update-p 'existing
        "Disable to prevent EBDB from interfering with mail dispatch.")
       (ebdb-complete-mail nil
        "I prefer `company-edbd' over replacing capf or rebinding TAB.")
       (ebdb-save-on-exit t)

       :config
       ;; I have a main contacts database and may have several other databases as well.
       (let ((default-directory (join-path (xdg-documents-dir) "contacts" "database")))
         (mkdir default-directory t)

         (setq ebdb-sources (seq-uniq
                             (append (list (join-path default-directory "main.el"))
                                     (file-expand-wildcards "*.el" t))
                             #'string-equal))
         (unless ebdb-sources
           (warning "No sources for ebdb setup."))
         (ebdb-load))

       :init
       (with-eval-after-load 'notmuch
         (require 'ebdb-notmuch)
         (remove-hook 'notmuch-show-mode-hook #'ebdb-insinuate-notmuch)
         (leader-set-keys-for-major-mode 'notmuch-show-mode
           ";" ebdb-mua-keymap))

       ;; Override the default keymap for ebdb-mua.
       (defvar ebdb-mua-keymap (make-sparse-keymap))

       :config
       ;; Erase the default ebdb mode map.
       (setq ebdb-mode-map (make-sparse-keymap))

       :leader
       ("aK" '(ebdb-display-all-records :wk "ebdb"))
       (:mode 'ebdb-mode
        "m" 'ebdb-toggle-record-mark
        "u" 'ebdb-unmark-all-records
        "e" 'ebdb-edit-foo
        "F" 'ebdb-toggle-all-records-format
        "f" 'ebdb-format-these-records
        "l" 'ebdb-cite-records-ebdb                                                  ; Generate a link to the list of records in different formats
        "C" 'ebdb-mail-each
        "c" 'ebdb-mail
        "o" 'ebdb-omit-records
        "." 'ebdb-reformat-records
        "w" 'ebdb-save-ebdb
        "," 'ebdb-toggle-records-format
        "d" 'ebdb-clone-buffer
        "r" 'ebdb-move-records
        "R" 'ebdb-reload-database
        "p" 'ebdb-display-current-record
        "P" 'ebdb-display-all-records

        "y" '(:ignore t :wk "clone")
        "yf" 'ebdb-copy-fields-as-kill
        "ym" 'ebdb-copy-mail-as-kill
        "yy" 'ebdb-copy-records-as-kill

        "s" '(:ignore t :wk "search")
        "si" 'ebdb-search-invert
        "sx" 'ebdb-search-pop
        "sc" 'ebdb-search-record-class
        "sD" 'ebdb-search-database
        "sa" 'ebdb-search-address
        "se" 'ebdb-search-modified
        "sd" 'ebdb-search-duplicates
        "sm" 'ebdb-search-mail
        "sn" 'ebdb-search-name
        "so" 'ebdb-search-organization
        "sp" 'ebdb-search-phone
        "st" 'ebdb-search-tags
        "sf" 'ebdb-search-user-fields
        "ss" 'ebdb                                                                   ; Search regexp
        "s1" 'ebdb-search-single-record)

       :general
       (:keymaps 'ebdb-mode-map
        [remap evil-save] 'ebdb-save
        "SPC" nil)
       (:keymaps 'ebdb-mua-keymap
        ";" 'ebdb-mua-display-all-records
        "n" 'ebdb-mua-edit-sender-notes
        "f" 'ebdb-mua-toggle-records-format
        "c" 'ebdb-mua-update-records
        "s" 'ebdb-mua-snarf-article
        "o" 'ebdb-mua-in-ebdb-buffer)
       (:keymaps 'ebdb-mode-map
        :states 'motion
        "TAB" 'ebdb-next-field
        "<backtab>" 'ebdb-prev-field
        "RET" 'ebdb-record-action

        ;; Unbound:
        ;;   ebdb-edit-field-customize
        ;;   ebdb-create-record-and-role
        ;;   ebdb-format-to-tmp-buffer
        ;;   ebdb-info
        ;;   ebdb-dial
        ;;   ebdb-copy-records
        ;;   ebdb-disable-database
        ;;   ebdb-customize-database
        "a" 'ebdb-mail-aliases
        "c" 'ebdb-create-record
        "C" 'ebdb-create-record-extended
        "e" 'ebdb-edit-field
        "i" 'ebdb-insert-field
        "x" 'ebdb-delete-field-or-record

        "gj" 'ebdb-next-record
        "gk" 'ebdb-prev-record))
   #+end_src

*** company-ebdb                                                       :comp:
    #+begin_src emacs-lisp
      (use-package company-ebdb
        :straight t
        :init
        (set-company-backend! 'notmuch-message-mode
          '(company-ebdb notmuch-company))

        :config
        (setq company-backends (remove 'company-ebdb company-backends))

        :custom (company-ebdb-pop-up nil "Prefer `company-doc-buffer'.")
        :config
        (advice-add 'company-ebdb :before-until
                    (defun company-ebdb-doc-buffer+ (command &optional arg &rest args)
                      (when (eq command 'doc-buffer)
                        (let* ((bits (ebdb-decompose-ebdb-address arg))
                               (recs (ebdb-message-search (car bits) (nth 1 bits))))
                          (when recs
                            (save-window-excursion
                              (ebdb-display-records recs)
                              (window-buffer))))))))
    #+end_src

** olivetti
   A nice writing environment for emacs :)

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! olivetti)
     (use-package olivetti
       :straight t
       :commands olivetti-setup-buffer
       :hook (olivetti-mode . olivetti-setup-buffer)
       :init
       (defvar olivetti-hide-fringe+ nil
         "when true, olivetti mode will hide the window fringe.")

       :config
       (add-hook 'olivetti-mode-hook
                 (defun olivetti-setup-buffer ()
                   "hide line numbers and the fringe."
                   (display-line-numbers-mode
                    (if olivetti-mode -1 +1))

                   (eval
                    `(set-window-fringes
                      (selected-window)
                      ,@(if (and olivetti-mode
                                 olivetti-hide-fringe+)
                            '(0 0)
                          '(8 8))))))

       :leader
       ("M'" 'olivetti-mode)

       :lazy-leader
       ((concat leader-minor-mode-leader-prefix "-") 'olivetti-set-width)

       :general
       (:keymaps 'olivetti-mode-map
        "C-c >" #'olivetti-expand
        "C-c <" #'olivetti-shrink))
   #+END_SRC

** pdftools
   :PROPERTIES:
   :header-args+: :tangle (package-yes! pdf-tools)
   :END:

   Use emacs as a quick and dirty pdf viewer.

   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :straight t
       :mode ("\\.pdf$" . pdf-view-mode)
       ;; see [[https://www.reddit.com/r/emacs/comments/6g15nk/pdftools_latex_freeze/][here]].
       :hook (pdf-view-mode . (lambda ()
                                (line-number-mode -1)))
       :config
       (setq-default pdf-view-display-size 'fit-page)

       ;; only accepts absolute paths and doesn't automatically append ".exe" when on windows.
       (eval-when-compile
         (let ((epdfinfo-program (expand-file-name (cache! "pdf-tools/epdfinfo"))))
           (when (windows-p)
             (setq epdfinfo-program (concat epdfinfo-program ".exe")))
           (setq pdf-info-epdfinfo-program epdfinfo-program)))

       (evil-set-initial-state 'pdf-view-mode 'motion)

       ;; (pdf-tools-install)

       (require '+pdf-tools-bindings))
   #+END_SRC

*** bindings
    #+BEGIN_SRC emacs-lisp :tangle (package-str! "(lisp! "+pdf-tools-bindings.el" pdf-tools"))
      (leader-set-keys-for-major-mode 'pdf-view-mode-map
        "g" 'pdf-outline)

      (general-define-key
       :keymaps 'pdf-view-mode-map
       :states 'motion
       ;; "RET" 'image-next-line
       "TAB" 'pdf-outline

       "w" 'pdf-view-fit-height-to-window
       "e" 'pdf-view-fit-width-to-window
       "E" 'pdf-view-fit-page-to-window

       "J" 'pdf-view-next-page-command
       "K" 'pdf-view-previous-page-command

       "gj" 'image-next-line
       "gk" 'image-previous-line

       "h" 'evil-scroll-column-left
       "l" 'evil-scroll-column-right

       ;; "C-j" 'pdf-view-next-page-command
       ;; "C-k" 'pdf-view-previous-page-command

       ;; "]]" 'pdf-view-next-page-command
       ;; "[[" 'pdf-view-previous-page-command

       "H" 'beginning-of-buffer
       "L" 'end-of-buffer

       "=" 'pdf-view-scale-reset
       "+" 'pdf-view-enlarge
       "-" 'pdf-view-shrink

       "C-d" 'pdf-view-scroll-up-or-next-page
       "C-u" 'pdf-view-scroll-down-or-previous-page

       "m" 'pdf-view-position-to-register
       "'" 'pdf-view-jump-to-register
       "`" 'pdf-view-jump-to-register

       "q" nil
       "Q" 'kill-this-buffer)

      (general-define-key
       :keymaps 'pdf-view-mode-map
       :states 'visual
       "y" 'pdf-view-kill-ring-save)

      (leader-set-keys-for-major-mode 'pdf-view-mode
        "l" 'pdf-view-goto-label
        "o" 'pdf-occur

        ;; modify the display of the PDF.
        "TAB" 'doc-view-mode
        "d" 'pdf-view-dark-minor-mode
        "D" 'pdf-view-midnight-minor-mode
        "p" 'pdf-view-printer-minor-mode

        ;; narrow to a subslice of the given page.
        "s"  '(:ignore t :wk "slice")
        "sm" 'pdf-view-set-slice-using-mouse
        "ss" 'pdf-view-set-slice-from-bounding-box
        "sr" 'pdf-view-reset-slice)

      (evil-set-initial-state 'pdf-outline-buffer-mode 'motion)

      (general-define-key
       :states  'motion
       :keymaps 'pdf-outline-buffer-mode-map
       "o" 'pdf-outline-display-link
       "sa" 'show-all
       "ss" 'show-subtree
       "sh" 'hide-subtree
       "sn" 'hide-subtree
       "gh" 'pdf-outline-up-heading
       "gk" 'outline-backward-same-level
       "gj" 'outline-forward-same-level
       "gl" 'outline-next-heading
       "gd" 'outline-hide-entry
       "g SPC" 'pdf-outline-select-pdf-window

       "<C-return>" 'pdf-outline-follow-link
       "M-RET" 'pdf-outline-display-link
       "RET" 'pdf-outline-follow-link-and-quit
       ;; goto current page in the outline window
       "gp" 'pdf-outline-move-to-current-page

       "<C-tab>" 'hide-sublevels
       "<C-up>" 'outline-move-subtree-up
       "<C-down>" 'outline-move-subtree-down)

      (leader-set-keys-for-major-mode 'pdf-outline-buffer-mode
        "f" 'pdf-outline-follow-mode
        "m" 'outline-mark-subtree)

      (evil-set-initial-state 'pdf-occur-buffer-mode 'motion)

      (defvar pdf-occur-buffer-mode-map (make-sparse-keymap))
      (general-define-key
       :states  'motion
       :keymaps 'pdf-occur-buffer-mode-map
       ;; unbound: tablist-export-csv
       "RET" 'pdf-occur-goto-occurrence
       "s" 'pdf-occur-view-occurrence
       "o" 'pdf-occur-view-occurrence
       "d" 'tablist-do-kill-lines
       "x" 'pdf-occur-tablist-do-flagged-delete
       "<backtab>" 'tablist-backward-column
       "DEL" 'tablist-unmark-backward

       [remap evil-first-non-blank] 'tablist-move-to-major-column
       [remap evil-next-line] 'tablist-next-line
       [remap evil-previous-line] 'tablist-previous-line

       "gr" 'pdf-occur-revert-buffer-with-args

       "A" 'pdf-occur-tablist-gather-documents
       "D" 'pdf-occur-tablist-do-delete

       "S" 'tabulated-list-sort
       "gS" 'tablist-revert

       "m" 'tablist-mark-forward
       "~" 'tablist-toggle-marks
       "u" 'tablist-unmark-forward
       "U" 'tablist-unmark-all-marks
       "*m" 'tablist-mark-forward
       "*!" 'tablist-unmark-all-marks
       "*c" 'tablist-change-marks
       "*n" 'tablist-mark-items-numeric
       "*r" 'tablist-mark-items-regexp
       "*%" 'tablist-mark-items-regexp

       "a" 'tablist-flag-forward

       [remap quit-window]  'tablist-quit
       "ZQ" 'tablist-quit
       "ZZ" 'tablist-quit)

      (leader-set-keys-for-major-mode 'pdf-occur-buffer-mode
        "/!" 'tablist-negate-filter
        "//" 'tablist-display-filter
        "/=" 'tablist-push-equal-filter
        "/C" 'tablist-clear-filter
        "/D" 'tablist-delete-named-filter
        "/a" 'tablist-push-named-filter
        "/d" 'tablist-deconstruct-named-filter
        "/e" 'tablist-edit-filter
        "/n" 'tablist-push-numeric-filter
        "/p" 'tablist-pop-filter
        "/r" 'tablist-push-regexp-filter
        "/s" 'tablist-name-current-filter
        "/t" 'tablist-toggle-first-filter-logic
        "/z" 'tablist-suspend-filter)

      (require '+pdf-tools-commands)
      (provide '+pdf-tools-bindings)
    #+END_SRC

*** commands
    #+BEGIN_SRC emacs-lisp
      (use-package +pdf-tools-commands
        :general
        (:keymaps 'pdf-view-mode-map
         :states  'motion
         "j"  'pdf-view-next-line-or-next-page-with-prefix
         "k"  'pdf-view-prev-line-or-prev-page-with-prefix
         "gg" 'pdf-view-goto-first-page-with-prefix
         "G"  'pdf-view-goto-page-with-prefix))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle (package-str! "(lisp! "+pdf-tools-commands.el" pdf-tools"))
      ;; functions ripped from evil-collection
      (defun pdf-view-next-line-or-next-page-with-prefix (&optional count)
        "'evil' wrapper include a count argument to `pdf-view-next-line-or-next-page'"
        (interactive "p")
        (if count
            (dotimes (_ count nil)
              (pdf-view-next-line-or-next-page 1))
          (pdf-view-next-line-or-next-page 1)))

      (defun pdf-view-prev-line-or-prev-page-with-prefix (&optional count)
        "'evil' wrapper include a count argument to `pdf-view-previous-line-or-previous-page'"
        (interactive "p")
        (if count
            (dotimes (_ count nil)
              (pdf-view-previous-line-or-previous-page 1))
          (pdf-view-previous-line-or-previous-page 1)))

      (defun pdf-view-goto-page-with-prefix (&optional page)
        "`evil' wrapper around `pdf-view-last-page'."
        (interactive "P")
        (if page
            (pdf-view-goto-page page)
          (pdf-view-last-page)
          (image-eob)))

      (defun pdf-view-goto-first-page-with-prefix (&optional page)
        "`evil' wrapper around `pdf-view-first-page'."
        (interactive "P")
        (if page
            (pdf-view-goto-page page)
          (pdf-view-first-page)
          (image-bob)))

      (provide '+pdf-tools-commands)
    #+END_SRC

** piper
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! piper)
     (use-package piper
       :straight (emacs-piper :host gitlab :repo "howardabrams/emacs-piper")
       :commands (piper-ui)
       :leader
       (:prefix "|"
        ""    '(:ignore t :wk "piper")
        "RET" 'piper-ui
        "|"   'piper
        "o"   'piper-other
        "@"   'piper-remote)

       :config
       (defalias 'piper-ui #'piper-user-interface))
   #+END_SRC

** rake
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! rake)
     (use-package rake
       :straight t
       :commands (rake-refresh)
       :leader
       ("cr" 'rake
        "cR" 'rake-rerun)

       :custom
       (rake-completion-system 'default)
       (rake-cache-file (state! "rake.cache"))

       :config
       (defalias 'rake-refresh #'rake-regenerate-cache))
   #+END_SRC

** secret-mode
   Provides a mode to obfuscate the text in a buffer in a way that's still legible for
   screenshots.

   #+begin_src emacs-lisp :tangle no
     (use-package secret-mode
       :straight (secret-mode :host github :repo "bkaestner/secret-mode.el"))
   #+end_src

** skeletor
   :PROPERTIES:
   :header-args+: :tangle (package-yes! skeletor)
   :END:

   Project skeleton [[https://github.com/chrisbarrett/skeletor.el][unpacker]] in emacs-lisp.

   #+NAME: package-skeletor
   #+BEGIN_SRC emacs-lisp
     (use-package skeletor
       :straight t
       :commands (skeletor-expand-project+)
       :leader
       ("pn" 'skeletor-expand-project+)

       :custom
       (skeletor-user-directory (etc! "skeletor"))
       (skeletor-project-directory (car (bound-and-true-p projectile-project-search-path)))
       (skeletor-completing-read-function 'completing-read
        "Make skeletor defer to the current completion framework.")
       (skeletor-show-project-command
        (defun skeletor-show-project-command+ (dir)
          "Skeletor show project directory in different window."
          (display-buffer (dired-noselect dir)
                          '((display-buffer-reuse-window
                             display-buffer--maybe-pop-up-frame-or-window
                             display-buffer-use-some-window
                             display-buffer-pop-up-frame)))))

       :config
       ;; Remove all the builtin skeletor project types because they're like a
       ;; decade old and some just don't work for some reason :/.
       (setq skeletor--project-types nil)

       ;; You can include dotfiles with __DOT__ so let me use actual dotfiles
       ;; for configuring stuff.
       (require 'cl-lib)
       (advice-add 'skeletor--dir->SkeletorTemplate :filter-return
                   (defun skeletor-dir-template-exclude-dotfiles+ (template)
                     ;; (setf (SkeletorTemplate-files template)
                     ;;       (seq-filter (lambda (it) (not
                     ;;                            (string-prefix-p "." (file-name-base it))))
                     ;;                   (SkeletorTemplate-files template)))

                     ;; KLUDGE: Hard-coded expansion of setf because its failing for some reason.
                     (aset template
                           (cl-position 'files (mapcar #'car (cl-struct-slot-info 'SkeletorTemplate)))
                           (seq-filter
                            (lambda (it)
                              (not (string-prefix-p "." (file-name-base it))))
                            (SkeletorTemplate-files template)))
                     template))

       ;; I keep definitions for skeletor templates and constructors within my skeleton
       ;; user directory.
       (dolist (it (append
                    (file-expand-wildcards
                     (join-path skeletor-user-directory "*.el"))
                    (file-expand-wildcards
                     (join-path skeletor-user-directory "*" ".skeletor.el"))))
         (load it nil t))

       (advice-add 'skeletor--initialize-git-repo :override
                   (defun skeletor--initialize-git-repo+  (dir)
                     "Override of `skeletor--initialize-git-repo' which produces only one initial commit."
                     (let ((default-directory dir))
                       (skeletor--log-info "Initialising git...")
                       (unless (f-exists? (f-join dir ".git"))
                         (skeletor-shell-command "git init"))
                       (skeletor-shell-command "git add -A && git commit --allow-empty -m 'Initial commit'")
                       (message "Initialising git...done"))))

       (defun skeletor-expand-project+ (skeleton dir)
         "Expand a skeletor project using the dirname as project-name when applicable.
     The default `skeletor-create-project-at' ask you to specify the project type directory
     and name on seperate prompts which I find unintuitive. This variant reads a directory
     and then uses the basename of that directory as the project-name unless its not empty
     in which case it reads a seperate dirname."
         (interactive (list (skeletor--read-project-type)
                            (expand-file-name
                             (if (directory-empty-p default-directory)
                                 ;; When the current directory is empty you probably want
                                 ;; to create a new project in it so show other projects
                                 ;; around it.
                                 (let ((cwd (string-trim-right default-directory "/")))
                                   (read-directory-name "Project directory: "
                                                        (file-name-directory cwd)
                                                        (file-name-nondirectory cwd)))
                               (read-directory-name "Project directory: ")))))
         (setq dir (string-trim-right dir
                                      (rx (one-or-more (eval (f-path-separator))))))

         (let* ((is-empty (and (not current-prefix-arg)
                               (or (not (file-directory-p dir))
                                   (directory-empty-p dir))))
                (basename (file-name-nondirectory dir))
                (dir (if is-empty (file-name-directory dir) dir)))
           ;; A project directory needs to empty before generation... so if
           ;; the input directory isn't then prompt for a project-name within
           ;; it.
           (cl-letf* (((symbol-function 'skeletor--actual-read-project-name)
                       (symbol-function 'skeletor--read-project-name))
                      ((symbol-function 'skeletor--read-project-name)
                       (lambda () (if is-empty basename
                               (skeletor--actual-read-project-name)))))
             (skeletor-create-project-at dir skeleton))))

       :config
       (defmacro skeletor-conf+ (key &optional default)
         "Retrieve a value from the skeletor substitions."
         `(if-let ((val (assoc ,key subs)))
              (cdr val)
            ,default))

       ;; Easier to use in skeleter projects.
       (defalias 'skeletor-conf #'skeletor-conf+))
   #+END_SRC

** tramp-term
   create remote terminal sessions effortlessly... this should be built into term TBH.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! tramp-term)
     (use-package tramp-term
       :straight t
       :after  term
       :init
       ;; (add-hook 'term :before-until #'term--use-tramp-term-when-in-tramp-directory)

       :config
       ;;   (defun term--use-tramp-term-when-in-tramp-directory (&rest args)
       ;;     "when current buffers is in a tramp path open a tramp term session
       ;; if prefix arg specified, disregard this and open a local term sessions"
       ;;     (when (and (not current-prefix-arg)
       ;;                default-directory
       ;;                (tramp-tramp-file-p default-directory))
       ;;       (tramp-term )
       ;;         )
       ;;     )
       )
   #+END_SRC

** tree-sitter
   :PROPERTIES:
   :header-args+: :tangle (package-yes! tree-sitter)
   :END:
   TODO: Finish [[https://ubolonton.github.io/emacs-tree-sitter/syntax-highlighting/customization/][guide]].

   #+BEGIN_SRC emacs-lisp
     (use-package tree-sitter
       :straight (tree-sitter :branch "master")
       :delight (tree-sitter-mode " T")
       :hook ((emacs-startup . global-tree-sitter-mode)
              (tree-sitter-mode . tree-sitter-hl-mode))
       :custom
       (js2-highlight-level 0))
   #+END_SRC

   Tree sitter itself provides the backbone for tree-sitter parsing but it doesn't
   setup or associate languages to parsers because eventually it's expected for
   language modes to set this up themselves.
   For now the *tree-sitter-langs* package provides language associations.

   #+BEGIN_SRC emacs-lisp
     (use-package tree-sitter-langs
       :straight (tree-sitter-langs :branch "master")
       :after tree-sitter
       :demand t
       :config
       (push '(typescript-react-mode . typescript)
             tree-sitter-major-mode-language-alist)
       (push '(web-mode . html)
             tree-sitter-major-mode-language-alist))
   #+END_SRC

*** evil-textobj-tree-sitter
    #+begin_src emacs-lisp
      (use-package evil-textobj-tree-sitter
        :straight (evil-textobj-tree-sitter
                   :type git
                   :host github
                   :repo "meain/evil-textobj-tree-sitter"
                   :files (:defaults "queries"))
        :after (evil tree-sitter)
        :demand t
        :config
        (general-define-key
         :predicate '(bound-and-true-p tree-sitter-mode)
         :keymaps 'evil-outer-text-objects-map
         "f" (evil-textobj-tree-sitter-get-textobj "function.outer")
         "c" (evil-textobj-tree-sitter-get-textobj "class.outer"))

        (general-define-key
         :predicate '(bound-and-true-p tree-sitter-mode)
         :keymaps 'evil-inner-text-objects-map
         "f" (evil-textobj-tree-sitter-get-textobj "function.inner")
         "c" (evil-textobj-tree-sitter-get-textobj "class.inner")))
    #+end_src

** rainbow-mode
   highlights hex color strings in their appropriate color.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! rainbow-mode)
     (use-package rainbow-mode
       :straight t)
    #+END_SRC

** vi-tilde
   display ~ on trailing lines in the fringe. doesn't work with Emacs's new builtin line
   numbers mode.

   #+BEGIN_SRC emacs-lisp :tangle (package-yes! vi-tilde-fringe)
     (use-package vi-tilde-fringe
       :straight t
       :diminish
       :commands (vi-tilde-fringe-mode global-vi-tilde-fringe-mode)
       :config
       (global-vi-tilde-fringe-mode))
   #+END_SRC

** vdiff
   :PROPERTIES:
   :header-args+: :tangle (package-yes! vdiff)
   :END:

   Inspired by vimdiff, vdiff is a better, less intrusive interactive diff tool for
   emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package vdiff
       :straight t
       :preface
       (defvar vdiff-use-relative-line-numbers+ nil
         "When true, line numbers in vdiff sessions are relative")

       :config
       (defun vdiff-setup+ (&rest _)
         (let ((inhibit-message t))
           (toggle-truncate-lines +1)
           (evil-normalize-keymaps))

         (when vdiff-use-relative-line-numbers+
           (setq-local display-line-numbers
                       (if vdiff-mode t 'visual))))

       (defun vdiff-prepare+ ()
         (cond
          ((derived-mode-p 'org-mode)
           (when vdiff-mode
             (outline-show-all)))))

       (dolist (handler `(,#'vdiff-setup+
                          ,#'vdiff-prepare+))
         (add-hook 'vdiff-mode-hook      handler)
         (add-hook 'vdiff-3way-mode-hook handler))

       :leader
       (:prefix leader-diff-leader-prefix
        "" '(:ignore t :wk "diff")
        "RET" 'vdiff-merge-conflict
        "TAB" 'vdiff-switch-buffer
        "d" 'vdiff-current-file
        "f" 'vdiff-files
        "F" 'vdiff-files3
        "b" 'vdiff-buffers
        "B" 'vdiff-buffers3)

       :lazy-leader
       (:mode '(vdiff-mode
                vdiff-3way-mode)
        :minor t
        :prefix leader-major-mode-prefix
        ;; "m" 'vdiff-restore-windows
        "w" 'vdiff-save-buffers
        "r" 'vdiff-receive-changes
        "s" 'vdiff-send-changes
        "R" 'vdiff-receive-changes-and-step
        "S" 'vdiff-send-changes-and-step

        "f"  '(:ignore t :wk "refine")
        "ff" 'vdiff-refine-this-hunk                                                 ; Highlight changed words in hunk
        "fx" 'vdiff-remove-refinements-in-hunk                                       ; Remove refinement highlighting
        "fa" 'vdiff-refine-all-hunks                                                 ; Highlight all changed words
        "fs" 'vdiff-refine-this-hunk-symbol                                          ; Refine based on symbols
        "fw" 'vdiff-refine-this-hunk-word                                            ; Refine based on words
        "fS" 'vdiff-refine-all-hunks-symbol                                          ; Refine all based on symbols
        "fW" 'vdiff-refine-all-hunks-word                                            ; Refine all based on words

        "t"  '(:ignore t :wk "toggle")
        "ti" 'vdiff-toggle-case
        "tw" 'vdiff-toggle-whitespace)

       :general
       (:keymaps '(vdiff-mode-map
                   vdiff-3way-mode-map)
        [remap quit-window] 'vdiff-quit)
       (:states '(normal motion)
        :keymaps '(vdiff-mode-map
                   vdiff-3way-mode-map)
        "q" 'vdiff-quit
        "TAB" 'vdiff-switch-buffer
        "gj" 'vdiff-next-hunk
        "gk" 'vdiff-previous-hunk
        "C-j" "gj"
        "C-k" "gk"

        "zj" 'vdiff-next-fold
        "zk" 'vdiff-previous-fold
        "M-j" 'vdiff-next-fold
        "M-k" 'vdiff-previous-fold

        "zo" 'vdiff-open-fold
        "zO" 'vdiff-open-fold
        "zr" 'vdiff-open-all-folds
        "zf" 'vdiff-close-fold
        "zc" 'vdiff-close-fold
        "zF" 'vdiff-close-all-folds
        "zC" 'vdiff-close-all-folds
        "zC" 'vdiff-close-other-folds
        [remap revert-buffer] 'vdiff-refresh))
   #+END_SRC

*** vdiff-hydra
    #+begin_src emacs-lisp
      (use-package vdiff
        :lazy-leader
        (:mode '(vdiff-mode
                 vdiff-3way-mode)
         :minor t
         :prefix leader-major-mode-prefix
         "." 'vdiff-hydra/body)

        :hydra
        (vdiff-toggle-hydra (nil nil :hint nil)
          "
      Toggles
       _c_ ignore case: %s(vdiff--current-case)
       _w_ ignore whitespace: %s(vdiff--current-whitespace)
       _q_ back to main hydra"
          ("c" vdiff-toggle-case)
          ("w" vdiff-toggle-whitespace)
          ("q" vdiff-hydra/body :exit t))

        (vdiff-hydra (nil nil :hint nil :foreign-keys run)
          (concat (propertize
                   "\
       Navigation^^^^          Refine^^   Transmit^^^^             Folds^^^^            Other"
                   'face 'header-line)
                  "
       _j_/_J_ next hunk/fold  _f_ this   _s_/_S_ send (+step)     _o_/_O_ open (all)   _i_ ^ ^ toggles
       _k_/_K_ prev hunk/fold  _F_ all    _r_/_R_ receive (+step)  _c_/_C_ close (all)  _u_ ^ ^ update diff
       _g_^ ^  switch buffers  _x_ clear  ^ ^ ^ ^                  _t_ ^ ^ close other  _w_ ^ ^ save buffers
       ^ ^^ ^                  ^ ^        ^ ^ ^ ^                  ^ ^ ^ ^              _q_/_Q_ quit hydra/vdiff
       ignore case: %s(vdiff--current-case) | ignore whitespace: %s(vdiff--current-whitespace)")
          ("j" vdiff-next-hunk)
          ("k" vdiff-previous-hunk)
          ("J" vdiff-next-fold)
          ("K" vdiff-previous-fold)
          ("g" vdiff-switch-buffer)
          ("s" vdiff-send-changes)
          ("S" vdiff-send-changes-and-step)
          ("r" vdiff-receive-changes)
          ("R" vdiff-receive-changes-and-step)
          ("o" vdiff-open-fold)
          ("O" vdiff-open-all-folds)
          ("c" vdiff-close-fold)
          ("C" vdiff-close-all-folds)
          ("t" vdiff-close-other-folds)
          ("u" vdiff-refresh)
          ("w" vdiff-save-buffers)
          ("f" vdiff-refine-this-hunk)
          ("F" vdiff-refine-all-hunks)
          ("x" vdiff-remove-refinements-in-hunk)
          ("i" vdiff-toggle-hydra/body :exit t)
          ("q" nil :exit t)
          ("Q" vdiff-quit :exit t)))
    #+end_src

*** vdiff-magit
    #+begin_src emacs-lisp
      (use-package vdiff-magit
        :straight t
        :after magit
        :custom
        (vdiff-magit-use-ediff-for-merges nil)

        :config
        (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
        (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
        (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
        (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit)

        :general
        (:keymaps 'magit-mode-map
         "e" 'vdiff-magit-dwim
         "E" 'vdiff-magit))
    #+end_src

** vlc-rc
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! vlc-rc)
     (use-package vlc-rc
       :straight (vlc-rc :host github :repo "mohkale/vlc-rc")
       ;; can't defer for now, hopefully when use-package
       ;; supports bind-keymap with specific map, change.
       :commands (vlc/dired-add-file
                  vlc/dired-enqueue-file)
       :init
       (setq vlc-rc-map (make-sparse-keymap))

       :hydra
       (vlc-rc-hydra (:hint nil)
        "
     ^ ^             | media          ^^| general commands  ^^^^| toggle                          ^^^^^^|       *@*
     ^-^-------------+-^-^--------------+-------------------^^^^+---------------------------------^^^^^^|       :::
     _d_elete-socket | _f_ind-file      | _F_ull-screen       ^^| _tl_/_tr_/_ts_ loop/repeat/shuffle    |      .   .
     _k_ill-process  | _e_nqueue-file   | _v_olume-ctrl       ^^| _oa_/_od_ ^  ^ set audio track/device |     =@@@@@=
     _q_uit/exit     | _c_lear-playlist | stream-_p_osition   ^^| _or_ ^  ^ ^  ^ set aspect ratio       |     -*###*-
     ^ ^             | _n_ext-item      | _=_   ^ ^ reset speed | _os_ ^  ^ ^  ^ set subtitle track     |  :*:       :*:
     ^ ^             | _p_rev-item      | _S-+_/_+_ raise speed | _oz_ ^  ^ ^  ^ set video zoom         |  @@@/**+**\\@@@
     ^ ^             | _._ goto-item    | _S--_/_-_ lower speed | ^  ^ ^  ^ ^  ^                        | +@@@@@@@@@@@@@+
     "
        ;; NOTE: comments with @ means add current value indicator

        ("SPC" vlc/toggle-play)
        ("f" vlc/add-file)

        ;; speed
        ("+" vlc/increase-speed)
        ("=" vlc/reset-speed)
        ("-" vlc/decrease-speed)
        ("S-+" vlc/fast-forward)
        ("S--" vlc/rewind)

        ;; exit
        ("d" vlc/kill-connection)
        ("k" vlc/kill-process)

        ;; playlist
        ("c" vlc/clear)
        ("f" vlc/add-file)
        ("e" vlc/enqueue-file)
        ("n" vlc/next)
        ("p" vlc/previous)

        ;; commands
        ("F" vlc/toggle-fullscreen)
        ("v" vlc/volume-ctrl) ;; @
        ("s" vlc/screenshot)
        ("|" vlc/screenshot)
        ("p" vlc/set-stream-position)
        ("'" vlc/set-stream-position)
        ("." vlc/goto-playlist-item)

        ;; toggle/options
        ("tl" vlc/toggle-loop)    ;; @
        ("tr" vlc/toggle-repeat)  ;; @
        ("ts" vlc/toggle-shuffle) ;; @
        ("oa" vlc/set-audio-track)
        ("oc" vlc/set-video-crop)
        ("od" vlc/set-audio-device)
        ("or" vlc/set-aspect-ratio)
        ("os" vlc/set-subtitle-track)
        ("oz" vlc/set-zoom) ;; @

        ("q" nil :exit t))

       :leader
       (:prefix "v"
        "" '(:ignore t :wk "VLC")
        "s" '(:ignore t :wk "set")
        "t" '(:ignore t :wk "toggle")

        "" vlc-rc-map)

       :general
       (:keymaps 'dired-mode-map
        :states '(normal motion)
        "v"  nil
        "vv" 'vlc/dired-add-file
        "vq" 'vlc/dired-enqueue-file)
       (:keymaps 'vlc-rc-map
        "C-." 'vlc-rc-hydra/body))
   #+END_SRC

** vterm
   :PROPERTIES:
   :header-args+: :tangle (package-yes! vterm)
   :END:

   TODO refactor

   #+BEGIN_SRC emacs-lisp
     (use-package vterm
       :straight t
       :config
       (push 'vterm-mode +whitespace-exempt-modes)
       (evil-set-initial-state 'vterm-mode 'emacs)

       (setq vterm-kill-buffer-on-exit t
             vterm-always-compile-module t
             vterm-buffer-name-string "*vterm: %s*"
             multi-vterm-buffer-name "*vterminal*"
             vterm-keymap-exceptions '("C-SPC" "C-g" "C-c" "M-x"))

       (defvar-local vterm-send-escape-to-vterm-p nil
         "Track whether or not we send ESC to `vterm' or `emacs'.")

       (defun vterm-toggle-send-escape (&optional value)
         "toggle whether escape is sent to vterm or to emacs.
     only works with GUI emacs... but good enough, I guess."
         (interactive)
         (let ((sending-to-emacs (or (eq value 'emacs)
                                     vterm-send-escape-to-vterm-p)))
           (general-define-key
            :keymaps 'vterm-mode-map
            "<escape>" (if sending-to-emacs
                           nil
                         'vterm--self-insert))
           (setq vterm-send-escape-to-vterm-p (not sending-to-emacs))

           (message (format "Sending ESC to %s."
                            (if vterm-send-escape-to-vterm-p "vterm" "emacs")))))

       ;; by default, escape is sent to vterm, not emacs.
       (let ((inhibit-message t))
         (vterm-toggle-send-escape 'vterm))

       (defun vterm-send-escape ()
         (interactive)
         (when vterm--term
           (process-send-string vterm--process "\C-[")))

       (defun vterm-send-ctrl-space ()
         (interactive)
         (when vterm--term
           (process-send-string vterm--process "\C-@")))

       (defun vterm-mouse-set-point (&rest args)
         "tmux like mouse handler. on click, switch to copy-mode."
         (interactive)
         (vterm-copy-mode +1)
         (funcall-interactively 'mouse-set-point args))

       ;; source [[https://github.com/akermu/emacs-libvterm#counsel-yank-pop-doesnt-work][emacs-libvterm]].
       (defun vterm-counsel-yank-pop-action (orig-fun &rest args)
         (if (equal major-mode 'vterm-mode)
             (let ((inhibit-read-only t)
                   (yank-undo-function (lambda (_start _end) (vterm-undo))))
               (cl-letf (((symbol-function 'insert-for-yank)
                          (lambda (str) (vterm-send-string str t))))
                 (apply orig-fun args)))
           (apply orig-fun args)))

       (advice-add 'counsel-yank-pop-action :around
                   #'vterm-counsel-yank-pop-action)

       (advice-add 'switch-to-last-buffer+ :filter-args
                   (defun switch-to-last-buffer--bury-vterm-buffers (&rest args)
                     "prevent `switch-to-last-buffer' oferring vterm.
     unless there's LITERALLY no other buffer you could possibly mean to go to."
                     (let ((buffer (car args))
                           (i 0)
                           (length (length (buffer-list))))
                       (while (and (< i length)
                                   (not buffer))
                         (setq i (1+ i))

                         (with-current-buffer (other-buffer)
                           (if (derived-mode-p 'vterm-mode)
                               (bury-buffer)
                             (setq buffer (current-buffer)))))

                       (list (or buffer
                                 (other-buffer))))))

       (advice-add 'switch-to-last-buffer+ :before-until
                   (defun switch-to-last-buffer--pop-vterm-window-config ()
                     "when switching to last buffer from a maximized vterm buffer
     instead switch to the window config from before the "
                     (when (and (derived-mode-p 'vterm-mode)
                                vterm-toggle-fullscreen-p
                                vterm-toggle--window-configration)
                       (set-window-configuration vterm-toggle--window-configration)
                       (setq vterm-toggle--window-configration nil)
                       t)))

       (add-hook 'vterm-copy-mode-hook
                 (defun vterm-copy-mode-switch-evil-state (&rest _)
                   (if vterm-copy-mode
                       (evil-change-state 'motion)
                     (evil-change-state 'emacs))))

       (add-hook 'vterm-mode-hook
                 (defun vterm-keep-cursor-on-evil-state-change ()
                   (setq-local evil-move-cursor-back nil)))

       (advice-add 'vterm-send-return :override
                   (defun vterm-send-return-as-ctrl-m ()
                     (when vterm--term
                       (process-send-string vterm--process "\C-m"))))

       :general
       (:keymaps 'vterm-mode-map
        :states 'emacs
        "C-w" 'vterm-send-C-w)
       (:keymaps 'vterm-mode-map
        "<mouse-1>" 'vterm-mouse-set-point
        "<C-backspace>" 'vterm-send-C-w
        "C-h" 'vterm-send-C-h
        "C-v" 'vterm-send-C-v
        "M-v" 'vterm-copy-mode
        "C-u" 'vterm-send-C-u
        "C-c C-g" 'vterm-send-C-g
        "C-c C-c" 'vterm-send-C-c
        "C-c SPC"   'vterm-send-ctrl-space
        "C-c C-SPC" 'vterm-send-ctrl-space
        "C-ESC" 'vterm-send-escape
        "M-ESC" 'vterm-send-escape

        ;; this is Magic :space_invader:.
        "C-S-v" 'vterm-yank
        "C-S-n" 'vterm-toggle-forward
        "C-S-p" 'vterm-toggle-backward)
       (:keymaps 'vterm-copy-mode-map
        :states 'motion
        [remap evil-end-of-line] 'vterm-end-of-line
        "gj" 'vterm-next-prompt
        "gk" 'vterm-previous-prompt
        "RET" 'vterm-copy-mode)
       (:keymaps 'vterm-mode-map :states 'emacs "C-q" leader-nnorm-key)
       (:keymaps 'vterm-mode-map :states 'motion "C-q" leader-key)

       :leader
       (:mode 'vterm-mode
        "v" '(vterm-copy-mode :wk "copy-mode"))

       :config
       ;; TMUX compatibility bindings
       (let ((bindings `("v" '(vterm-copy-mode :wk "copy-mode")
                         "p" 'vterm-yank
                         "C-u" ,(lambda! ()
                                  (vterm-copy-mode +1)
                                  (call-interactively 'scroll-up-command)))))
         (apply #'general-define-key
                :states 'emacs
                :prefix leader-nnorm-key
                :keymaps 'vterm-mode-map
                bindings)
         (apply #'general-define-key
                :prefix leader-nnorm-key
                :states 'motion
                :keymaps 'vterm-copy-mode-map
                bindings)))
   #+END_SRC

*** vterm-toggle
    #+begin_src emacs-lisp
      (use-package vterm-toggle
        :straight t
        :commands (vterm-toggle
                   vterm-toggle-fullscreen)
        :init
        (defvar vterm-toggle-fullscreen-p nil)

        (defun vterm-toggle-fullscreen (&optional arg)
          (interactive "P")

          (setq vterm-toggle-fullscreen-p
                (if (not arg)
                    (not vterm-toggle-fullscreen-p)
                  (or (listp arg)
                      (not (zerop arg)))))

          (setq vterm-toggle-reset-window-configration-after-exit
                vterm-toggle-fullscreen-p)

          (message "vterm fullscreen: %s"
                   (if vterm-toggle-fullscreen-p
                       (propertize "enabled" 'face 'compilation-info)
                     (propertize "disabled" 'face 'compilation-error))))

        :config
        (setq vterm-toggle-cd-auto-create-buffer t)

        (let ((inhibit-message t))
          (vterm-toggle-fullscreen 0))

        ;; prevent vterm being opened in a new window.
        (advice-add 'vterm-toggle--new :override #'vterm)

        :commands (vterm-toggle-new-buffer+)
        :config
        (defun vterm-toggle-new-buffer+ ()
          "Create a new vterm buffer using vterm-toggle's interface."
          (interactive)
          (let ((current-config (current-window-configuration)))
            (if vterm-toggle-fullscreen-p
                (progn
                  (delete-other-windows)
                  (switch-to-buffer (vterm '(4))))
              (select-window (display-buffer (vterm '(4)))))

            (setq vterm-toggle--window-configration current-config)))

        :config
        (push `(,(regexp-quote vterm-buffer-name)
                (display-buffer-same-window
                 display-buffer-reuse-window
                 display-buffer-no-window))
              display-buffer-alist)

        :leader
        ("av" '(vterm-toggle :wk "vterm")
         "at" '(vterm-toggle-new-buffer+ :wk "vterm-new")
         ;; "tv" '(vterm-toggle-fullscreen :wk "toggle-vterm-fullscreen")
         ))
    #+end_src

*** vterm-commands
    define elisp commands accessible through the ~vterm_cmd~ shell function.

    #+NAME: vterm-cmds
    | name                   | cmd                              |
    |------------------------+----------------------------------|
    | find-file              | vterm-cmd-find-file              |
    | find-file-other-window | vterm-cmd-find-file-other-window |
    | list-buffers           | vterm-cmd-list-buffers           |
    | message                | message                          |
    | vterm-clear-scrollback | vterm-clear-scrollback           |

    #+BEGIN_SRC emacs-lisp :var cmds=vterm-cmds :results silent
      (use-package vterm
        :init
        (setq vterm-eval-cmds
              (cl-loop for (name cmd) in cmds
                       do (setq cmd-sym (intern cmd))
                       when (string-prefix-p "vterm-cmd" cmd)
                         do (autoload cmd-sym "+vterm-cmds.el")
                       end

                       collect (list name cmd-sym))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle (lisp! "+vterm-cmds.el")
      (defun vterm-cmd-find-file (&rest paths)
        (cl-loop for path in (or paths (list default-directory))
                 do (find-file path)))

      (defun vterm-cmd-find-file-other-window (&rest paths)
        (cl-loop for path in (or paths (list default-directory))
                 do (find-file-other-window path)))

      (defun vterm-cmd-list-buffers ()
        (ibuffer t))

      (provide '+vterm-commands)
    #+END_SRC

** ycmd
   :PROPERTIES:
   :header-args+: :tangle (package-yes! ycmd)
   :END:

    #+BEGIN_SRC emacs-lisp
      (use-package ycmd
        :straight t
        :delight (ycmd-mode " YCMD")
        :hook (ycmd-mode . ycmd-eldoc-setup)
        :init
        ;; NOTE to enable ycmd completion, hook ycmd-mode into any desired
        ;;      buffers and include company-ycmd in the company backends for
        ;;      the mode.

        (setq ycmd-global-config (expand-file-name "~/.ycmd-config")
              ycmd-startup-timeout 10
              ycmd-server-command `("python3" "-u" ,(expand-file-name "~/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd"))
              ycmd-map+ (make-sparse-keymap))

        ;; (ycmd-toggle-force-semantic-completion)

        :lazy-leader
        (:mode 'ycmd-mode
         :minor t
         :prefix leader-server-leader-prefix
         ""  '(:ignore t :wk "ycmd")
         "y" 'ycmd-mode
         "Y" 'global-ycmd-mode
         "n" 'ycmd-open
         "k" 'ycmd-close
         "v" 'ycmd-version
         "b" 'ycmd-parse-buffer
         "c" 'ycmd-load-conf-file
         "C" 'ycmd-clear-compilation-flag-cache
         "s" 'ycmd-show-debug-info
         "d" 'ycmd-show-documentation
         "l" 'ycmd-toggle-log-enabled
         "r" 'ycmd-restart-semantic-server
         "t" 'ycmd-get-type
         "." 'ycmd-completer ;; completing-read all ycmd requests
         "SPC" 'ycmd-toggle-force-semantic-completion
         "C-r" 'ycmd-refactor-rename
         "C-c" 'ycmd-display-completions

         "g"  '(:ignore t :wk "jump")
         "gg" 'ycmd-goto
         "gG" 'ycmd-goto-imprecise
         "gt" 'ycmd-goto-type
         "gd" 'ycmd-goto-definition
         "gD" 'ycmd-goto-declaration
         "gr" 'ycmd-goto-references
         "gi" 'ycmd-goto-include
         "gI" 'ycmd-goto-implementation))
    #+END_SRC

*** company-ycmd                                                        :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! company ycmd)
      (use-package company-ycmd
        :straight t
        :demand t
        :after (company ycmd)
        :init
        (setq-default
         company-backends
         (append 'company-ycmd (default-value 'company-backends))))
    #+END_SRC

*** flycheck-ycmd
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-ycmd
        :straight t
        :after (flycheck ycmd)
        :hook (ycmd-mode . flycheck-ycmd-setup))
    #+END_SRC

** ztree
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! ztree)
     (use-package ztree
       :straight t
       :config
       (evil-set-initial-state 'ztree-mode 'motion)

       :lazy-leader
       (:mode 'ztree-mode
        "TAB" 'ztree-jump-side
        "n"   'ztree-dir-widen-to-parent
        "w"   'ztree-dir-narrow-to-dir
        "h"   'ztree-dir-toggle-show-filtered-files)

       :general
       (:states  'motion
        :keymaps 'ztree-mode-map
        "gr"    'ztree-refresh-buffer
        "j"     'ztree-next-line
        "k"     'ztree-previous-line
        "gh"    'ztree-move-up-in-tree
        "gl"    'ztree-next-line
        "RET"   'ztree-dir-open-dired-at-point
        "TAB"   'ztree-perform-action
        "M-TAB" 'ztree-perform-soft-action
        "DEL"   'ztree-move-up-in-tree))
   #+END_SRC

* Languages
  [[*Extensions][Extensions]] providing tailored support for specific programming languages or tools.

** assembly
   :PROPERTIES:
   :header-args+: :tangle (package-yes! assembly)
   :END:
   #+begin_src emacs-lisp
     (use-package asm-mode
       :hook (asm-mode . indent-tabs-mode)
       :mode (rx "." (or "asl" "S" "s") eol)
       :init
       (push '(asm-mode . 8) +indent-config)

       :preface
       (defun asm-setup-imenu+ ()
         (setq imenu-generic-expression
               `(("label"
                  ,(rx bol
                       (group (one-or-more alnum))
                       (zero-or-more space) ":")
                  1))))
       :hook (asm-mode . asm-setup-imenu+)

       :config
       (advice-add 'asm-colon :around
                   (defun asm-colon-indent-space+ (func &rest args)
                     (let ((indent-tabs-mode nil))
                       (apply func args))))

       :general
       (:keymaps 'asm-mode-map
        "<override-state>" 'all
        "C-c ;" nil))
   #+end_src

** awk
   #+BEGIN_SRC emacs-lisp
     (use-package awk
       :interpreter "gawk"
       :hook (awk-mode . +flylint)

       :preface
       (defun awk-mode-reset-electric-pair+ ()
         (setq-local electric-pair-inhibit-predicate
                     #'electric-pair-default-inhibit))
       :hook (awk-mode . awk-mode-reset-electric-pair+))
   #+END_SRC

** crystal
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! crystal)
     (use-package crystal-mode
       :straight t
       :init
       (push '(crystal-mode . 2) +indent-config))
   #+END_SRC

** clojure
   :PROPERTIES:
   :header-args+: :tangle (package-yes! clojure)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode
       :straight t
       :mode ((rx ".edn") . clojure-mode))
   #+END_SRC

** docker
   :PROPERTIES:
   :header-args+: :tangle (package-yes! docker)
   :END:

   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :straight t
       :custom
       (dockerfile-use-buildkit
        (string-equal (or (getenv "DOCKER_BUILDKIT") "1") "0")
        "Whether to use buildkit. By default we do unless the
     DOCKER_BUILDKIT environment variable explicitly disables
     it.")

       :preface
       (push '(dockerfile-mode . 2) +indent-config))
   #+end_src

*** docker-transient
    #+begin_src emacs-lisp :tangle no
      (use-package docker
        :straight t
        :leader
        (:prefix "pqd"
         "" '(:ignore t :wk "docker")
         "d" 'docker
         "c" 'docker-compose))
    #+end_src

*** docker-tramp
    #+begin_src emacs-lisp
      (use-package docker-tramp
        :straight t)
    #+end_src

** restclient
   :PROPERTIES:
   :header-args+: :tangle (package-yes! restclient)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :straight t
       :leader ("ar" 'restclient)
       :init
       (push (rx "*HTTP Response*") +whitespace-exempt-buffers)
       (evil-set-initial-state 'restclient-mode 'normal)

       (push `(,(rx "*restclient*")
               (display-buffer-reuse-window
                display-buffer-same-window))
             display-buffer-alist)

       (defun restclient ()
         "Create a new buffer in restclient mode"
         (interactive)
         (let ((buffer (create-new-empty-buffer "*restclient*")))
           (with-current-buffer buffer
             (restclient-mode))
           (display-buffer buffer)))

       :general
       (:states 'motion
        :keymaps 'restclient-mode-map
        "gj" 'restclient-jump-next
        "gk" 'restclient-jump-prev)
       (:states  'normal
        :keymaps 'restclient-outline-mode-map
        "TAB"   'restclient-toggle-body-visibility-or-indent
        "g TAB" 'restclient-toggle-body-visibility-or-indent)

       :leader
       (:mode 'restclient-mode
        leader-major-mode-key '(restclient-http-send-current-stay-in-window :wk "execute-current-same-window")
        "RET" '(restclient-http-send-current :wk "execute-current")
        "r" '(restclient-http-send-current-raw :wk "execute-current-raw")
        "y" '(restclient-copy-curl-command :wk "yank-curl-command")
        "m" 'restclient-mark-current
        "n" 'restclient-narrow-to-current
        "w" 'widen))
   #+END_SRC

*** company-restclient                                                  :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! restclient company)
      (use-package company-restclient
        :straight t
        :after restclient
        :init
        (set-company-backend! 'restclient-mode
          'company-restclient))
    #+END_SRC

*** org-babel-restclient
    #+BEGIN_SRC emacs-lisp
      (use-package ob-restclient
        :straight t
        :after (org restclient)
        :init
        (org-babel-lazy-load-languages+ 'restclient))
    #+END_SRC

** elisp
   :PROPERTIES:
   :header-args+: :tangle (package-yes! elisp)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package elisp-mode
       :commands (eval-replace-last-sexp)
       :init
       (evil-set-initial-state 'inferior-emacs-lisp-mode 'emacs) ;; ielm

       ;; Allows for smarter indentation based on the lisp syntax.
       (push '(emacs-lisp-mode . nil) +indent-config)
       (push '(lisp-interaction-mode . nil) +indent-config)

       :config
       (modify-syntax!
         '((?_ . "w")
           (?- . "w")
           (?! . "w")
           (?: . "w")
           (?& . "w"))
         emacs-lisp-mode-syntax-table)

       ;; Show lambda as an actual lambda symbol... pretty cool, if I do say
       ;; so myself.
       (configure-presym! '(lisp-interaction-mode emacs-lisp-mode org-mode)
         "lambda"  ?Œª
         "lambda!" "Œª!")

       (defun eval-replace-last-sexp (&optional prefix)
         "evaluate then replace the preceding sexp"
         (interactive "p")
         (let* ((sexp (elisp--preceding-sexp))
                (value (eval sexp)))
           (kill-sexp -1)
           (insert (format (if prefix "%s" "%S") value))))

       :leader
       ("fk" 'emacs-lisp-byte-compile)
       (:prefix "k"
        "e" 'eval-last-sexp
        "k" 'eval-last-sexp
        "(" 'eval-print-last-sexp
        ")" 'eval-replace-last-sexp)

       :lazy-leader
       (:mode '(emacs-lisp-mode lisp-interaction-mode)
        "c" 'emacs-lisp-byte-compile
        "i" 'indent-sexp
        "p" 'pp-buffer

        ;; eval
        "e"  '(:ignore t :wk "eval/REPL")
        "es" 'ielm
        "ee" 'eval-last-sexp
        "eb" 'eval-buffer
        "eE" 'eval-replace-last-sexp
        "ef" 'eval-defun
        "er" 'eval-region

        ;; tests
        "t" 'ert
        "T" 'ert-run-tests-interactively)

       :general
       (:keymaps '(emacs-lisp-mode-map
                   lisp-interaction-mode-map)
        "C-j" nil
        "C-(" 'eval-print-last-sexp
        "C-)" 'eval-replace-last-sexp))
   #+END_SRC

*** paredit
    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :straight t
        :diminish paredit-mode
        :hook (emacs-lisp-mode . paredit-mode)
        :general
        (:keymaps 'paredit-mode-map
         "C-<up>" nil "C-<down>" nil "C-<left>" nil
         "C-<right>" nil "C-(" nil "C-)" nil)

        ;; M-( wraps the next argument in parentheses
        ;; M-) closes the current argument, trims any
        ;;     trailing whitespace and inserts a newline
        ;; M-" same as " but then trims whitespace and inserts a newline
        (:keymaps 'paredit-mode-map
         :states 'insert
         "DEL"           'paredit-backward-delete
         "M-DEL"         'paredit-forward-delete
         "C-<backspace>" 'paredit-backward-kill-word
         ;; "C-M-<delete>" 'paredit-forward-kill-word

         ;; damn you windows
         ;; just use paredit forward, then kill backward
         "C-M-k" 'paredit-kill ;; forward body
         "RET" 'paredit-newline)
        (:keymaps 'paredit-mode-map
         :states 'normal
         "gSh" '(paredit-splice-sexp-killing-backward :wk "splice-sexp-forward")
         "gSl" '(paredit-splice-sexp-killing-forward :wk "splice-sexp-backward"))
        (:keymaps 'paredit-mode-map
         :states '(normal insert)
         ;; movement
         ;; "C-h" 'backward-char
         ;; "C-l" 'forward-char
         "C-j" 'paredit-newline
         "C-M-h" 'paredit-backward
         "C-M-l" 'paredit-forward
         "C-<left>" 'paredit-backward
         "C-<right>" 'paredit-forward

         ;; transformation
         ;;; kill or wrap surrounding parentheses
         "C-S-K" 'paredit-splice-sexp
         "C-S-J" 'paredit-wrap-round
         ;;; include previous or next arguments in current sexp
         "C-S-H" 'paredit-backward-slurp-sexp
         "C-S-L" 'paredit-forward-slurp-sexp
         ;;; exclude previous or next arguments from current sexp
         "C-M-S-H" 'paredit-backward-barf-sexp
         "C-M-S-L" 'paredit-forward-barf-sexp

         "C-S-S" 'paredit-split-sexp
         "C-S-M-J" 'paredit-join-sexps ;; immeadiately with expression b4 point

         ;; splice next argument after point, deleting
         ;; arguments both before and after it
         ;; a cool shortcut, but not really necessary
         ;; "M-r"   'paredit-raise-sexp
         ))
    #+END_SRC

*** flymake-package-lint
    #+begin_src emacs-lisp
      (use-package package-lint-flymake
        :straight t
        :flymake-hook
        (emacs-lisp-mode
         elisp-flymake-byte-compile
         ;; Some weird conflict with company?
         (elisp-flymake-checkdoc :disabled t)
         (package-lint-flymake :disabled t)))
    #+end_src

** python
   :PROPERTIES:
   :header-args+: :tangle (package-yes! python)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package python
       :straight (python :type built-in)
       :hook (python-mode . +flylint)
       :custom
       (python-indent-guess-indent-offset-verbose nil
        "Disable annoying notification when indent guess fails")

       :init
       (setq python-prettify-symbols-alist nil)

       :config
       (modify-syntax! '((?_ . "w")) python-mode-syntax-table)

       (evil-set-initial-state 'inferior-python-mode 'emacs)
       (add-to-list 'python-shell-completion-native-disabled-interpreters "python3")

       (configure-presym! 'python-mode
         "lambda" ?Œª)

       (defun python-shell-calculate-command ()
         "python3 -i")

       :config
       ;; So pythons tab command behaves kind of weirdly. The first time you
       ;; call it it indents the current line to the maximum possible indent
       ;; level, and then cycles between indents. It does this by checking
       ;; the current and last-command are the same and then cycling, this
       ;; fails because I remap TAB to [tab] and `last-command' is [tab]
       ;; while `this-command' is `indent-for-tab-command'.
       ;;
       ;; There's 2 ways to fix this. Either prevent this special case for
       ;; the first call and always cycle, or map TAB to the same command
       ;; as [tab] instead of relying on a macro. I opt for the latter.

       ;; (advice-add 'python-indent-line-function :override
       ;;             (defun python-indent-line-function+ ()
       ;;               (python-indent-line
       ;;                (memq this-command python-indent-trigger-commands))))

       (general-define-key
        :keymaps 'python-mode-map
        :states 'insert
        "TAB" 'indent-for-tab-command)

       :lazy-leader
       (:mode 'python-mode
        "R" 'python-shell-switch-to-shell
        "m" 'python-mark-defun
        "v" 'python-check
        "s" 'python-describe-at-point
        ;; unbound: python-nav-forward-sexp[-safe]
        ;;          python-nav-backward-sexp[-safe]

        "n"  '(:ignore t :wk "navigate")
        "nh" 'python-nav-backward-statement
        "nj" 'python-nav-forward-block
        "nk" 'python-nav-backward-block
        "nl" 'python-nav-forward-statement
        "n[" 'python-nav-backward-up-list
        "n]" 'python-nav-up-list
        "na" 'python-nav-beginning-of-block
        "ne" 'python-nav-end-of-block
        "nm" 'python-nav-if-name-main

        ;; "n C-0" 'python-nav-beginning-of-statement
        ;; "n C-$" 'python-nav-end-of-statement
        ;; "n M-j" 'python-nav-forward-defun
        ;; "n M-k" 'python-nav-backward-defun
        ;; "n M-0" 'python-nav-beginning-of-defun
        ;; "n M-$" 'python-nav-end-of-defun

        "h"  '(:ignore t :wk "help")
        "hp" 'python-eldoc-at-point

        "e"  '(:ignore t :wk "eval/exec")
        "es" '(run-python :wk "python-repl")
        "ee" '(python-shell-send-region :wk "python-shell-send-line")
        "ed" 'python-shell-send-defun
        "eb" 'python-shell-send-buffer
        "ef" 'python-shell-send-file
        "er" 'python-shell-send-region
        "ep" 'python-shell-send-string)

       :general
       (:keymaps 'python-mode-map
        "<C-backspace>" nil))
   #+END_SRC

*** python-lsp-server                                                   :lsp:
    Your going to need a python language server, I recommend [[https://github.com/python-lsp/python-lsp-server][this]] one that's based on
    [[https://github.com/davidhalter/jedi][jedi]]. There's also a Microsoft based [[https://github.com/microsoft/python-language-server][server]], and the newer/faster [[https://github.com/microsoft/pyright][pyright]] (but be
    forewarned, there be [[https://github.com/microsoft/pylance-release/issues/4][dragons]] there).

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! python :lsp)
      (add-hook 'python-mode-hook +lsp-command)
    #+END_SRC

*** pyimport
    #+BEGIN_SRC emacs-lisp
      (use-package pyimport
        :straight t
        :leader
        (:mode 'python-mode
         "i"  '(:ignore t :wk "imports")
         "ii" 'pytimport-remove-unused
         "iu" 'pyimport-insert-missing))
    #+END_SRC

*** pip-requirements
    major mode for editing pip requirements files.

    #+BEGIN_SRC emacs-lisp
      (use-package pip-requirements
        :straight t
        :mode ("^requirements\\.txt$" . pip-requirements-mode))
    #+END_SRC

** ruby
   :PROPERTIES:
   :header-args+: :tangle (package-yes! ruby)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode
       :mode ("\\.rb$" . ruby-mode)
       :hook (ruby-mode . +flylint)
       :interpreter "ruby"
       :init
       (push '(ruby-mode . 2) +indent-config)

       :config
       (modify-syntax! '((?_ . "w")
                         (?: . "w"))
         ruby-mode-syntax-table)

       :leader ("tmr" 'ruby-mode)
       :lazy-leader
       (:mode 'ruby-mode
         "'" 'ruby-toggle-string-quotes
         "{" 'ruby-toggle-block))
   #+END_SRC

*** solargraph                                                          :lsp:
    Language server implementation for ruby.

    Solargraph appears to be the only language-server implementation available for
    ruby although like ruby it's somewhat obtuse. For one you can't use it outside
    of a =bundle= managed project. If your project lacks a Gemfile Solargraph will just
    kill itself meaning it's useless for general purpose ruby scripts.

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! ruby :lsp)
      (push
       (cons 'ruby-mode
             (defun ruby-enable-lsp-in-projects+ ()
               (when (project-has-file-p "Gemfile")
                 :local)))
       +lsp-maybe-connect)

      (add-hook 'ruby-mode-hook +lsp-command)
    #+END_SRC

    #+begin_src emacs-lisp :tangle (package-yes! ruby eglot)
      (with-eval-after-load 'eglot
        (push (cons '(enh-ruby-mode ruby-mode)
                    (eglot-create-local-command+ ruby
                        '(("Gemfile.lock" "bundle" "exec"))
                      "solargraph" "socket" "--port" :autoport))
              eglot-server-programs))
    #+end_src

*** inferior-ruby
    #+BEGIN_SRC emacs-lisp
      (use-package inf-ruby
        :straight t
        :init
        (push 'inf-ruby-mode +whitespace-exempt-modes)

        :leader
        (:mode 'ruby-mode
         "e"  '(:ignore t :wk "eval/REPL")
         "es" '(inf-ruby :wk "ruby-repl")
         "eg" 'inf-ruby-console-gem
         "ez" 'inf-ruby-console-zues
         "ea" 'inf-ruby-console-auto
         "eR" 'inf-ruby-console-rails
         "ek" 'inf-ruby-console-racksh
         "ec" 'inf-ruby-console-script
         "eh" 'inf-ruby-console-hanami))
    #+END_SRC

*** ruby-tools
    #+BEGIN_SRC emacs-lisp
      (use-package ruby-tools
        :straight t
        :diminish ruby-tools-mode
        :hook (ruby-mode . ruby-tools-mode)

        :lazy-leader
        (:mode 'ruby-mode
         "i"  '(:ignore t :wk "insert")
         "i:" 'ruby-tools-to-symbol
         "i{" 'ruby-tools-interpolate
         "i <backspace>" 'ruby-tools-clear-string
         "i\"" 'ruby-tools-to-double-quote-string
         "i'" 'ruby-tools-to-single-quote-string))
    #+END_SRC

*** bundler
    #+BEGIN_SRC emacs-lisp
      (use-package bundler
        :straight t
        :leader
        (:mode 'ruby-mode
         "b"  '(:ignore t :wk "bundler")
         "rb" 'bundle-console
         "bf" 'bundle-open
         "bi" 'bundle-install
         "bu" 'bundle-update
         "bc" 'bundle-check))
    #+END_SRC

*** ruby-electric
    #+begin_src emacs-lisp
      (use-package ruby-electric
        :straight t
        :diminish ruby-electric-mode
        :hook (ruby-mode . ruby-electric-mode)
        :config
        ;;; Why poison the standard ruby map instead of using `ruby-electric-mode-map'?
        (defun ruby-electric-setup-keymap ()
          (general-define-key
           :keymaps 'ruby-mode-map
           " " 'ruby-electric-space
           ;; "{" 'ruby-electric-curlies
           "(" 'ruby-electric-matching-char
           "[" 'ruby-electric-matching-char
           ;; "\"" 'ruby-electric-quote
           ;; "\'" 'ruby-electric-quote
           "|" 'ruby-electric-bar
           "RET" 'ruby-electric-return
           ;; (kbd "C-j") 'ruby-electric-return
           ;; [C-m] 'ruby-electric-return
           "}" 'ruby-electric-close-matching-char
           ")" 'ruby-electric-close-matching-char
           "]" 'ruby-electric-close-matching-char)))
    #+end_src

** powershell
   :PROPERTIES:
   :header-args+: :tangle (package-yes! powershell)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package powershell
       :straight t)
   #+END_SRC

** ledger
   :PROPERTIES:
   :header-args+: :tangle (package-yes! ledger)
   :END:

   #+begin_src emacs-lisp :tangle no
     (use-package ledger-mode
       :straight t
       :mode ("\.journal$" . ledger-mode)
       :custom
       ;; Required to use hledger instead of ledger itself.
       (ledger-mode-should-check-version nil)
       (ledger-report-links-in-register nil)
       (ledger-binary-path "hledger")
       (ledger-highlight-xact-under-point nil)
       (ledger-source-directory (join-path (xdg-documents-dir) "ledger"))
       (ledger-reconcile-default-commodity "")

       :init
       (evil-set-initial-state 'ledger-mode 'normal)

       :config
       (modify-syntax! '((?- . "w")
                         (?+ . "w"))
         ledger-mode-syntax-table))
   #+end_src

   #+begin_src emacs-lisp
     (use-package hledger-mode
       :straight t
       :mode ("\.journal$" . hledger-mode)
       :custom
       (hledger-jfile (or (getenv "LEDGER_FILE")
                          (join-path (xdg-documents-dir) "ledger" "main.journal")))
       (hledger-comments-column 0)
       (hledger-currency-string ""
        "Default to no currency (the file specifies D).")
       (hledger-enable-current-overlay nil)
       (hledger-amount-face 'font-lock-type-face)

       :init
       (evil-set-initial-state 'hledger-mode 'normal)

       :config
       (modify-syntax! '((?- . "w")
                         (?+ . "w"))
         hledger-mode-syntax-table)
       (set-company-backend! 'hledger-mode 'hledger-company)

       (defun hledger-pulse-momentary-current-entry-no-args+ (&rest _)
         (hledger-pulse-momentary-current-entry))

       (advice-add 'hledger-next-or-new-entry :after 'hledger-pulse-momentary-current-entry-no-args+)
       (advice-add 'hledger-backward-entry    :after 'hledger-pulse-momentary-current-entry-no-args+)

       :lazy-leader
       (:mode 'hledger-input-mode
        :minor t
        :prefix leader-major-mode-prefix
        "," 'hledger-commit-input
        "q" 'hledger-discard-input
        "Q" 'hledger-discard-input-jentry)

       (:mode 'hledger-mode
        "s" 'hledger-reschedule
        "a" 'hledger-edit-amount)

       :general
       (:keymaps 'hledger-mode-map
        :states 'motion
        "gj" 'hledger-next-or-new-entry
        "gk" 'hledger-backward-entry))
   #+end_src

*** flycheck-hledger
    #+begin_src emacs-lisp :tangle (package-yes! ledger flycheck)
      (use-package flycheck-hledger
        :straight t
        :after (flycheck ledger-mode)
        :demand t)
    #+end_src

** HTML
   :PROPERTIES:
   :header-args+: :tangle (package-yes! html)
   :END:

*** web-mode
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :straight t
        :mode (rx "." (or "erb" "html" "vue"))
        :init
        (push '(web-mode . 2) +indent-config)

        :config
        (add-hook 'hack-local-variables-hook
                  (defun web-mode-fix-dirlocals+ (&rest _)
                    "see issue #1118."
                    (when (derived-mode-p major-mode 'web-mode)
                      (web-mode-guess-engine-and-content-type))))

        :leader
        ("tmh" 'web-mode)
        (:mode 'web-mode
         ;; unbound:
         ;;   * web-mode-buffer-highlight
         ;;   * web-mode-element-mute-blanks
         ;;   * web-mode-block-beginning
         ;;   * web-mode-block-end
         ;;   * web-mode-block-insert
         ;;   * web-mode-block-kill
         ;;   * web-mode-block-next
         ;;   * web-mode-block-previous
         ;;   * web-mode-block-select
         ;;   * web-mode-block-transpose
         ;;   * web-mode-navigate
         ;;   * web-mode-snippet-insert
         ;;   * web-mode-element-children-fold-or-unfold
         ;;   * web-mode-dom-errors-show
         ;;
         ;; WARN the block commands don't seem to do anything

         "TAB"   'web-mode-fold-or-unfold
         "c"     'web-mode-comment-or-uncomment
         "c"     'web-mode-element-close ; insert matching tag for body at point
         "-"     'web-mode-buffer-indent

         ;; insert
         "i"  '(:ignore t :wk "insert")
         "ia" 'web-mode-attribute-insert
         "ip" 'web-mode-element-wrap ; wrap current element in a new element with name from prompt
         "ic" 'web-mode-element-clone
         "ie" 'web-mode-element-insert
         "ie" 'web-mode-element-insert-at-point ; converts word before point to tag
         "il" 'web-mode-file-link

         ;; refactor/insert
         "r"  '(:ignore t :wk "refactor")
         "rs" 'web-mode-tag-attributes-sort
         "r(" 'web-mode-element-extract  ; add linebreak before every tag in body
         "r)" 'web-mode-element-contract ; collapse tag into a single line
         "rn" 'web-mode-dom-normalize
         "ra" 'web-mode-attribute-transpose
         "re" 'web-mode-element-transpose
         "rr" 'web-mode-element-rename

         ;; delete
         "x"  '(:ignore t :wk "delete")
         "xa" 'web-mode-attribute-kill
         "xe" 'web-mode-element-kill
         "xp" 'web-mode-element-vanish ; delete element, but move body up a level instead of erasing it

         ;; DOM
         "t"  '(:ignore t :wk "DOM")
         "ta" 'web-mode-dom-apostrophes-replace
         "ts" 'web-mode-dom-entities-replace
         "tq" 'web-mode-dom-quotes-replace
         "tx" 'web-mode-dom-xpath                                                     ; shows the xpath of the current element

         ;; mark
         "m"  '(:ignore t :wk "mark")
         "mT" 'web-mode-tag-select
                                              ; only works while between <>
         "mt" 'web-mode-element-select
         "ma" 'web-mode-attribute-select
         "mb" 'web-mode-element-content-select
         "mm" 'web-mode-mark-and-expand

         ;; navigation
         "n"  '(:ignore t :wk "navigate")
         "na" 'web-mode-element-beginning
         "ne" 'web-mode-element-end
         "nn" 'web-mode-tag-match
         "nh" 'web-mode-element-next
         "nj" 'web-mode-element-child
         "nk" 'web-mode-element-previous
         "nh" 'web-mode-element-parent
         ;; "nt" 'web-mode-dom-traverse

         "np"  '(:ignore t :wk "attributes")
         "npa" 'web-mode-attribute-beginning
         "npe" 'web-mode-attribute-end
         "nph" 'web-mode-attribute-previous
         "npl" 'web-mode-attribute-next

         "nt"  '(:ignore t :wk "tags")
         "nta" 'web-mode-tag-beginning
         "nte" 'web-mode-tag-end
         "nth" 'web-mode-tag-previous
         "ntl" 'web-mode-tag-next)

        :general
        (:keymaps 'web-mode-map
         ;; [remap whitespace-mode] 'web-mode-whitespace-show
         [remap revert-buffer] 'web-mode-reload)
        (:keymaps 'web-mode-map
         :states 'normal
         "<tab>" 'web-mode-fold-or-unfold))
    #+END_SRC

*** emmet-mode
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! (or html markdown xml))
      (use-package emmet-mode
        :straight t
        :hook ((web-mode      . emmet-mode)
               (markdown-mode . emmet-mode)
               (js2-jsx-mode  . emmet-mode)
               (js2-jsx-mode  . emmet-mode)
               (nxml-mode     . emmet-mode))
        :lazy-leader
        (:mode 'emmet-mode
         :minor t
         :prefix leader-major-mode-prefix
         "e" '(:ignore t :wk "emmet")
         "." 'emmet-expand-line
         ;; "'" 'emmet-preview
         "ee" 'emmet-expand-line
         "ep" 'emmet-preview
         "ew" 'emmet-wrap-with-markup
         "en" 'emmet-next-edit-point
         "eN" 'emmet-prev-edit-point)

        :general
        (:keymaps 'emmet-mode-keymap
         :states 'insert
         (vconcat (kbd "C-c") [C-i]) 'emmet-expand-yas
         "C-j" nil))
    #+END_SRC

*** company-web                                                         :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! html company)
      (use-package company-web
        :straight t
        :after  web-mode
        :config
        (set-company-backend! 'web-mode
          'company-web-html))
    #+END_SRC

*** web-beautify
    #+BEGIN_SRC emacs-lisp
      (use-package web-beautify
        :straight t
        :after  web-mode
        :leader
        (:mode 'web-mode
         "p"  '(:ignore t :wk "beautify")
         "ph" 'web-beautify-htlm
         "pj" 'web-beautify-js
         "pc" 'web-beautify-css))
    #+END_SRC

** HAML
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! haml)
     (use-package haml-mode
       :straight t
       :init
       (push '(haml-mode . 2) +indent-config))
   #+END_SRC

** JSON
   :PROPERTIES:
   :header-args+: :tangle (package-yes! json)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :straight t
       :mode (rx ".json")
       :hook (json-mode . +flylint)

       :lazy-leader
       (:mode 'json-mode
        "p" 'json-mode-beautify
        "x" 'json-mode-kill-path
        "t" 'json-toggle-boolean
        "DEL" 'json-nullify-sexp))
   #+END_SRC

*** vscode-json-languageserver                                          :lsp:
    Try [[https://www.npmjs.com/package/vscode-json-languageserver][VSCode JSON Language Server]] which has jsonschema support.

    #+begin_src emacs-lisp :tangle (package-yes! json :lsp)
      (push `(json-mode . :global) +lsp-maybe-connect)
      (push `(jsonc-mode . :global) +lsp-maybe-connect)
      (add-hook 'json-mode-hook +lsp-command)
      (add-hook 'jsonc-mode-hook +lsp-command)
    #+end_src

    #+begin_src emacs-lisp :tangle (package-yes! json eglot)
      (with-eval-after-load 'eglot
        (push '((json-mode jsonc-mode) . ("vscode-json-languageserver" "--stdio"))
              eglot-server-programs))
    #+end_src

** vimscript
   :PROPERTIES:
   :header-args+: :tangle (package-yes! vimlang)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package vimrc-mode
       :straight t
       :mode (rx ".vim")
       :delight (vimrc-mode " vim"))
   #+END_SRC

** SQL
   :PROPERTIES:
   :header-args+: :tangle (package-yes! sql)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package sql
       :straight t
       :mode ("\\.sql" . sql-mode)
       :hook (sql-mode . +flylint)
       :custom
       (sql-sqlite-options '("-interactive"))
       (sql-pop-to-buffer-after-send-region nil)

       :init
       (push 'sql-interactive-mode +whitespace-exempt-modes)
       (push '(sql-mode . 2) +indent-config)

       (evil-set-initial-state 'sql-mode 'normal)
       (evil-set-initial-state 'sql-interactive-mode 'emacs)

       :lazy-leader
       ;; see [[https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client][here]] for a guide on how to make quick database access easier. or if you've
       ;; already got an interactive session running, use sql-save-connection to append
       ;; it to a local variable from which you can just paste it in here.
       (:mode 'sql-mode
        ;; "a" 'sql-beginning-of-statement
        ;; "e" 'sql-end-of-statement
        "i" 'sql-show-sqli-buffer
        "t" 'sql-toggle-pop-to-buffer-after-send-region

        "e"  '(:ignore t :wk "eval/REPL")
        "ee" 'sql-send-line-and-next
        "eb" 'sql-send-buffer
        "ep" 'sql-send-paragraph
        "er" 'sql-send-region
        "ep" 'sql-send-string

        "es" '(:ignore t :wk "REPL")
        "esp" 'sql-postgres
        "ess" 'sql-sqlite
        "esm" 'sql-mysqlite

        "l"  '(:ignore t :wk "list")
        "ll" 'sql-list-all
        "lt" 'sql-list-table)
       (:mode 'sql-interactive-mode
        "m" 'sql-set-sqli-buffer
        "t" 'sql-list-table
        "a" 'sql-list-all))
   #+END_SRC

*** sqlup
    upcases SQL specific keywords after completing them.

    #+BEGIN_SRC emacs-lisp
      (use-package sqlup-mode
        :straight t
        :after  sql
        :hook ((sql-mode . sqlup-mode)
               (sql-interactive-mode . sqlup-mode))
        :config
        (push "name" sqlup-blacklist)

        :lazy-leader
        (:mode 'sql-mode
         "u"  '(:ignore t :wk "upcase")
         "ur" 'sqlup-capitalize-keywords-in-region
         "ub" 'sqlup-capitalize-keywords-in-buffer))
    #+END_SRC

** YAML
   :PROPERTIES:
   :header-args+: :tangle (package-yes! yaml)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :straight t
       :hook (yaml-mode . +flylint)
       :init
       (push '(yaml-mode . 2) +indent-config)

       :config
       (modify-syntax! '((?_ . "w")
                         (?- . "w"))
         yaml-mode-syntax-table)

       :lazy-leader
       (:mode 'yaml-mode
        "n" 'yaml-narrow-to-block-literal
        "f" 'yaml-fill-paragraph
        "v" 'yaml-mode-version)

       :general
       (:keymaps 'yaml-mode-map
        :states 'insert
        "<tab>" 'yaml-indent-line))
   #+END_SRC

** csv
   :PROPERTIES:
   :header-args+: :tangle (package-yes! csv)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode
       :straight t
       :init
       (setq csv-separators '("," ":" ";" "\t"))

       :lazy-leader
       (:mode 'csv-mode
        "a"  'csv-align-fields
        "d"  'csv-kill-fields
        "i"  'csv-toggle-invisibility
        "r"  'csv-reverse-region
        "t"  'csv-transpose
        "u"  'csv-unalign-fields

        "s" '(:ignore t :wk "sort")
        "sf" 'csv-sort-fields
        "sn" 'csv-sort-numeric-fields
        "so" 'csv-toggle-descending

        "v" '(:ignore t :wk "yank")
        "vf" 'csv-yank-fields
        "vt" 'csv-yank-as-new-table)

       :general
       (:keymaps 'csv-mode-map
        "<tab>"     'csv-forward-field
        "<backtab>" 'csv-backward-field))
   #+END_SRC

** yarn
   :PROPERTIES:
   :header-args+: :tangle (package-yes! yarn)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package yarn-mode :straight t)
   #+END_SRC

** glsl
   :PROPERTIES:
   :header-args+: :tangle (package-yes! glsl)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package glsl-mode
       :straight t
       :mode ("\\.vs$" . glsl-mode))
   #+END_SRC

*** company-glsl                                                       :comp:
    #+begin_src emacs-lisp
      (use-package company-glsl
        :straight t
        ;; Requires the openGL [[https://www.khronos.org/opengles/sdk/tools/Reference-Compiler/][reference compiler]].
        :when (executable-find "glslangValidator")
        :init
        (set-company-backend! 'glsl-mode 'company-glsl))
    #+end_src

** shell-script
   :PROPERTIES:
   :header-args+: :tangle (package-yes! sh-script)
   :END:

    #+BEGIN_SRC emacs-lisp
      (use-package sh-script
        :hook (sh-mode . +flylint)
        :preface
        (push '(sh-mode . 2) +indent-config)

        :init
        (advice-add 'sh-set-shell :around 'inhibit-messages-wrapper!)

        :config
        (modify-syntax! '((?_ . "w")
                          (?- . "w"))
          sh-mode-syntax-table)

        :lazy-leader
        (:mode 'sh-mode
         ":" 'sh-set-shell
         ;; "0" 'sh-beginning-of-command
         ;; "$" 'sh-end-of-command
         "!" 'executable-interpret
         "b" 'sh-show-shell
         "\\" 'sh-backslash-region

         "e" '(:ignore t :wk "eval/REPL")
         "er" 'sh-execute-region
         "ej" 'sh-send-line-or-region-and-step

         "i=" 'sh-assignment
         "ic" 'sh-case
         "id" 'sh-cd-here
         "if" 'sh-for
         "i TAB" 'sh-if
         "il" 'sh-indexed-loop
         "io" 'sh-while-getopts
         "ir" 'sh-repeat
         "is" 'sh-select
         "it" 'sh-tmp-file
         "iu" 'sh-until
         "iw" 'sh-while
         "i(" 'sh-function
         "i+" 'sh-add

         "TAB"   '(:ignore t :wk "indent")
         "TAB -" 'sh-learn-line-indent
         "TAB =" 'sh-set-indent
         "TAB |" 'sh-learn-buffer-indent
         "TAB ?" 'sh-show-indent))
    #+END_SRC

*** bash-language-server                                                :lsp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! sh-script :lsp)
      (add-hook 'sh-mode-hook +lsp-command)
    #+END_SRC

*** company-shell                                                       :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! sh-script company)
      (use-package company-shell
        :straight t
        :after  sh-mode
        :config
        (set-company-backend! 'sh-mode
          'company-shell 'company-shell-env))
    #+END_SRC

** ssh
   :PROPERTIES:
   :header-args+: :tangle (package-yes! ssh-config)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package ssh-config-mode
       :straight t
       :delight (ssh-config-mode " SSH")
       ;; TODO advise last host to behave like org mode
       :general
       (:keymaps '(ssh-config-mode-map ssh-known-hosts-mode-map)
        :states 'motion
        "gj" 'ssh-config-host-next
        "gk" 'ssh-config-host-prev))
   #+END_SRC

** logging
   #+BEGIN_SRC emacs-lisp :tangle (package-yes! log)
     (use-package logview
       :straight t
       :hook ((logview-mode . read-only-mode)
              (logview-mode . auto-revert-tail-mode))
       :custom
       (logview-views-file (share! "logview.views"))
       (logview-cache-filename (cache! "logview-cache.extmap"))

       :config
       (push '("python" . ((format . "LEVEL:NAME:MESSAGE")
                           (levels . "RFC 5424")))
             logview-additional-submodes)

       (setq logview-mode-map (make-sparse-keymap))

       :general
       (:keymaps 'logview-mode-map
        :states 'motion
        [remap evil-goto-first-line] 'logview-first-entry
        [remap evil-goto-line] 'logview-last-entry
        [remap revert-buffer] 'logview-revert-buffer
        [remap evil-next-line] 'logview-next-entry
        [remap evil-previous-line] 'logview-previous-entry
        "TAB" 'logview-go-to-message-beginning
        [C-i] 'logview-go-to-message-beginning
        "gj" 'logview-next-as-important-entry
        "gk" 'logview-previous-as-important-entry)

       :lazy-leader
       (:mode 'logview-mode
        "," 'logview-choose-submode
        "[" 'logview-narrow-from-this-entry
        "]" 'logview-narrow-up-to-this-entry
        "l" 'logview-refresh-buffer-as-needed
        "w" 'widen

        "t" '(:ignore t :wk "toggles")
        "t." 'logview-toggle-show-ellipses
        "tm" 'logview-toggle-search-only-in-messages
        "tD" 'logview-toggle-details-globally
        "td" 'logview-toggle-entry-details
        "tv" 'logview-toggle-region-entry-details
        "ta" 'auto-revert-mode
        "tA" 'auto-revert-tail-mode
        "th" 'logview-toggle-copy-visible-text-only
        "tg" 'logview-change-target-gap-length

        "s" '(:ignore t :wk "show")
        "se" 'logview-show-entries
        "sa" 'logview-reset-all-filters
        "sA" 'logview-reset-all-filters-restrictions-and-hidings
        "sv" 'logview-show-region-entries
        "sl" '(:ignore t :wk "levels")
        "sle" 'logview-show-only-errors
        "slw" 'logview-show-errors-and-warnings
        "sli" 'logview-show-errors-warnings-and-information
        "sld" 'logview-show-errors-warnings-information-and-debug
        "sla" 'logview-show-all-levels
        "sl0" 'logview-disable-unconditional-show
        "slE" 'logview-always-show-errors
        "slW" 'logview-always-show-errors-and-warnings
        "slI" 'logview-always-show-errors-warnings-and-information
        "slD" 'logview-always-show-errors-warnings-information-and-debug

        "f" '(:ignore t :wk "filter")
        "fh" 'logview-hide-entry
        "fv" 'logview-hide-region-entries
        "fm" 'logview-add-include-message-filter
        "fM" 'logview-add-exclude-message-filter
        "ft" 'logview-add-include-thread-filter
        "fT" 'logview-add-exclude-thread-filter
        "fa" 'logview-add-include-name-filter
        "fA" 'logview-add-exclude-name-filter
        "f>" 'logview-show-only-as-important
        "fe" 'logview-edit-filters

        "v" '(:ignore t :wk "view")
        "vj" 'logview-next-navigation-view-entry
        "vk" 'logview-previous-navigation-view-entry
        "vv" 'logview-switch-to-view
        "vs" 'logview-save-filters-as-view-for-submode
        "vS" 'logview-save-filters-as-global-view
        "ve" 'logview-edit-submode-views
        "vE" 'logview-edit-all-views
        "vh" 'logview-highlight-view-entries
        "vu" 'logview-unhighlight-view-entries
        "vx" 'logview-delete-view
        "vi" 'logview-assign-quick-access-index
        "vn" 'logview-set-navigation-view

        ;; zA logview-forget-difference-base-entries
        ;; zN logview-next-timestamp-gap-in-this-thread
        ;; zP logview-previous-timestamp-gap-in-this-thread
        ;; zT logview-forget-thread-difference-base-entry
        ;; za logview-difference-to-current-entry
        ;; zg logview-change-target-gap-length
        ;; zn logview-next-timestamp-gap
        ;; zp logview-previous-timestamp-gap
        ;; zt logview-thread-difference-to-current-entry
        ;; zz logview-go-to-difference-base-entry
        )

       :lazy-leader
       (:mode 'logview-filter-edit-mode
        "," 'logview-filter-edit-save
        "q" 'logview-filter-edit-cancel))
   #+END_SRC

** makefile
   :PROPERTIES:
   :header-args+: :tangle (package-yes! makefile)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package make-mode
       :config
       (defun makefile--enable-evil-motion-state (&rest _)
         (evil-motion-state +1))

       ;; tabs for indentation, spaces for allignment
       (advice-add 'makefile-backslash-region :around
                   (defun makefile-backslash-region--no-tabs (func &rest args)
                     (let (indent-tabs-mode)
                       (apply func args))))

       (advice-add #'makefile-switch-to-browser          :after #'makefile--enable-evil-motion-state)
       (advice-add #'makefile-create-up-to-date-overview :after #'makefile--enable-evil-motion-state)

       :lazy-leader
       (:mode '(makefile-automake-mode
                makefile-bsdmake-mode
                makefile-gmake-mode
                makefile-imake-mode
                makefile-mode
                makefile-makepp-mode)
        "b" 'makefile-switch-to-browser
        "o" 'makefile-create-up-to-date-overview
        "p" 'makefile-pickup-everything
        "f" 'makefile-pickup-filenames-as-targets
        "i" 'makefile-insert-target-ref

        "\\"  'makefile-backslash-region
        "TAB" 'makefile-insert-gmake-function)

       :general
       (:keymaps 'makefile-mode-map
        :states 'motion
        "gj" 'makefile-next-dependency
        "gk" 'makefile-previous-dependency)
       (:states  'motion
        :keymaps 'makefile-browser-map
        "j" 'makefile-browser-next-line
        "k" 'makefile-browser-previous-line

        "t"     'makefile-browser-toggle
        "TAB"   'makefile-browser-toggle
        "<tab>" 'makefile-browser-toggle
        "RET"   'makefile-browser-insert-continuation

        "I" 'makefile-browser-insert-selection-and-quit
        "i" 'makefile-browser-insert-selection

        [remap quit-window] 'makefile-browser-quit))
   #+END_SRC

** markdown
   :PROPERTIES:
   :header-args+: :tangle (package-yes! markdown)
   :END:

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :straight t
        :hook ((markdown-mode . display-line-numbers-mode)
               (markdown-mode . auto-fill-mode)
               (markdown-mode . +flylint))
        :custom
        (markdown-indent-on-enter 'indent-and-new-item)
        (markdown-fontify-code-blocks-natively t)
        (markdown-ordered-list-enumeration nil
         "It bothers mdlint for some reason.")

        :config
        (modify-syntax! '((?_ . "$")
                          (?- . "_"))
          markdown-mode-syntax-table)

      ;;; evil-markdown-mode (Somelauw/evil-markdown)
        (with-eval-after-load 'evil
          (evil-declare-motion 'markdown-forward-paragraph)
          (evil-declare-motion 'markdown-backward-paragraph)

          ;; heading
          (evil-declare-motion 'markdown-forward-same-level)
          (evil-declare-motion 'markdown-backward-same-level)
          (evil-declare-motion 'markdown-up-heading)
          (evil-declare-motion 'markdown-next-heading)
          (evil-declare-motion 'markdown-previous-heading)
          (evil-declare-motion 'markdown-next-visible-heading)
          (evil-declare-motion 'markdown-previous-visible-heading)

          ;; other
          (evil-declare-motion 'markdown-beginning-of-block)
          (evil-declare-motion 'markdown-beginning-of-defun)
          (evil-declare-motion 'markdown-end-of-block)
          (evil-declare-motion 'markdown-end-of-block-element)
          (evil-declare-motion 'markdown-end-of-defun)
          (evil-declare-motion 'markdown-next-visible-heading)
          (evil-declare-motion 'markdown-next-link)
          (evil-declare-motion 'markdown-previous-visible-heading)
          (evil-declare-motion 'markdown-previous-link)

          ;; non-repeatible
          (evil-declare-change-repeat 'markdown-cycle)
          (evil-declare-change-repeat 'markdown-shifttab))

        :config
        (push '("make" . makefile-mode) markdown-code-lang-modes)

        :lazy-leader
        (:mode 'markdown-mode
         ;; unbound commands:
         ;;  * markdown-outdent-region
         ;;  * markdown-indent-region
         ;;  * markdown-outline-previous-same-level
         "h" 'markdown-up
         "j" 'markdown-next
         "k" 'markdown-previous
         "l" 'markdown-outline-next-same-level
         "g" 'markdown-next-link
         "G" 'markdown-previous-link
         "}" 'markdown-forward-block
         "{" 'markdown-backward-block
         "SPC" 'markdown-do
         "'" 'markdown-edit-code-block
         "f" 'markdown-follow-thing-at-point
         ">" 'markdown-blockquote-region
         "TAB" 'markdown-pre-region ;; preformat

         ;; complete/checks
         "c"  '(:ignore t :wk "check/complete")
         "cc" 'markdown-complete
         "cb" 'markdown-complete-buffer
         "cr" 'markdown-check-refs
         "cR" 'markdown-unused-refs
         "cl" 'markdown-cleanup-list-numbers

         "o" 'markdown-open
         "e" 'markdown-export
         "p" 'markdown-preview
         "v" 'markdown-export-and-preview
         "O" 'markdown-other-window

         ;; insert
         "i"  '(:ignore t :wk "insert")
         "i TAB" 'markdown-insert-image
         "i*" 'markdown-insert-list-item
         "i!" 'markdown-insert-header-setext-1
         "i-" 'markdown-insert-hr
         "i1" 'markdown-insert-header-atx-1
         "i2" 'markdown-insert-header-atx-2
         "i3" 'markdown-insert-header-atx-3
         "i4" 'markdown-insert-header-atx-4
         "i5" 'markdown-insert-header-atx-5
         "i6" 'markdown-insert-header-atx-6
         "i@" 'markdown-insert-header-setext-2
         "iC" 'markdown-insert-gfm-code-block
         "iH" 'markdown-insert-header-setext-dwim
         "i[" 'markdown-insert-gfm-checkbox
         "ib" 'markdown-insert-bold
         "ic" 'markdown-insert-code
         "ie" 'markdown-insert-italic
         "if" 'markdown-insert-footnote
         "ii" 'markdown-insert-italic
         "ik" 'markdown-insert-kbd
         "ip" 'markdown-insert-pre
         "iq" 'markdown-insert-blockquote
         "is" 'markdown-insert-strike-through

         "ih"  '(:ignore t :wk "header")
         "ih!" 'markdown-insert-header-setext-1
         "ih1" 'markdown-insert-header-atx-1
         "ih2" 'markdown-insert-header-atx-2
         "ih3" 'markdown-insert-header-atx-3
         "ih4" 'markdown-insert-header-atx-4
         "ih5" 'markdown-insert-header-atx-5
         "ih6" 'markdown-insert-header-atx-6
         "ih@" 'markdown-insert-header-setext-2
         "ihH" 'markdown-insert-header-setext-dwim
         "ihh" 'markdown-insert-header-dwim
         "ihs" 'markdown-insert-header-setext-2
         "iht" 'markdown-insert-header-setext-1

         "il"  '(:ignore t :wk "link")
         "ill" 'markdown-insert-link
         "ilf" 'markdown-insert-footnote
         "ilu" 'markdown-insert-uri
         "ilw" 'markdown-insert-wiki-link

         ;; delete/kill
         "d"  '(:ignore t :wk "delete")
         "dd" 'markdown-kill-thing-at-point
         "db" 'markdown-kill-block
         "do" 'markdown-kill-outline
         "dy" 'markdown-kill-ring-save

         ;; toggles
         "M"  '(:ignore t :wk "toggle")
         "Mm" 'markdown-toggle-math
         "Mf" 'markdown-toggle-fontify-code-blocks-natively
         "Mi" 'markdown-toggle-inline-images
         "Mu" 'markdown-toggle-url-hiding
         "Mm" 'markdown-toggle-markup-hiding
         "Mc" 'markdown-toggle-gfm-checkbox
         "Ml" 'markdown-live-preview-mode

         ;; narrowing
         "n"  '(:ignore t :wk "narrow")
         "nb" 'markdown-narrow-to-block
         "np" 'markdown-narrow-to-page
         "ns" 'markdown-narrow-to-subtree
         "nw" 'widen

         ;; marks
         "m"  '(:ignore t :wk "mark")
         "ms" 'markdown-mark-subtree
         "mb" 'markdown-mark-block

         ;; table
         "t"  '(:ignore t :wk "table")
         "ts" 'markdown-table-sort-lines
         "tT" 'markdown-table-transpose
         "tt" 'markdown-insert-table
         "tn" 'markdown-insert-table
         "tc" 'markdown-table-convert-region

         "ti"  '(:ignore t :wk "insert")
         "tir" 'markdown-table-insert-row
         "tic" 'markdown-table-insert-column
         "tit" 'markdown-insert-table

         "td"  '(:ignore t :wk "delete")
         "tdr" 'markdown-table-delete-row
         "tdc" 'markdown-table-delete-column)

        :general
        (:keymaps 'markdown-mode-map
         :states 'motion
         "gh" 'markdown-up-heading
         "gj" 'markdown-outline-next
         "gk" 'markdown-outline-previous
         "gl" 'markdown-outline-next-same-level
         "}" 'markdown-forward-paragraph
         "{" 'markdown-backward-paragraph)
        (:keymaps 'markdown-mode-map
         :states 'insert
         "RET"      'markdown-enter-key
         "<return>" 'markdown-enter-key)
        (:keymaps 'markdown-mode-map
         :states '(normal insert)
         "C-<return>" 'markdown-insert-list-item)
        (:keymaps 'markdown-mode-map
         :states '(insert normal)
         :predicate '(markdown-list-item-at-point-p)
         [remap drag-stuff-down]  'markdown-move-down
         [remap drag-stuff-up]    'markdown-move-up)
        (:keymaps 'markdown-mode-map
         :states '(insert normal)
         :predicate '(or (markdown-list-item-at-point-p)
                         (markdown-on-heading-p))
         [remap evil-shift-right] 'markdown-demote
         [remap evil-shift-left]  'markdown-promote)
        (:keymaps 'markdown-mode-map
         :states '(insert normal)
         :predicate '(or (markdown--table-at-point-p)
                         (markdown-on-heading-p))
         "<tab>"           'markdown-cycle
         "<S-iso-lefttab>" 'markdown-shifttab
         "<S-tab>"         'markdown-shifttab
         "<backtab>"       'markdown-shifttab))
    #+END_SRC

*** gh-md
    #+BEGIN_SRC emacs-lisp
      (use-package gh-md
        :straight t
        :after  markdown-mode
        :leader
        (:mode 'markdown-mode
         "r" 'gh-md-render-buffer
         "R" 'gh-md-render-region))
    #+END_SRC

** cmake
   :PROPERTIES:
   :header-args+: :tangle (package-yes! cmake)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package cmake-mode
       :straight t
       :mode (rx (or "CMakeLists.txt" ".cmake")))
   #+END_SRC

*** company-cmake                                                       :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! cmake company) :tangle no
      (use-package company-cmake
        :straight (company-cmake :host github :repo "purcell/company-cmake")
        :after cmake
        :init
        (set-company-backend! 'cmake-mode
          'company-cmake))
    #+END_SRC

** c/cpp
   :PROPERTIES:
   :header-args+: :tangle (package-yes! c)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package cc-mode
       :straight (cc-mode :type built-in)
       ;; :hook ((c-mode . +flylint)
       ;;        (c++-mode . +flylint))
       :custom
       (c-default-style '((java-mode . "linux")
                          (awk-mode . "awk")
                          (other . "k&r")))

       ;; :hook
       ;; ((c-mode . c-toggle-auto-newline)
       ;;  (c++-mode . c-toggle-auto-newline))

       ;; WARN never do this, it breaks commenting in weird places.
       ;; (c-toggle-comment-style +1)

       :init
       (push '((c-mode c++-mode)
               (?\; . after))
             electric-layout-mode-rules+)

       :config
       (dolist (tbl (list c-mode-syntax-table
                          c++-mode-syntax-table))
         (modify-syntax! '((?_ . "w")) tbl))

       :leader
       (:mode '(java-mode c-mode cc-mode)
        "S" 'c-set-style
        "D" 'c-display-defun-name
        "m" 'c-mark-function
        "r" 'c-indent-defun
        "/" 'c-backslash-region
        "\\" 'c-toggle-comment-style
        "DEL" 'c-hungry-delete-forward
        "M-DEL" 'c-hungry-delete-backwards))
   #+END_SRC

*** modern-cpp-font-lock
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! c (not tree-sitter))
      (use-package modern-cpp-font-lock
        :diminish modern-c++-font-lock-mode
        :straight (modern-cpp-font-lock
                   :repo "ludwigpacifici/modern-cpp-font-lock")
        :hook (c++-mode . modern-c++-font-lock-mode))
    #+END_SRC

*** clangd/ccls                                                         :lsp:
    LSP implementation for C++/C.

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! c :lsp)
      (add-hook 'c-mode-hook   +lsp-command)
      (add-hook 'c++-mode-hook +lsp-command)
    #+END_SRC

** csharp
   :PROPERTIES:
   :header-args+: :tangle (package-yes! csharp)
   :END:

   #+begin_src emacs-lisp
     (use-package csharp-mode
       :straight t)
   #+end_src

*** omnisharp-roslyn                                                    :lsp:
    :PROPERTIES:
    :header-args+: :tangle (package-yes! csharp :lsp)
    :END:
    The most recent language server implementation for csharp: [[https://github.com/OmniSharp/omnisharp-roslyn][omnisharp-roslyn]].

    #+begin_src emacs-lisp
      (add-hook 'perl-mode-hook +lsp-command)
    #+end_src

    #+begin_src emacs-lisp :tangle (package-yes! csharp eglot)
      (with-eval-after-load 'eglot
        (push `(csharp-mode . ("omnisharp" "-lsp"))
              eglot-server-programs))
    #+end_src

** kotlin
   :PROPERTIES:
   :header-args+: :tangle (package-yes! kotlin)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package kotlin-mode
       :straight t
       :config
       (push (cons 'kotlin-mode 4) +indent-config)

       :lazy-leader
       (:mode 'kotlin-mode
        "r" 'kotlin-repl

        "e"     '(:ignore t :wk "eval/REPL")
        "e-"    'kotlin-send-line
        "e|"    'kotlin-send-block
        "er"    'kotlin-send-region
        "eb"    'kotlin-send-buffer
        "e S--" 'kotlin-send-line-and-focus
        "e S-|" 'kotlin-send-block-and-focus
        "eR"    'kotlin-send-region-and-focus
        "eB"    'kotlin-send-buffer-and-focus))
   #+END_SRC

*** kotlin-language-server                                              :lsp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! kotlin :lsp)
      (add-hook 'kotlin-mode-hook +lsp-command)
    #+END_SRC

** java
   :PROPERTIES:
   :header-args+: :tangle (package-yes! java)
   :END:

   Java, the language *everyone* tolerates.

   #+BEGIN_SRC emacs-lisp
     (use-package cc-mode
       :hook (java-mode . +java-mode-fix-indentation)
       :preface
       (defun +java-mode-fix-indentation ()
         (c-set-offset 'inexpr-class 0)))
   #+END_SRC

*** meghanada
    A language server for java, written in java. NOT LSP Compliant.

   #+BEGIN_SRC emacs-lisp
     (use-package meghanada
       :straight t
       :delight (meghanada-mode " MEG")
       :hook (java-mode . meghanada-mode)
       :custom
       (meghanada-server-install-dir (cache! "meghanada"))

       :config
       (require 'yasnippet)

       (setq meghanada-map+ (make-sparse-keymap))

       :lazy-leader
       (:mode 'meghanada-mode
        :minor t
        :prefix leader-server-leader-prefix
        ""  '(:ignore t :wk "meghanada")
        ""  meghanada-map+

        "c" '(:ignore t :wk "compile/run")
        "t" '(:ignore t :wk "test")
        "S" '(:ignore t :wk "server")
        "i" '(:ignore t :wk "insert/refactor"))

       :general
       (:keymaps 'meghanada-map+
        "SPC" 'meghanada-run-task
        "D"   'meghanada-typeinfo
        "G"   'meghanada-back-jump
        "F"   'meghanada-search-everywhere-ex
        "d"   'meghanada-reference ;; documentation
        "g"   'meghanada-jump-declaration
        "x"   'meghanada-server-kill
        "l"   'meghanada-server-start
        "p"   'meghanada-code-beautify
        "o"   'meghanada-restart
        "s"   'meghanada-show-project
        "f"   'meghanada-search-everywhere
        "y"   'meghanada-mode

        "cc" 'meghanada-compile-project
        "cd" 'meghanada-debug-main
        "cf" 'meghanada-compile-file
        "cr" 'meghanada-exec-main

        "Si" 'meghanada-install-server
        "Su" 'meghanada-update-server

        "ia" 'meghanada-import-all
        "il" 'meghanada-local-variable
        "io" 'meghanada-optimize-import
        "ip" 'meghanada-import-at-point

        "td"      'meghanada-debug-junit-class
        "tt"      'meghanada-switch-testcase                                         ; test -> file -> test
        "tf"      'meghanada-run-junit-class
        "t SPC"   'meghanada-run-junit-test-case
        "t C-SPC" 'meghanada-debug-junit-test-case))
   #+END_SRC

**** company-meghanada                                                  :comp:
     #+begin_src emacs-lisp :tangle (package-yes! java company)
       (set-company-backend! 'java-mode
         'company-meghanada)
     #+end_src

** javascript
   :PROPERTIES:
   :header-args+: :tangle (package-yes! javascript)
   :END:

   # NOTE no on the fly syntax checking? make sure eslint is installed no warning
   # or error will be issued if it isn't :(

*** javascript-mode
    I just use this as a drop in replacement for json-mode :)

    #+BEGIN_SRC emacs-lisp :tangle yes
      (push '(js-mode . 2) +indent-config)

      (push '((js2-mode js-mode typescript-mode)
              (?{ . after)
              (?} . before))
            electric-layout-mode-rules+)
    #+END_SRC

*** js2-mode
    the true javascript package for emacs.

    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :straight t
        :mode (rx ".js")
        :hook ((js2-mode . electric-layout-local-mode)
               (js2-mode . +flylint))
        :commands (js-jsdoc-return+)

        :config
        (setq js2-mode-show-parse-errors      nil
              js2-mode-show-strict-warnings   nil
              js2-strict-missing-semi-warning nil)

        (defun js-jsdoc-return+ (&optional arg)
          (interactive "p")
          (barf-if-buffer-read-only) ;; can't continue adding to readonly buffer.
          (setq arg (or arg 1)) ;; insert one line when arg hasn't been given.

          (let (inserted)
            (when (in-comment-p)
              (let* ((current-line (buffer-substring-no-properties
                                    (line-beginning-position)
                                    (line-end-position)))
                     (start-regexp (rx bol (zero-or-more blank) "/**"))
                     (continue-regexp (rx bol (one-or-more blank) "*"))
                     start-p)
                (when (or (string-match-p continue-regexp current-line)
                          (setq start-p    (string-match-p start-regexp    current-line)))
                  (setq inserted t)
                  (let ((start-column (line-beginning-column)))
                    (when start-p (cl-incf start-column)) ;; one char past start column
                    (dotimes (_ arg)
                      ;; (goto-char (line-end-position))
                      (newline)
                      (insert (make-string start-column ? ) "* ")
                      (save-excursion
                        (forward-line -1)
                        (whitespace-cleanup-region (line-beginning-position) (line-end-position))))))))
            (unless inserted
              (dotimes (_ arg)
                (indent-new-comment-line)))))

        :lazy-leader
        (:mode 'js2-mode
         "i"  '(:ignore t :wk "insert")
         "h"  '(:ignore t :wk "help")
         "gg" 'js2-jump-to-definition

         ;; toggle hide-show
         "H"  '(:ignore t :wk "hide/show")
         "HH" 'js2-mode-show-all
         "Hw" 'js2-mode-toggle-warnings-and-errors
         "He" 'js2-mode-toggle-element
         "Hc" 'js2-mode-toggle-hide-comments
         "Hf" 'js2-mode-toggle-hide-functions

         ;; hide
         "Hh" '(:ignore t :wk "hide")
         "Hhw" 'js2-mode-hide-warnings-and-errors
         "Hhe" 'js2-mode-hide-element
         "Hhc" 'js2-mode-show-comments
         "Hhf" 'js2-mode-hide-functions

         ;; show
         "Hs" '(:ignore t :wk "show")
         "Hsw" 'js2-mode-display-warnings-and-errors
         "Hse" 'js2-mode-show-element
         "Hsc" 'js2-mode-hide-comments
         "Hsf" 'js2-mode-show-functions)

        :general
        (:keymaps 'js2-mode-map
         [remap indent-new-comment-line] 'js-jsdoc-return+)
        (:keymaps '(js-mode-map js2-mode-map)
         :states  'insert
         ;; properly formets javadocs
         "<return>" 'newline
         "RET"      'newline))
    #+END_SRC

*** typescript-language-server                                          :lsp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! javascript :lsp)
      (push (cons 'js2-mode
                  (defun javascript-enable-lsp-in-projects+ ()
                    (when (project-has-file-p "package.json" "yarn.lock")
                      :local)))
            +lsp-maybe-connect)

      (add-hook 'js2-mode-hook +lsp-command)
    #+END_SRC

    #+begin_src emacs-lisp :tangle (package-yes! javascript eglot)
      (with-eval-after-load 'eglot
        (push (cons '(js-mode typescript-mode)
                    (eglot-create-local-command+ node
                        '(("package-lock.json" "npx")
                          ("yarn.lock" "yarn" "run"))
                      "typescript-language-server" "--stdio"))
              eglot-server-programs))
    #+end_src

*** js-doc
    #+BEGIN_SRC emacs-lisp
      (use-package js-doc
        :straight t
        :config
        (advice-add 'js-doc-insert-function-doc-snippet :after
                    (lambda (&rest _)
                      (evil-insert nil)))

        :lazy-leader
        (:mode 'js2-mode
          "i@" 'js-doc-insert-tag
          "i)" 'js-doc-insert-function-doc                                            ; only works from within method
          "i(" 'js-doc-insert-function-doc-snippet
          "if" 'js-doc-insert-file-doc
          "h@" 'js-doc-describe-tag))
    #+END_SRC

*** js2-refactor
    #+BEGIN_SRC emacs-lisp
      ;; most of this doesn't seem to work very well...
      ;; so I'm only using a few functions with simple features.
      (use-package js2-refactor
        :straight t
        :diminish
        :hook (js2-mode . js2-refactor-mode)
        :config
        (defun js2r-exit-visual-mode-after-func-call (&rest _)
          (when (evil-visual-state-p)
            (evil-exit-visual-state)))

        (advice-add 'js2r-extract-method   :after #'js2r-exit-visual-mode-after-func-call)
        (advice-add 'js2r-extract-function :after #'js2r-exit-visual-mode-after-func-call)

        :lazy-leader
        (:mode 'js2-mode
         "[" 'js2r-expand-node-at-point
         "]" 'js2r-contract-node-at-point

         ;; doesn't work unless executed from within a function
         "e"  '(:ignore t :wk "extract")
         "ef" 'js2r-extract-function
         "em" 'js2r-extract-method
         "ev" 'js2r-extract-var
         "el" 'js2r-extract-let
         "ec" 'js2r-extract-const

         "l" 'js2r-log-this
         "L" 'js2r-debug-this

         "v" 'js2r-var-to-this

         "s" 'js2r-forward-slurp
         "b" 'js2r-forward-barf))
    #+END_SRC

** typescript
   :PROPERTIES:
   :header-args+: :tangle (package-yes! javascript typescript)
   :END:

   Typescript depends on javascript +for now+.

   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :straight t
       :hook (typescript-mode . +flylint)
       :init
       (push '(typescript-mode . 2) +indent-config)

       :general
       (:keymaps 'typescript-mode-map
        [remap indent-new-comment-line] 'js-jsdoc-return+))
   #+END_SRC

*** typescript-react
    #+begin_src emacs-lisp
      (use-package typescript-mode
        :straight t
        :mode ("\\.tsx" . typescript-react-mode)
        :hook ((typescript-react-mode . emmet-mode)
               (typescript-react-mode . +flylint))
        :init
        (push '(typescript-react-mode . 2) +indent-config)

        (with-eval-after-load 'emmet-mode
          (push 'typescript-react-mode emmet-jsx-major-modes))

        :commands (typescript-react-mode)
        :config
        (define-derived-mode typescript-react-mode typescript-mode
          "TypescriptReact")

        (put 'typescript-react-mode 'eglot-language-id "typescriptreact"))
    #+end_src

*** typescript-language-server                                          :lsp:
    #+begin_src emacs-lisp :tangle (package-yes! javascript typescript :lsp)
      (add-hook 'typescript-mode-hook       +lsp-command)
      (add-hook 'typescript-react-mode-hook +lsp-command)
    #+end_src

** css/less
   :PROPERTIES:
   :header-args+: :tangle (package-yes! css)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package css-mode
       :hook (css-mode . +flylint)
       :lazy-leader
       (:mode '(less-css-mode css-mode)
        "?" 'css-lookup-symbol
        "b" 'web-beautify-css))
   #+END_SRC

*** company-css                                                        :comp:
    #+begin_src emacs-lisp :tangle (package-yes! css company)
      (set-company-backend! 'css-mode
        'company-css)

       (set-company-backend! 'less-css-mode
         'company-css)
    #+end_src

*** vscode-css-languageserver-bin                                       :lsp:
    Requires ~npm install --global vscode-css-languageserver-bin~.

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! css :lsp)
      (add-hook 'css-mode-hook  +lsp-command)
      (add-hook 'scss-mode-hook +lsp-command)
    #+END_SRC

    #+begin_src emacs-lisp :tangle (package-yes! css eglot)
      (with-eval-after-load 'eglot
        (push '((css-mode scss-mode)
                "css-languageserver" "--stdio")
              eglot-server-programs))
    #+end_src

*** less-css-mode
    #+BEGIN_SRC emacs-lisp
      (use-package less-css-mode
        :hook (scss-mode . +flylint)
        :lazy-leader
        (:mode 'less-css-mode
         "c" 'less-css-compile))
    #+END_SRC

** haskell
   :PROPERTIES:
   :header-args+: :tangle (package-yes! haskell)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :straight t
       :init
       (push 'haskell-interactive-mode +whitespace-exempt-modes)
       (push 'inferior-haskell-mode +whitespace-exempt-modes)

       (defalias 'haskell-repl #'run-haskell)

       :config
       (setq haskell-process-type 'cabal-repl)
       (evil-set-initial-state 'haskell-interactive-mode 'emacs)

       ;; haskell-mode seems to be configuring the wrong value for eldoc.
       (defun haskell-doc-function+ (callback)
         (funcall callback (haskell-doc-current-info)))

       (add-hook 'haskell-mode-hook
                 (defun haskell-mode-fix-eldoc+ ()
                   (kill-local-variable 'eldoc-documentation-function)
                   (add-hook 'eldoc-documentation-functions #'haskell-doc-function+ nil t)))

       :lazy-leader
       (:mode 'haskell-mode
        "e" '(run-haskell :wk "haskell-repl")

        "r"  '(:ignore t :wk "refactor")
        "ri" 'haskell-mode-format-imports
        "rI" 'haskell-sort-imports

        "i"  '(:ignore t :wk "insert")
        "is" 'haskell-mode-toggle-scc-at-point

        "s"  '(:ignore t :wk "session")
        "sc" 'haskell-session-change
        "sC" 'haskell-session-change-target
        "sk" 'haskell-session-kill
        "sK" 'haskell-kill-session-process)

       :general
       (:keymaps 'haskell-mode-map "C-M-i" nil))
   #+END_SRC

*** haskell-indent
    #+begin_src emacs-lisp
      (use-package haskell-indent
        :commands (haskell-indent-cycle)
        :general
        (:keymaps 'haskell-mode-map
         :states 'insert
         "<tab>" 'haskell-indent-cycle
         "S-TAB" 'haskell-delete-indentation)

        :leader
        (:mode 'haskell-mode
         "i|" 'haskell-indent-insert-guard
         "iw" 'haskell-indent-insert-where
         "io" 'haskell-indent-insert-other
         "i=" 'haskell-indent-insert-equal))
    #+end_src

*** hindent
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! haskell hindent)
      (use-package hindent
        :straight t
        :hook (haskell-mode . hindent-mode))
    #+END_SRC

*** company-cabal                                                       :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! haskell company)
      (use-package company-cabal
        :straight t
        :after haskell-mode
        :init
        (set-company-backend! 'haskell-cabal-mode
          'company-cabal))
    #+END_SRC

*** flycheck-haskell
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! haskell flycheck)
      (use-package flycheck-haskell
        :straight t
        :after haskell-mode)
    #+END_SRC

*** haskell-language-server                                             :lsp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! haskell :lsp)
      (when (package! lsp-mode)
        (use-package lsp-haskell
          :straight t
          :after (lsp haskell-mode)
          :demand t))

      (add-hook 'haskell-mode-hook +lsp-command)
    #+END_SRC

** php
   :PROPERTIES:
   :header-args+: :tangle (package-yes! php)
   :END:

   #+begin_src emacs-lisp
     (use-package php-mode
       :straight t)

     (use-package php-eldoc
       :straight t
       :hook (eldoc-mode . php-eldoc-enable))
   #+end_src

*** php-language-server                                                 :lsp:
    #+begin_src emacs-lisp :tangle (package-yes! php :lsp)
      (add-hook 'php-mode-hook +lsp-command)
    #+end_src

** nim
   :PROPERTIES:
   :header-args+: :tangle (package-yes! nim)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package nim-mode
       :straight t
       :hook (nim-mode . nim-eldoc-on)
       :config
       (+set-compilation-bindings 'nim-compile-mode 'nim-compile-mode-map)

       (advice-add 'nim-compile--assert :override
                   (defun nim-compile--assert+ (command)
                     "Check COMMAND.
     Basically copied from `compile-command's document."
                     (or (stringp command)
                         (and (bound-and-true-p compilation-read-command)
                              (compilation-read-command)))))

       :general
       (:keymaps 'nim-mode-map
        [remap compile] 'nim-compile)
       (:keymaps 'nim-mode-map
        :states 'insert
        "DEL" 'nim-electric-backspace)

       :lazy-leader
       (:mode 'nim-mode
        "c" 'nim-compile))
   #+END_SRC

*** nimlsp
    Firstly in case lsp is not available, lets rely on the builtin nim help
    facilities curtesy of [[https://nim-lang.org/docs/nimsuggest.html][nimsuggest]].

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! nim (not :lsp))
      (add-hook 'nim-mode-hook #'nimsuggest-mode)
    #+END_SRC

    Lets use [[https://github.com/PMunch/nimlsp][nimlsp]].

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! nim :lsp)
      (add-hook 'nim-mode-hook +lsp-command)
      (remove-hook 'nim-mode-hook 'nim-eldoc-on)                                      ; eldoc is taken care of by my lsp package.
    #+END_SRC

    #+begin_src emacs-lisp :tangle (package-yes! nim eglot)
      (with-eval-after-load 'eglot
        (push '((nim-mode nimscript-mode)
                "nimlsp")
              eglot-server-programs))
    #+end_src

** golang
   :PROPERTIES:
   :header-args+: :tangle (package-yes! golang)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :straight t
       :hook (go-mode . indent-tabs-mode)
       :init
       (push '(go-mode . 4) +indent-config)

       :lazy-leader
       (:mode 'go-mode
        ;; requires: go get github.com/rogpeppe/godef
        "h" '(:ignore t :wk "help/guru")
        "hh" 'godoc-at-point
        "hH" 'godoc

        "g" '(:ignore t :wk "goto")
        "gi" 'go-goto-imports
        "gc" 'go-coverage

        "i" '(:ignore t :wk "imports/insert")
        "ia" 'go-import-add
        "ix" 'go-remove-unused-imports

        "e" '(:ignore t :wk "playground")
        "eb" 'go-play-buffer
        "er" 'go-play-region
        "ed" 'go-download-play))
   #+END_SRC

*** go-guru
    requires: ~go get golang.org/s/using-guru~

    Only used when lsp based language support is not available.

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! golang (not :lsp))
      (use-package go-guru
        :straight t
        :after go-mode

        :preface
        (defun go-guru-preserve-compilation-window+ ()
          "Prevent my `compilation-hook' settings interfering with go-guru."
          (setq-local compilation-auto-kill-window+ nil))
        :hook (go-guru-output-mode . go-guru-preserve-compilation-window+)

        :lazy-leader
        (:mode 'go-mode
         "hd" 'go-guru-describe
         "hi" 'go-guru-implements
         "hc" 'go-guru-peers
         "hp" 'go-guru-pointsto
         "hs" 'go-guru-callstack
         "he" 'go-guru-whicherrs

         "gr" 'go-guru-referrers
         "g<" 'go-guru-callers
         "g>" 'go-guru-callees
         "go" 'go-guru-set-scope
         "gg" 'go-guru-definition
         "gf" 'go-guru-freevars))
    #+END_SRC

*** go-impl
    Generate boilerplate for interface implementations in go.
    Requires ~go get -u github.com/josharian/impl~.

    #+begin_src emacs-lisp
      (use-package go-impl
        :straight t
        :leader
        (:mode 'go-mode
         "ii" 'go-impl))
    #+end_src

*** gopls                                                               :lsp:
    The golang language server.
    requires: ~GO11MODULE=on go get -u golang.org/x/tools/gopls@latest~.

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! golang :lsp)
      (add-hook 'go-mode-hook +lsp-command)
    #+END_SRC

** rust
   :PROPERTIES:
   :header-args+: :tangle (package-yes! rust)
   :END:

   LSP support requires: ~rustup component add rls rust-analysis rust-src~.
   or [[https://github.com/rust-analyzer/rust-analyzer][rust-analyzer]].

   #+BEGIN_SRC emacs-lisp
     (use-package rustic
       :straight t
       :custom
       (rustic-format-trigget 'on-save)
       (rustic-lsp-client nil)
       (rustic-lsp-server 'rust-analyzer)

       :commands (rustic-compile
                  rustic-cargo-test
                  rustic-cargo-run)
       :init
       (with-eval-after-load 'projectile
         (projectile-update-project-type 'rust-cargo
                                         :marker-files '("Cargo.toml")
                                         :compile #'rustic-compile
                                         :test    #'rustic-cargo-test
                                         :run     #'rustic-cargo-run))

       ;; Support `compile-multi'.
       (push `((file-exists-p "Cargo.toml")
               ("rust:build" . ,#'rustic-compile)
               ("rust:test" . ,#'rustic-cargo-test)
               ("rust:run" . ,#'rustic-cargo-run))
             compile-multi-config)

       :init
       (push 'rustic-popup-mode +whitespace-exempt-modes)
       (push 'rustic-cargo-test-mode compilation-auto-kill-ignore-modes+)

       :config
       (evil-set-initial-state 'rustic-popup-mode 'emacs)
       (advice-add 'rustic-popup :around #'display-buffer-no-select-window-advice)

       (advice-add 'rustic-compilation :around
                   (defun rustic-compilation-check-window-was-open-p+ (func cmd args)
                     (let* ((buf (or (plist-get args :buffer)
                                     rustic-compilation-buffer-name))
                            (compilation-was-visible (when (get-buffer-window buf t) t)))
                       (with-current-buffer (process-buffer (funcall func cmd args))
                         (setq-local compilation-was-open-p+ compilation-was-visible)))))

       :config
       (modify-syntax! '((?_ . "w")) rust-mode-syntax-table)

       :lazy-leader
       (:mode 'rustic-mode
        "," 'rustic-popup
        "c" 'rustic-compile
        "C" 'rustic-recompile
        "p" 'rustic-cargo-run
        "u" 'rustic-playpen
        "d" 'rustic-cargo-doc

        "b" '(:ignore t :wk "project")
        "bc" 'rustic-cargo-clean
        "bo" 'rustic-cargo-outdated
        "bd" 'rustic-cargo-build-doc

        "t" '(:ignore t :wk "test")
        "tt" 'rustic-cargo-test
        "tT" 'rustic-cargo-test-rerun
        "tb" 'rustic-cargo-bench
        "tc" 'rustic-cargo-check

        "r" '(:ignore t :wk "refactor")
        "rx" 'rustic-rustfix
        "rf" 'rustic-cargo-fmt
        "rc" 'rustic-cargo-clippy))
   #+END_SRC

*** rust-analyzer                                                       :lsp:
    #+begin_src emacs-lisp :tangle (package-yes! rust :lsp)
      (add-hook 'rustic-mode-hook +lsp-command)
    #+end_src

    #+begin_src emacs-lisp :tangle (package-yes! rust lsp-mode)
      (when (package! lsp-mode)
        (add-hook 'rustic-mode-hook #'rustic-lsp-mode-setup))
    #+end_src

** git
   :PROPERTIES:
   :header-args+: :tangle (package-yes! git-langs)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package git-modes
       :straight t
       )
   #+END_SRC

** latex
   :PROPERTIES:
   :header-args+: :tangle (package-yes! latex)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package tex-mode
       :hook ((latex-mode . display-line-numbers-mode)
              (latex-mode . +flylint))
       :custom
       (TeX-electric-math '("\\( " . " \\)"))
       (TeX-auto-save  t)
       (TeX-parse-self t)
       (TeX-source-correlate-start-server t)
       (tex-print-file-extension ".pdf")
       (TeX-auto-private (list (etc! "auctex" "styles")))

       :preface
       (defvaralias 'LaTeX-mode-hook 'latex-mode-hook)

       (defvar latex-modes+ '(latex-mode tex-mode)
         "list of tex related modes. used for leader and pretty symbols.")

       :init
       (setq TeX-auto-local (state! "auctex" "auto"))                                  ; WARN this isn't supposed to be absolute

       (push '(tex-mode   . 2) +indent-config)
       (push '(latex-mode . 2) +indent-config)

       (push 'TeX-output-mode  +whitespace-exempt-modes)
       (push 'TeX-special-mode +whitespace-exempt-modes)

       :config
       (setq latex-standard-block-names
             (append latex-standard-block-names
                     (list "align")))

       (unless (file-exists-p TeX-auto-local)
         (mkdir TeX-auto-local t))

       ;; Show process output buffer on error.
       (advice-add 'TeX-command-sentinel :after
                   (defun TeX-process-error-handler+ (p _msg)
                     (unless (zerop (process-exit-status p))
                       (let* ((buf (TeX-active-buffer))
                              (visible (get-buffer-window buf nil)))
                         (TeX-recenter-output-buffer nil)
                         (unless visible
                           (TeX-pop-to-buffer (TeX-active-buffer)))))))

       ;; for some reason, focus switches back to tex buffer.
       (advice-add 'TeX-recenter-output-buffer :around
                   (defun TeX-recenter-focus (func &rest args)
                     (apply func args)
                     (when (called-interactively-p 'interactive)
                       (TeX-pop-to-buffer (TeX-active-buffer)))))

     ;;; Extend prettify-symbol symbols from `tex--prettify-symbols-alist'.
       (eval
        `(configure-presym! '(,@latex-modes+ org-mode)
           ,@(cl-loop
              for tuple in tex--prettify-symbols-alist
              append (list (car tuple) (cdr tuple)))))

       :leader
       (:mode `(,@latex-modes+ org-mode)
        "{" 'latex-insert-block
        "}" 'latex-close-block)

       :general
       (:keymaps 'latex-mode-map "C-M-i" nil))
   #+END_SRC

*** auctex
    #+BEGIN_SRC emacs-lisp
      (use-package tex-site
        :straight auctex
        :hook ((latex-mode . TeX-fold-mode)
               (latex-mode . TeX-source-correlate-mode)                               ; Lets your PDF-viewer open lines in emacs and the TeX-view command jump to lines in your viewer.
               (latex-mode . TeX-PDF-mode))
        :config
      ;;; Command to insert a math symbol at point
        (defun latex-insert-math+ ()
          (interactive)
          (let* ((cands (cl-labels ((latex--math-collect (L)
                                      (cond ((vectorp L)
                                             (list (cons (aref L 0) (aref L 1))))
                                            ((listp L)
                                             (cl-loop for a in L nconc
                                                      (latex--math-collect a))))))
                          (latex--math-collect LaTeX-math-menu)))
                 (cand (assoc (completing-read "Math symbol: " cands nil t) cands)))
            (call-interactively (cdr cand))))

        :config
      ;;; Make latex automatically repeat the last run command
        (defvar-local TeX-command-last+ nil
          "The last command invoked by TeX in this buffer.")

        (defun TeX-command-smart (&optional prompt override-confirm)
          "`TeX-command-master' but with memory.
      This function works like the master command, however by default it reruns
      the last run command instead of prompting to run the command. You can pass
      a prefix arg to force the prompt to take place."
          (interactive "P")
          (let ((cmd (or (when (or (not TeX-command-last+) prompt)
                           (TeX-command-query (TeX-master-file nil nil t)))
                         TeX-command-last+)))
            (setq TeX-command-last+ cmd)                                               ; update command memory
            (TeX-command cmd 'TeX-master-file override-confirm)))

      ;;; Automatically save the current buffer before running a command
        (defvar TeX-auto-save-when-compile+ t
          "When true don't prompt to save before running a TeX command.")

        (advice-add 'TeX-command :before
                    (defun TeX-command--prompt-to-save+ (&rest _)
                      "Ask to save modified tex buffers, before running commands on them."
                      (when (and (buffer-modified-p)
                                 buffer-file-name
                                 (or TeX-auto-save-when-compile+
                                     (yes-or-no-p (format "Save file %s?" buffer-file-name))))
                        (save-buffer))))

        :config
        (when +TeX-view-in-emacs
          (add-hook 'TeX-after-compilation-finished-functions
                    #'TeX-revert-document-buffer))

        :config
        (with-eval-after-load 'tex
          (setq TeX-view-program-selection
                (append (delq nil (list (when +TeX-view-in-emacs
                                          '(output-pdf "PDF Tools"))
                                        (when (executable-find "zathura")
                                          '(output-pdf "Zathura"))
                                        '(output-html "xopen")))                      ; prefer over xdg-open
                        TeX-view-program-selection)))

        :config
      ;;; Fix annoying emacsclient issues with synctex
        ;; emacs isn't using the path for my server file and there's no way to specify
        ;; both the server TCP file and socket file, so let's just hack it into the editor
        ;; command.
        (with-eval-after-load 'tex
          (push
           `("Zathura"
             ;; Hit C-click in zathura to jump to a point in emacs.
             ("zathura %o"
              (mode-io-correlate
               ,(concat " --synctex-forward %n:0:\"%b\" -x \""
                        (concat "emacsclient "
                                (cond ((unix-p)
                                       (concat
                                        " --socket-name "
                                        (shell-quote-argument (join-path server-socket-dir "server"))))
                                      ((windows-p)
                                       (concat
                                        "--server-file "
                                        (shell-quote-argument (join-path server-auth-dir "server"))))))
                        " +%{line} %{input}\"")))
             "zathura")
           TeX-view-program-list))

        :config
        (defun org-src-setup-auctex+ ()
          (when (eq major-mode 'latex-mode)
            (apply #'TeX-run-style-hooks
                   (mapcar #'cadr org-latex-packages-alist))))
        (add-hook 'org-src-mode-hook #'org-src-setup-auctex+)

        :hook (latex-mode . TeX-setup-next-error-function+)
        :preface
        (defun TeX-setup-next-error-function+ ()
          (setq-local next-error-function 'TeX-next-error))

        :leader
        (:mode `(,@latex-modes+ org-mode)
         "\\" 'TeX-insert-macro)

        :lazy-leader
        (:mode 'TeX-error-overview-mode
         "b" 'TeX-error-overview-toggle-debug-bad-boxes
         "w" 'TeX-error-overview-toggle-debug-warnings
         "s" 'TeX-error-overview-toggle-suppress-ignored-warnings
         "l" 'TeX-error-overview-goto-log)
        (:mode latex-modes+
         "SPC" 'TeX-command-master
         "b" 'LaTeX-environment ;; block but more interactive.
         "," 'TeX-command-smart
         "." 'TeX-command-run-all
         "l" 'TeX-recenter-output-buffer
         "e" 'TeX-error-overview
         "k" 'TeX-kill-job
         "v" 'TeX-view
         "h" 'TeX-doc
         "RET" 'TeX-command-run-all
         "t" 'TeX-font
         "i" 'TeX-insert-macro
         "s" 'LaTeX-section
         "m" 'latex-insert-math+
         "SPC" 'LaTeX-mark-environment                                                ; or LaTeX-mark-section

         ;; preview
         "p"   '(:ignore t :wk "preview")
         "pb"  'preview-buffer
         "pc"  'preview-clearout
         "pd"  'preview-document
         "pe"  'preview-environment
         "pf"  'preview-cache-preamble
         "pp"  'preview-at-point
         "pr"  'preview-region
         "ps"  'preview-section

         ;; fold
         "z" '(:ignore t :wk "fold")
         "z=" 'TeX-fold-math
         "zz" 'TeX-fold-dwim
         "zb" 'TeX-fold-buffer
         "zB" 'TeX-fold-clearout-buffer
         "ze" 'TeX-fold-env
         "zr" 'TeX-fold-region
         "zR" 'TeX-fold-clearout-region
         "zm" 'TeX-fold-macro
         "z\\" 'TeX-fold-macro
         "zp" 'TeX-fold-paragraph
         "zP" 'TeX-fold-clearout-paragraph
         "z%" 'TeX-fold-comment
         "zc" 'TeX-fold-clearout-item

         ;; indentation
         "TAB"   '(:ignore t :wk "indent")
         "TAB b" 'LaTeX-fill-environ
         "TAB p" 'LaTeX-fill-paragra
         "TAB r" 'LaTeX-fill-region
         "TAB s" 'LaTeX-fill-section

         ;; modes
         "M"  '(:ignore t :wk "mode")
         "Mp" 'TeX-PDF-mode ;; toggle between PDF and DVI output.
         "Ms" 'TeX-source-correlate-mode
         "Mi" 'TeX-interactive-mode
         "Mm" 'LaTeX-math-mode

         ;; toggle
         "T"  '(:ignore t :wk "toggle")
         "Tb" 'TeX-toggle-debug-bad-boxes
         "Td" 'TeX-toggle-debug-warnings
         "Ts" 'TeX-toggle-suppress-ignored-warnings)

        :general
        (:states 'motion
         :keymaps 'TeX-error-overview-mode-map
         "o" 'TeX-error-overview-goto-source
         "gj" 'TeX-error-overview-next-error
         "gk" 'TeX-error-overview-previous-error
         "RET" 'TeX-error-overview-jump-to-source
         [remap quit-window] 'TeX-error-overview-quit)
        ;; (:states '(insert emacs)
        ;;  :keymaps 'LaTeX-mode-map
        ;;  "$" 'self-insert-command)
        )
    #+END_SRC

** bibtex
   :PROPERTIES:
   :header-args+: :tangle (package-yes! bibtex)
   :END:

   #+BEGIN_SRC emacs-lisp
     (use-package bibtex
       :hook (bibtex-mode . display-line-numbers-mode)
       :custom
       (bibtex-align-at-equal-sign t)
       (bibtex-include-OPTkey t)
       (orhc-bibtex-cache-file (cache! "orhc-bibtex-cache"))
       (bibtex-autokey-titleword-length nil)                                         ; use all available words and be as long as needed
       (bibtex-autokey-titlewords nil)
       (bibtex-field-delimiters 'double-quotes)                                      ; what I can I say, this just makes sense

       :preface
       (defvaralias 'bibtex-files 'org-cite-global-bibliography)

       :config
       (evil-set-initial-state 'bibtex-mode 'normal)

     ;;; configure bibtex autokey structure: YEARauthor-paper-name
       (defvar bibtex-autokey-year-name-separator+ bibtex-autokey-name-year-separator
         "String to be put between year part and name part of key.
     See ‚Äòbibtex-generate-autokey‚Äô for details.")

       (defvar bibtex-autokey-name-title-separator+ bibtex-autokey-year-title-separator
         "String to be put between year part and name part of key.
     See ‚Äòbibtex-generate-autokey‚Äô for details.")

       (setq bibtex-autokey-year-name-separator+ ""
             bibtex-autokey-name-title-separator+ "-"
             bibtex-autokey-titleword-separator "-")

       (advice-add #'bibtex-generate-autokey :override
                   (defun bibtex-generate-autokey+ ()
                     (let* ((names (bibtex-autokey-get-names))
                            (year (bibtex-autokey-get-year))
                            (title (bibtex-autokey-get-title))
                            (autokey (concat bibtex-autokey-prefix-string
                                             year
                                             (unless (or (equal names "")
                                                         (equal year ""))
                                               bibtex-autokey-year-name-separator+)
                                             names
                                             (unless (or (and (equal names "")
                                                              (equal year ""))
                                                         (equal title ""))
                                               bibtex-autokey-name-title-separator+)
                                             title)))
                       (if bibtex-autokey-before-presentation-function
                           (funcall bibtex-autokey-before-presentation-function autokey)
                         autokey))))

     ;;; Reset the annoying `fill-prefix' behaviour in bibtex.
       (add-hook 'bibtex-mode-hook
                 (defun bibtex-mode-setup+ ()
                   ;; 18 space indent... no thank you.
                   (setq-local fill-prefix nil)))

       (advice-add 'bibtex-clean-entry :around
                   (defun bibtex-reset-fill-prefix+ (func &rest args)
                     (let ((fill-prefix (make-string (1+ bibtex-text-indentation) ? )))
                       (apply func args))))

       ;; unused bindings
       ;; C-c C-y         bibtex-yank
       ;; C-c M-y         bibtex-yank-pop
       ;; TAB             bibtex-find-text
       ;; C-j             bibtex-next-field

       :lazy-leader
       (:mode 'bibtex-mode
        "," 'bibtex-clean-entry
        "r" 'bibtex-entry-update                                ; fill-out templates for missing fields in the current entry.
        "g" 'bibtex-search-entry
        "n" 'bibtex-narrow-to-entry
        "w" 'widen
        "m" 'bibtex-mark-entry
        "?" 'bibtex-print-help-message
        "u" 'bibtex-url                                         ; opens the url for the current entry (if there is one).
        "-" 'bibtex-fill-entry
        "x" 'bibtex-kill-entry
        "s" 'bibtex-search-crossref
        "j" 'bibtex-pop-next                                    ; fill out current field with similair value from next entry.
        "k" 'bibtex-pop-previous                                ; same as above but the previous entry.
        "o"   'bibtex-remove-OPT-or-ALT
        "C-o" 'bibtex-remove-OPT-or-ALT

        "y" '(:ignore t :wk "yank")
        "ys" 'bibtex-copy-summary-as-kill
        "yf" 'bibtex-copy-field-as-kill
        "yy" 'bibtex-copy-entry-as-kill

        "DEL" 'bibtex-empty-field
        "f" 'bibtex-make-field
        "d" 'bibtex-kill-field

        "i"    '(:ignore t :wk "insert")
        "ii"   'bibtex-entry
        "ip"   'bibtex-Preamble
        "ia"   'bibtex-Article
        "im"   'bibtex-Misc
        "ic"   'bibtex-InCollection
        "is"   'bibtex-String
        "ir"   'bibtex-TechReport
        "iu"   'bibtex-Unpublished
        "ib"   'bibtex-Book
        "iB"   'bibtex-InBook
        "il"   'bibtex-Booklet
        "ip"   'bibtex-Proceedings
        "iP"   'bibtex-InProceedings
        "i RET" 'bibtex-Manual

        "it"    '(:ignore t :wk "thesis")
        "itP"   'bibtex-PhdThesis
        "itm"   'bibtex-MastersThesis)

       :general
       (:keymaps 'bibtex-mode-map "TAB" "C-j")
       (:keymaps 'bibtex-mode-map
        :states 'normal
        "gh" 'bibtex-beginning-of-entry
        "gk" 'bibtex-previous-entry
        "gj" 'bibtex-next-entry
        "gl" 'bibtex-end-of-entry))
   #+END_SRC

*** company-bibtex                                                      :comp:
    #+BEGIN_SRC emacs-lisp :tangle (package-yes! bibtex company)
      (use-package company-bibtex
        :straight t
        :after (company bibtex)
        :init
        (add-to-list 'company-backends 'company-bibtex)
        (setq company-bibtex-bibliography bibtex-files))
    #+END_SRC

*** bibtex-completion
    #+BEGIN_SRC emacs-lisp
      (use-package bibtex-completion
        :straight (bibtex-completion :host github :repo "mohkale/helm-bibtex")
        :commands (bibtex-insert-pdfbib-link+)
        :custom
        (bibtex-completion-library-path (list
                                         +docs-home
                                         (join-path +docs-home "unidocs/")))
        (bibtex-completion-pdf-extension '(".pdf" ".epub" ".pptx" ".doc" ".docx"))
        (bibtex-completion-pdf-open-function '+xopen-url)

        :preface
        (defvaralias 'bibtex-completion-bibliography 'org-cite-global-bibliography)

        :config
        ;; Something seems to be resetting this so I'm deferring its assignment
        ;; for now.
        (setq bibtex-completion-notes-path (join-path +notes-home "bibnotes"))

        :custom
        (bibtex-completion-additional-search-fields nil)
        (bibtex-completion-display-formats
         '((t . "${=has-pdf=:2}${=has-note=:2} ${year:4} ${title:*} ${author:36}")))

        :init
        (with-eval-after-load 'all-the-icons
          (setq
           bibtex-completion-pdf-symbol   (all-the-icons-pad+ (+icon nerd-oct "file-pdf" :face '(:weight normal :inherit)))
           bibtex-completion-notes-symbol (all-the-icons-pad+ (+icon fileicon "org" :face '(:weight normal :inherit)))))

        :config
        (defun bibtex-completion-format-citation-org-mode-cite+ (keys)
          "Format cite references for keys in KEYS for `org-mode'."
          (s-join ", " (--map (format "cite:%s" it) keys)))

        (setq bibtex-completion-format-citation-functions
              '((org-mode      . bibtex-completion-format-citation-org-mode-cite+)
                (latex-mode    . bibtex-completion-format-citation-cite)
                (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
                (default       . bibtex-completion-format-citation-default)))

        (defun bibtex-insert-pdfbib-link+ (keys)
          (let* ((region-was-active (region-active-p))
                 (beg (if region-was-active
                          (region-beginning)
                        (point)))
                 (end (if region-was-active
                          (region-end)
                        (point)))
                 (default-contents (when region-was-active
                                     (prog1 (buffer-substring beg end)
                                       (delete-region beg end)))))
            (condition-case _
                (dolist (key keys)
                  (insert
                   (concat "[[pdfbib:" key "::"
                           (read-from-minibuffer "Page: " "1") "]["
                           (read-string "Description: " default-contents nil key)
                           "]]")))
              ((error quit)
               (when default-contents
                 (delete-region beg (point))
                 (insert default-contents)
                 (set-mark beg)))))))
    #+END_SRC

*** ebib
    biblatex/bibtex database management interface for emacs. TODO read [[https://joostkremers.github.io/ebib/ebib-manual.html][manual]].

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! ebib bibtex)
      (use-package ebib
        :straight t
        :custom
        (ebib-notes-directory +notes-home)

        :init
        (defvaralias 'ebib-preload-bib-files 'org-cite-global-bibliography)

        :config
        (mkdir (state! "ebib") t)

        (setq ebib-keywords (state! "ebib/keywords")
              ebib-reading-list-file (join-path +notes-home "reading-list.org"))

        ;; make ebib index use evil-motion-state
        (evil-set-initial-state 'ebib-index-mode 'motion)
        (evil-make-overriding-map ebib-index-mode-map 'motion)
        (push 'ebib-index-mode +whitespace-exempt-modes)

        ;;; ebib-log-mode
        (push 'ebib-entry-mode +whitespace-exempt-modes)
        (evil-set-initial-state 'ebib-entry-mode 'motion)
        (evil-make-overriding-map ebib-entry-mode-map 'motion)

        :lazy-leader
        ("ox" 'ebib)
        (:mode 'ebib-index-mode
         "i" 'ebib-add-entry                                     ; also just bound to a
         "u" 'ebib-browse-url                                    ; also just bound to u
         "s" 'ebib-switch-to-database-nth
         "a" 'ebib-show-annotation
         "n" 'ebib-open-note
         "g" 'ebib-jump-to-entry
         "." 'ebib-toggle-hidden
         "b" 'ebib-browse-doi
         "F" 'ebib-view-file                                     ; open file referenced by current entry
         "!" 'ebib-generate-autokey

         "e" '(:ignore t :wk "edit")
         "ee" 'ebib-edit-keyname
         "ep" 'ebib-edit-preamble
         "es" 'ebib-edit-strings

         "f" '(:ignore t :wk "filters")
         "f" ebib-filters-map

         "k" '(:ignore t :wk "keywords")
         "k" ebib-keywords-map

         "d" '(:ignore t :wk "dependent")
         "d" ebib-dependent-map)
        (:mode 'ebib-entry-mode
         "f" 'ebib-view-file-in-field                                           ; TODO find out what this does
         "h" 'ebib-view-field-as-help
         "u" 'ebib-browse-url)

        :general
        (:keymaps 'ebib-index-mode-map
         "C-n" nil ; was ebib-next-entry
         "C-p" nil ; was ebib-prev-entry
         "n"   nil
         "p"   nil
         "?"   nil ; was ebib-search-next
         "SPC" nil ; was ebib-index-scroll-up
         "|"   nil ; was ebib-filters-logical-or
         "~"   nil ; was ebib-filters-logical-not
         "&"   nil ; was ebib-filters-logical-and
         "g"   nil ; was ebib-goto-first-entry
         "1" nil "2" nil "3" nil "4" nil "5" nil "6" nil "7" nil "8" nil "9" nil ; was ebib-switch-to-database-key
         "o"   nil ; was ebib-open-bibtex-file
         "J"   nil ; was ebib-switch-to-database-nth
         "H"   nil ; was ebib-toggle-hidden
         "i"   nil ; was ebib-push-citation
         "h"   nil ; was ebib-index-help
         "Z"   nil ; was ebib-lower
         "b"   nil ; was ebib-index-scroll-down
         "f"   nil ; was ebib-view-file
         "X"   nil ; was ebib-export-preamble
         "I"   nil ; was ebib-browse-doi
         )
        (:keymaps 'ebib-index-mode-map
         :states  'motion
         ;; setup exit and reset commands
         [remap quit-window] 'ebib-leave-ebib-windows            ; leaves buffers alive, just hides windows.
         "gq"                'ebib-quit                          ; kills buffers and windows.
         [remap revert-buffer]  'ebib-reload-current-database
         "gR"                   'ebib-reload-all-databases

         ;; allow using ex commands for evil stuff.
         [remap evil-write]     'ebib-save-current-database
         [remap evil-write-all] 'ebib-save-all-databases

         ;; evil-like motions
         "C-u" 'ebib-index-scroll-down
         "C-d" 'ebib-index-scroll-up
         "C-b" 'ebib-index-scroll-down
         "C-f" 'ebib-index-scroll-up
         "gg"  'ebib-goto-first-entry
         "G"   'ebib-goto-last-entry
         "j"   'ebib-next-entry
         "k"   'ebib-prev-entry
         "gj"  'ebib-next-database
         "gk"  'ebib-prev-database
         "n"   'ebib-search-next

         ;; evil like yank, delete, paste
         "y" 'ebib-kill-entry
         "x" 'ebib-delete-entry                                  ; also bound to d
         "p" 'ebib-yank-entry                                    ; paste yanked entry

         "e" 'ebib-open-bibtex-file                              ; edit-file
         "h" 'ebib-show-log
         "l" 'ebib-edit-entry
         "o" 'ebib-edit-entry
         "RET" 'ebib-edit-entry

         "ss" 'ebib-export-entries                               ; save-as
         "sp" 'ebib-export-preamble                              ; save-preamble-as
         ;; configure sorting
         "sa" 'ebib-index-sort-ascending
         "sd" 'ebib-index-default-sort
         "sd" 'ebib-index-sort-descending)
        (:keymaps 'ebib-log-mode-map
         :states 'motion
         [remap quit-window] 'ebib-quit-log-buffer)
        (:keymaps 'ebib-entry-mode-map
         "g"   nil ; ebib-goto-first-field
         "n"   nil ; ebib-next-field
         "p"   nil ; ebib-prev-field
         "v"   nil ; ebib-view-field-as-help
         "c"   nil ; ebib-copy-field-contents
         "SPC" nil ; ebib-goto-next-set
         "b"   nil ; ebib-goto-prev-set
         "h"   nil ; ebib-entry-help
         "k"   nil ; ebib-kill-field-contents
         ;; r               ebib-toggle-raw
         ;; s               ebib-insert-abbreviation
         )
        (:keymaps 'ebib-entry-mode-map
         ;; allow using ex commands for evil stuff.
         [remap evil-write]     'ebib-save-current-database
         [remap evil-write-all] 'ebib-save-all-databases

         "C-u" 'ebib-goto-prev-set
         "C-d" 'ebib-goto-next-set
         "C-b" 'ebib-goto-prev-state
         "C-f" 'ebib-goto-next-set
         "gg" 'ebib-goto-first-field
         "G"  'ebib-goto-last-field
         "gj" 'ebib-next-field
         "gk" 'ebib-prev-field

         "c" 'ebib-edit-field
         "e" 'ebib-edit-field
         "i" 'ebib-edit-field
         ;; "m" 'ebib-edit-multiline-field
         ;; "x" 'ebib-delete-field-contents
         "d" 'ebib-kill-field-contents
         "x" 'ebib-kill-field-contents

         "y" 'ebib-copy-field-contents
         "p" 'ebib-yank-field-contents

         "o" 'ebib-quit-entry-buffer
         "q" 'ebib-quit-entry-buffer))
    #+END_SRC

** org
   :PROPERTIES:
   :header-args+: :tangle (package-yes! org)
   :END:

   The quintessential plain-text editing and writing package for emacs. It ranges
   from a basic writing utility to a spread-sheet engine or even a time-sheet
   manager.

   First we need to define some aliases due to some migration errors. See [[https://emacs.stackexchange.com/questions/58994/symbol-s-value-as-variable-is-void-org-priority-highest-using-org-agenda][here]].

   #+begin_src emacs-lisp
     (defvaralias 'org-highest-priority 'org-priority-highest)
     (defvaralias 'org-lowest-priority 'org-priority-lowest)
     (defvaralias 'org-default-priority 'org-priority-default)
   #+end_src

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :straight t
       :hook ((org-mode . display-line-numbers-mode)
              (org-mode . auto-fill-mode))
       :custom
       (org-clock-idle-time 15)
       (org-fontify-done-headline nil)
       (org-archive-file-header-format "\
     # -*- mode: org; coding: utf-8-unix -*-
     ,#+TITLE: Archive
     ,#+STARTUP: content")
       (org-goto-interface 'outline-path-completion)
       (org-log-done 'time)                                                          ; Record when a TODO item is done.
       (org-outline-path-complete-in-steps nil)                                      ; Refile in a single go
       (org-cycle-separator-lines 0)                                                 ; Prevents weird coloring of collapsed trees
       (org-log-into-drawer "LOGBOOK")                                               ; Where org-add-note stores notes
       (org-todo-keywords (list
                           '(sequence "TODO" "DOING" "VERIFY" "|" "DONE" "DELAGATED" "SKIPPED")))
       (org-refile-use-outline-path t)                                               ; Show full paths for refiling
       (org-archive-location (concat (join-path +notes-home "archive.org") "::* %s"))                 ; Archive to the same file from everywhere
       (org-refile-targets (list
                            (cons (join-path user-emacs-directory "init.org") '(:maxlevel . 1))
                            (cons nil '(:maxlevel . 9))
                            (cons 'org-agenda-files '(:maxlevel . 2))))
       (org-highlight-latex-and-related '(latex script entities))
       (org-adapt-indentation t)

       :init
       (push '(org-mode . 2) +indent-config)

       (modify-syntax-hook! 'org-mode
         '((?< . "_")
           (?> . "_")
           (?- . "w")
           (?_ . "w")))

       (add-hook 'org-mode-hook
                 (defun org-disable-electric-balance+ ()
                   (setq electric-pair-preserve-balance t)))

       :config
       (setq org-cite-global-bibliography
             (when (file-exists-p +bib-home)
               (directory-files +bib-home t ".bib")))

       :config
       (setq org-agenda-files
             (cl-remove-if
              (apply-partially #'string-match-p (rx (and "archive.org" eol)))
              (cl-loop for path in (list org-default-notes-file
                                         (concat projectile-org-projects-directory+ "*.org"))
                       nconc (file-expand-wildcards path))))

       :config
       ;; Prefer xopen to whatever mailcap plans to use.
       (setq org-file-apps
             (append org-file-apps
                     `((t . ,(defun org-open-file-xopen+ (path _link)
                               (+xopen-url path))))))

       :init
       (advice-add 'evil-ret-gen :before-until
                   (defun evil-ret-open-org-links+ (&rest _)
                     "hitting return in evil-normal-state on an org-link
     opens the org-link."
                     (when (and
                            (evil-normal-state-p)
                            (or (featurep 'org)
                                (bound-and-true-p org-link-minor-mode))
                            (ignore-errors
                              (org-openable-p)))
                       (org-open-at-point)
                       t)))

       (defmacro evil-org-eol-call-anon (&rest body)
         "define an anonymous function running body at the end of the line"
         `(lambda! (end-of-visual-line) ,@body (evil-append nil)))

       (defmacro org-read-date-command (name &rest body)
         "define a function for use in the calendar buffer for `calendar-read-date'."
         `(defun ,(intern (concat "org-read-date-" (symbol-name name) "+")) ()
            ,(when (stringp (car body))
               (concat (pop body) "\nThis function was generated by `org-read-date-command'."))
            (interactive)
            (org-eval-in-calendar (quote (progn ,@body)))))
       (put 'org-read-date-command 'lisp-indent-function 'defun)

       :config
       (let ((dir (file-name-directory org-id-locations-file)))
         (unless (file-exists-p dir)
           (make-directory dir t)))

       :config
       (setq org-read-date-minibuffer-local-map (make-sparse-keymap))
       (set-keymap-parent org-read-date-minibuffer-local-map minibuffer-local-map)

       ;;             _ _       _     _           _ _
       ;;   _____   _(_) |     | |__ (_)_ __   __| (_)_ __   __ _ ___
       ;;  / _ \ \ / / | |_____| '_ \| | '_ \ / _` | | '_ \ / _` / __|
       ;; |  __/\ V /| | |_____| |_) | | | | | (_| | | | | | (_| \__ \
       ;;  \___| \_/ |_|_|     |_.__/|_|_| |_|\__,_|_|_| |_|\__, |___/
       ;;                                                   |___/

       (evil-set-command-property 'org-forward-heading-same-level :jump t)
       (evil-set-command-property 'org-backward-heading-same-level :jump t)
       (evil-set-command-property 'org-next-visible-heading :jump t)

       :config
       (add-to-list 'org-latex-default-packages-alist '("" "babel" t nil) t)

       :leader
       ("o"  '(:ignore t :wk "org-notes")
        "oc" 'org-capture
        "og" 'org-capture-goto-last-stored
        "oa" 'org-agenda
        "ol" 'org-store-link
        "oi" 'org-insert-link-global
        "oy" 'org-copy-subtree
        "oY" 'org-cut-subtree
        "on" 'org-next-link
        "op" 'org-previous-link

        "oh" 'org-completing-goto+)

       :lazy-leader
       (:mode 'org-mode
        "RET" 'org-ctrl-c-ret
        "TAB" 'org-todo
        "SPC" 'org-display-outline-path
        "!" 'org-time-stamp-inactive
        "'" 'org-edit-special
        "*" 'org-ctrl-c-star
        "," 'org-ctrl-c-ctrl-c
        "-" 'org-ctrl-c-minus
        "." 'org-time-stamp
        "/" 'org-sparse-tree
        ":" 'org-set-tags-command
        "#" 'org-priority
        "`" 'org-toggle-latex-fragment
        "^" 'org-sort
        ;; "\\" 'org-match-sparse-tree
        "A" 'org-agenda
        "a" 'org-archive-subtree
        "b" 'org-tree-to-indirect-buffer
        ;; "C" 'evil-org-recompute-clocks
        "D" 'org-insert-drawer
        "d" 'org-deadline
        "F" 'org-set-effort
        "i" 'org-clock-in
        "H" 'org-shiftleft
        "J" 'org-shiftdown
        "K" 'org-shiftup
        "L" 'org-shiftright
        "l" 'org-insert-link
        "N" 'org-add-note
        "o" 'org-clock-out
        "O" 'org-sort
        "p" 'org-set-property
        "q" 'org-set-tags-command
        "r" 'org-refile
        "R" 'org-refile-goto-last-stored
        "s" 'org-schedule
        "T" 'org-show-todo-tree
        "X" 'org-update-all-dblocks
        "x" 'org-dblock-update
        "u" 'org-id-get-create
        ;; "C-h" 'org-shiftcontrolleft
        ;; "C-j" 'org-shiftcontroldown
        ;; "C-k" 'org-shiftcontrolup
        ;; "C-l" 'org-shiftcontrolright
        "M-a" 'org-attach
        "M-c" 'org-columns
        "M-p" 'org-delete-property

        "c"  '(:ignore t :wk "clock/calendar")
        "c<" 'org-date-from-calendar
        "c>" 'org-goto-calendar
        "cC" 'org-clock-out
        "cc" 'org-clock-in
        ;; "cf" 'org-clock-modify-effort-estimate
        "cg" 'org-clock-goto
        "ch" 'org-clock-remove-overlays
        "ci" 'org-timer-item
        "cr" 'org-clock-report
        "cs" 'org-clock-display
        "c C-c" 'org-clock-cancel

        "e"  '(:ignore t :wk "export")
        "ee" 'org-export-dispatch
        "eh" 'org-html-export-to-html
        "ep" (lambda!
               (org-latex-export-to-pdf org-export-in-background))

        "h"  '(:ignore t :wk "headings")
        "hI" 'org-insert-heading
        "hi" 'org-insert-heading-after-current
        "hs" 'org-insert-subheading

        "I"  '(:ignore t :wk "insert")
        "Ia" 'org-attach
        "If" 'org-footnote-new
        ;; "Ik" 'insert-keybinding-org
        "It" 'org-table-create
        ;; "Is" 'org-download-screenshot
        ;; "Iy" 'org-download-yank

        "m"  '(:ignore t :wk "mark/move")
        "ms" 'org-mark-subtree
        "me" 'org-mark-element
        "mb" 'org-babel-mark-block

        "n"  '(:ignore t :wk "narrow")
        "nb" 'org-narrow-to-block
        "ns" 'org-narrow-to-subtree
        "ne" 'org-narrow-to-element
        "nw" 'widen

        "S"  '(:ignore t :wk "subtrees")
        "Sh" 'org-promote-subtree
        "Sj" 'org-move-subtree-down
        "Sk" 'org-move-subtree-up
        "Sl" 'org-demote-subtree

        "t" '(:ignore t :wk "tables")
        "t'"  'org-table-edit-field
        "ta"  'org-table-align
        "tb"  'org-table-blank-field
        "tc"  'org-table-convert
        "tE"  'org-table-export
        "te"  'org-table-eval-formula
        "tH"  'org-table-move-column-left
        "th"  'org-table-previous-field
        "tI"  'org-table-import
        "tJ"  'org-table-move-row-down
        "tj"  'org-table-next-row
        "tK"  'org-table-move-row-up
        "tL"  'org-table-move-column-right
        "tl"  'org-table-next-field
        "tN"  'org-table-create-with-table.el
        "tn"  'org-table-create
        "tp"  'org-plot/gnuplot
        "tr"  'org-table-recalculate
        "ts"  'org-table-sort-lines
        "tw"  'org-table-wrap-region

        "td"  '(:ignore t :wk "delete")
        "tdc" 'org-table-delete-column
        "tdr" 'org-table-delete-row

        "ti"  '(:ignore t :wk "insert")
        "tic" 'org-table-insert-column
        "ti-" 'org-table-hline-and-move
        "tih" 'org-table-insert-hline
        "tir" 'org-table-insert-row

        "tt"  '(:ignore t :wk "toggle")
        "tta" 'org-toggle-async-export+
        "ttf" 'org-table-toggle-formula-debugger
        "tto" 'org-table-toggle-coordinate-overlays

        ;; "x"  '(:ignore t :wk "text")
        ;; "xb" 'org-bold
        ;; "xc" 'org-code
        ;; "xi" 'org-italic
        ;; "xr" 'org-clear
        ;; "xs" 'org-strike-through
        ;; "xu" 'org-underline
        ;; "xv" 'org-verbose
        )

       :general
       (:keymaps 'org-mode-map
        ;; "C-M-<return>" 'org-meta-return
        "<C-tab>" nil
        "M-S-<return>" nil
        "C-e" nil
        "M-e" nil
        "M-h" nil
        "C-j" nil)
       (:keymaps 'org-mode-map
        :states 'insert
        "DEL" 'org-delete-backward-char
        "<S-backspace>" 'org-delete-char)
       (:keymaps 'org-mode-map
        :states 'normal
        "o" (lambda!
             (let ((org-clever-return--insert-headings t))
               (org-clever-return nil)))
        "O" (lambda!
             (let ((org-clever-return--insert-headings t))
               (org-clever-return t)))
        ;; "M-u" 'org-metaleft
        ;; "M-i" 'org-metadown
        ;; "M-o" 'org-metaup
        ;; "M-p" 'org-metaright
        ;; "M-U" 'org-shiftmetaleft
        ;; "M-I" 'org-shiftmetadown
        ;; "M-O" 'org-shiftmetaup
        ;; "M-P" 'org-shiftmetaright
        )
       (:keymaps 'org-mode-map
        :states '(normal insert)
        ;; NOTE meta keys insert headings with changed priority, shift keys insert todo headings
        ;; FIXME prefix arg doesn't work
        "C-<return>"   (evil-org-eol-call-anon
                        (org-insert-heading nil))

        "C-M-<return>" (evil-org-eol-call-anon
                        (org-insert-heading nil)
                        (if current-prefix-arg
                            (org-metaleft)
                          (org-metaright)))

        "C-S-<return>"   (evil-org-eol-call-anon
                          (org-insert-todo-heading nil))

        "C-S-M-<return>" (evil-org-eol-call-anon
                          (org-insert-todo-heading nil)
                          (if current-prefix-arg
                              (org-metaleft)
                            (org-metaright)))

        ;; "C-." 'org-toggle-heading
        )
       ;; Most evil bindings taken from [[https://github.com/edwtjo/evil-org-mode][evil-org-mode]].
       (:keymaps 'org-mode-map
        :states '(normal visual)
        "gj" 'org-forward-heading-same-level
        "gk" 'org-backward-heading-same-level
        "gl" 'outline-next-visible-heading
        "$" 'org-end-of-line
        "^" 'org-beginning-of-line)
       (:keymaps 'org-mode-map
        :states  'visual
        "gb" 'org-babel-mark-block
        "gB" 'org-mark-element)
       (:keymaps 'org-mode-map
        :states '(normal visual)
        :predicate '(or (org-table-p t)
                        (org-at-heading-p)
                        (org-at-item-p))
        [remap drag-stuff-down] 'org-metadown
        [remap drag-stuff-up]   'org-metaup)
       ;; navigate throught tables or lists with tab in insert state.
       (:keymaps 'org-mode-map
        :states 'insert
        :predicate '(or (org-table-p t)
                        (org-at-heading-p)
                        (org-at-item-p))
        "TAB"     'org-cycle
        "<S-tab>" 'org-shifttab)
       (:keymaps 'org-mode-map
        :states '(normal visual emacs)
        "<tab>"   'org-cycle
        "TAB"     'org-cycle
        "<S-tab>" 'org-shifttab)
       (:keymaps 'org-mode-map
        :states '(normal insert visual)
        :predicate '(org-at-heading-p)
        [remap evil-shift-right] 'org-demote-subtree
        [remap evil-shift-left]  'org-promote-subtree
        [remap evil-shift-right-line] 'org-demote-subtree
        [remap evil-shift-left-line]  'org-promote-subtree)
       (:keymaps 'org-read-date-minibuffer-local-map
        ;; haven't implemented backward year, or forward year... cause when will
        ;; I ever need those.
        "C-M-j" 'exit-minibuffer
        "C-j" (org-read-date-command forward-week   (calendar-forward-week 1))
        "C-k" (org-read-date-command backward-week  (calendar-backward-week 1))
        "C-h" (org-read-date-command backward-day   (calendar-backward-day 1))
        "C-l" (org-read-date-command forward-day    (calendar-forward-day 1))
        "C-n" (org-read-date-command forward-month  (calendar-forward-month 1))
        "C-p" (org-read-date-command backward-month (calendar-backward-month 1))
        "<"   (org-read-date-command scroll-left    (calendar-scroll-left 1))
        ">"   (org-read-date-command scroll-right   (calendar-scroll-right 1))
        "!"   (org-read-date-command view-diary     (diary-view-entries))
        "."   (org-read-date-command goto-today
                "when at end of prompt, goto today in calendar."
                (if (looking-back "^[^:]+: "
                                  (let ((inhibit-field-text-motion t))
                                    (line-beginning-position)))
                    (org-eval-in-calendar '(calendar-goto-today))
                  (insert ".")))))
   #+END_SRC

*** org-babel
    Deals with evaluating and substituting code-blocks in ~org-mode~.

    #+begin_src emacs-lisp
      (use-package ob
        :custom
        (org-confirm-babel-evaluate nil)
        (org-babel-load-languages nil)

        :init
        (defun org-babel-lazy-load-languages+ (&rest langs)
          "Proxy for `org-babel-do-load-languages' that can defer loading."
          (let ((loaded (and (boundp 'org-babel-load-languages)
                             (default-value 'org-babel-load-languages)))
                (new-langs (cl-loop for it in langs collect (cons it t))))
            ;; `org-babel-do-load-languages' has this weird signature where
            ;; once you call it, it overrides the existing value of
            ;; `org-babel-load-languages', so even if you have some languages
            ;; already setup they can't be evaluated. This fixes that.
            (condition-case err
                (org-babel-do-load-languages 'org-babel-load-languages new-langs)
              (error (set-default 'org-babel-load-languages loaded)
                     (signal (car err) (cdr err))))
            (set-default 'org-babel-load-languages (append new-langs loaded))))

        :config
        ;; Some langs don't need any further deferring.
        (org-babel-do-load-languages 'org-babel-load-languages
         ;; Note: We haven't setup gnuplot, ditaa, plantuml and R.
         '((emacs-lisp . t)
           (latex . t)))

        ;; Add load hooks for the rest of the available languages I may use.
        (with-eval-after-load 'python (org-babel-lazy-load-languages+ 'python))
        (with-eval-after-load 'cc-mode (org-babel-lazy-load-languages+ 'C 'java 'haskell))
        (with-eval-after-load 'js       (org-babel-lazy-load-languages+ 'js))
        (with-eval-after-load 'js2-mode (org-babel-lazy-load-languages+ 'js))
        (with-eval-after-load 'shell (org-babel-lazy-load-languages+ 'shell))
        (with-eval-after-load 'cc-awk (org-babel-lazy-load-languages+ 'awk))
        (with-eval-after-load 'sed-mode (org-babel-lazy-load-languages+ 'sed))
        ;; Deferring these doesn't do anything for load-time, it's just because
        ;; I use them so rarely. If you want them loaded just insert a src-code
        ;; block with their format and it'll be available from then onwards.
        (with-eval-after-load 'sql (org-babel-lazy-load-languages+ 'sql))
        (with-eval-after-load 'ruby-mode (org-babel-lazy-load-languages+ 'ruby))
        (with-eval-after-load 'haskell-mode (org-babel-lazy-load-languages+ 'haskell))

        :config
        (setq org-babel-default-header-args:emacs-lisp '((:lexical . "yes")))

        (let ((lob-file (etc! "babel-lib.org")))
          (when (file-exists-p lob-file)
            (org-babel-lob-ingest lob-file))))
    #+end_src

*** org-agenda
    #+BEGIN_SRC emacs-lisp
      (use-package org-agenda
        :config
        (evil-set-initial-state 'org-agenda-mode 'motion)

        :lazy-leader
        (:mode 'org-agenda-mode
         "A" 'org-agenda-append-agenda
         "C" 'org-agenda-columns

         ;;; filter/search
         "/"  '(:ignore t :wk "filter/search")
         "/c" 'org-agenda-filter-by-category
         "/e" 'org-agenda-filter-by-effort
         "//" 'org-agenda-filter-by-regexp
         ;; "/t" 'org-agenda-filter-by-tag
         "/:" 'org-agenda-filter-by-tag
         "/h" 'org-agenda-filter-by-top-headline
         "/R" 'org-agenda-filter-remove-all

         "/?" 'org-agenda-bulk-mark-regexp
         "/a" 'org-agenda-bulk-mark-all
         "/u" 'org-agenda-bulk-unmark-all

         ;;; clock/calendar/diary
         "c"  '(:ignore t :wk "clock/calendar")
         "cp" 'org-agenda-date-prompt
         "cc" 'org-agenda-clock-in
         "co" 'org-agenda-clock-out
         "cC" 'org-agenda-clock-out ; alias
         "ct" 'org-timer-set-timer
         "c M-c" 'org-agenda-convert-date

         ;;; agenda minor modes
         "m"  '(:ignore t :wk "modes")
         "ma" 'org-agenda-archives-mode
         "md" 'org-agenda-day-view
         "mc" 'org-agenda-clockreport-mode
         "mt" 'org-agenda-entry-text-mode
         "mf" 'org-agenda-follow-mode
         "ml" 'org-agenda-log-mode
         "mw" 'org-agenda-week-view
         "my" 'org-agenda-year-view
         "mm" 'org-agenda-month-view

         ;;; priorities
         "p"  '(:ignore t :wk "priority")
         "pp" 'org-agenda-priority
         "pu" 'org-agenda-priority-up
         "pd" 'org-agenda-priority-down)

        :general
        (:keymaps 'org-agenda-mode-map
         :states  'motion
          ;;; globally useful
         [remap quit-window] 'org-agenda-exit
         "." 'org-agenda-goto-today
         "v" 'org-agenda-view-mode-dispatch
         "RET" 'org-agenda-goto
         "TAB" 'org-agenda-switch-to
         "M-c" 'org-agenda-clock-goto ; jumped to clocking task
         "C-t" 'org-agenda-todo
         "M-t" 'org-agenda-show-tags

          ;;; marking
         "C-<SPC>" 'org-agenda-bulk-mark
         "M-<SPC>" 'org-agenda-bulk-unmark
         "C-M-SPC" 'org-agenda-bulk-action

          ;;; undo/redo
         "C-r" 'org-agenda-redo
         "u"   'org-agenda-undo
         "gr"        'org-agenda-redo-all

          ;;; toggle displays
         "gm" 'org-agenda-phases-of-moon
         "C-l" 'org-agenda-log-mode
         "M-l" 'org-agenda-toggle-time-grid
         "M-h" 'org-agenda-holidays
         "M-s" 'org-agenda-sunrise-sunset

         ;; edit org items
         "M-e" 'org-agenda-set-effort
         "C-a" 'org-agenda-archive-default-with-confirmation

          ;;; notes and insertion
         "a"  'org-agenda-add-note
         "c"  'org-agenda-capture
         "gd" 'org-agenda-goto-date
         "gc" 'org-agenda-goto-calendar

          ;;; movement between lines
          ;;; NOTE org-next/prev-line is used by follow-mode
         "k"      'org-agenda-previous-line
         "j"      'org-agenda-next-line
         "<up>"   'org-agenda-previous-line ; alias
         "<down>" 'org-agenda-next-line     ; alias
         "C-j"    'org-agenda-next-item
         "C-k"    'org-agenda-previous-item

          ;;; move through time in blocks
         "f" 'org-agenda-later
         "F" 'org-agenda-earlier

         "C-f" 'org-agenda-follow-mode
         "M-f" 'org-agenda-recenterstates))
    #+END_SRC

*** org-contrib
    #+BEGIN_SRC emacs-lisp
      (use-package org-contrib
        :straight t
        :after org
        :init
      ;;; org-eldoc
        (require 'org-eldoc)                                                          ; automatically sets up a hook to enable in org-mode buffers

        (defun org-eldoc-get-link+ (&rest _)
          "When point is on a link, show the link destination in eldoc.
      To make links more informative, you can attach the special :eldoc property,
      this function will be passed the link and the result will be shown in the
      echo area."
          (when-let ((ctx (org-element-lineage (org-element-context) '(link) t)))
            (let ((value (org-element-property :path ctx))
                  (type (org-element-property :type ctx)))
              (or
               (when-let ((eldoc (org-link-get-parameter type :eldoc)))
                 (ignore-errors (funcall eldoc value)))
               value))))

        (advice-add 'org-eldoc-documentation-function :before-until #'org-eldoc-get-link+)

      ;;; org-man
        (require 'ol-man)
        (setq org-man-command +man-command)

      ;;; org-notmuch
        (when (package! notmuch)
          (require 'ol-notmuch)))
    #+END_SRC

*** org-capture
    :PROPERTIES:
    :header-args+: :tangle (lisp! "+org-capture.el")
    :END:

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! org)
      (use-package doct
        :straight (doct :github github :repo "progfolio/doct")
        :after org-capture
        :commands (doct)
        :demand t
        :init
        (setq doct-default-entry-type 'entry))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! org)
      (use-package org-capture
        :hook (org-capture-mode . evil-insert-state)
        :custom
        (org-capture-bookmark nil)

        :config
        (require '+org-capture)

        (let ((local-conf (etc! "+capture.el")))
          (when (file-exists-p local-conf)
            (load local-conf)))

        (advice-add 'org-edit-src-code :after
                    (lambda (&rest args)
                      "Prevents org mode from restoring the window config before
      source code edit. when you run `org-edit-src-code' the window configuration
      from before the edit is saved, and when you exit the session it's restored.
      Any windows/buffers you open while in an edit get erased. This prevents that
      happening."
                      (setq org-src--saved-temp-window-config nil)))

        ;; Inspired by [[https://stackoverflow.com/a/25335933/6247387][this]] stack-overflow answer, the following advice tries to make
        ;; `org-capture's window popup mechanism a lot less *forceful*.
        (advice-add 'org-capture-place-template :around
                    (defun org-capture-place-template-keep-windows+ (func &rest args)
                      "Prevent `org-capture' from forcefully deleting my current window-config."
                      (cl-letf (((symbol-function #'delete-other-windows)
                                 (symbol-function #'ignore)))
                        (apply func args))))

        (advice-add 'org-capture :around
                    (defun org-capture-open-in-current-window+ (func &rest args)
                      "Make `org-capture' popups always open in the current window.
      I find this a lot more predictable then randomly popping up here and there."
                      (cl-letf (((symbol-function #'org-switch-to-buffer-other-window)
                                 (symbol-function #'switch-to-buffer)))
                        (apply func args))))

        (advice-add 'org-capture-finalize :around
                    (defun org-capture-keep-wconfig+ (func &rest args)
                      "Prevent `org-capture-finalize' from resetting my window-configs"
                      (cl-letf (((symbol-function #'set-window-configuration)
                                 (symbol-function #'ignore)))
                        (apply func args))))

        :lazy-leader
        (:mode 'org-capture-mode
         :minor t
         :prefix leader-major-mode-prefix
         "," 'org-capture-finalize
         "q" 'org-capture-kill
         "r" 'org-capture-refile)

        :general
        (:keymaps 'org-capture-mode-map
         [remap evil-save-and-close] 'org-capture-finalize
         [remap evil-quit] 'org-capture-kill))
    #+END_SRC

    #+begin_src emacs-lisp
      (require 'org)
    #+end_src

    Here's a helper method to jump directly to an org-heading or creat it if it
    doesn't exist.

    #+BEGIN_SRC emacs-lisp
      (defun org-capture-create-goto-heading-command (heading &optional heading-regexp)
        "Create a function to jump to HEADING, creating HEADING if it doesn't exist.
      This function also smartly reacts to headings containing [/]. By default, if
      [/] has been updated to [0/1], then org is just unable to find it. "
        (unless heading-regexp
          (setq heading-regexp (regexp-quote heading))

          (when (string-match-p (rx "[/]") heading-regexp)
            (setq heading-regexp
                  (replace-regexp-in-string
                   (regexp-quote "[/]")
                   "[[[:digit:]]*/[[:digit:]]*\\\\]"
                   heading-regexp))))

        (lambda ()
          (let ((heading-point
                 (ignore-errors
                   (save-excursion
                     (goto-char (point-min))
                     (search-forward-regexp heading-regexp)
                     (line-beginning-position)))))
            (if heading-point
                (goto-char heading-point)
              (goto-char (point-min))
              (save-excursion
                (insert heading "\n"))))))
    #+END_SRC

    Here's another helper to prompt you for an org-link and then returns the final
    result as a string (over inserting it into the current buffer).

    #+BEGIN_SRC emacs-lisp
      (defun org-get-link+ ()
        "get the stringified result of `org-store-link'"
        (with-temp-buffer
          (org-insert-link-global)
          (buffer-substring (point-min) (point-max))))
    #+END_SRC

    Here's the capture templates I use exclusively for projects/repos (through
    projectile). See [[*projectile][projectile]] and [[*counsel-projectile][counsel-projectile]].

    #+BEGIN_SRC emacs-lisp
      (setq
       project-org-capture-templates+
       (doct `(("[${name}] Task"
                :keys "p"
                :template ("* TODO %?"
                           "  %U")
                :file ,(join-path org-projectile-projects-directory "${name}.org")))))
    #+END_SRC

    Finally here's all the capture templates for standalone capturing. See [[https://www.gnu.org/software/emacs/manual/html_node/org/Template-expansion.html#Template-expansion][syntax-docs]].

    #+BEGIN_SRC emacs-lisp
      (setq
       org-capture-templates
       (doct `(;; The group for org-mode files generally used for notes or records.
               ;; With support for word-checking and other writing helpers.
               (:group "Default"
                :type entry
                :hook ,#'flyspell-mode
                ;; :file ,org-default-notes-file
                :prepend t
                :empty-lines 0
                :children
                (;; Group for TODO lists or completion goals. These are generally org
                 ;; headings with a todo-state, a marking timestamp and some description
                 ;; about the goal.
                 (:group "TODOs"
                  :before-finalize ,#'org-update-parent-todo-statistics
                  :function ,(org-capture-create-goto-heading-command "* TODOs [/]")
                  :todo-state "TODO"
                  :template ("* %{todo-state} %?"
                             "  %U")
                  :children (("Todo" :keys "t")
                             ("Todo with Clipboard"
                              :keys "T"
                              :template ("* %{todo-state} %?"
                                         "  %U"
                                         "  %c"))
                             ("Itinerary"
                              :keys "d"
                              :prepend  nil
                              :function ,(org-capture-create-goto-heading-command "* Itinerary")
                              :template ("* %{todo-state} %?"))
                             ("Job Application"
                              :keys "j"
                              :function ,(org-capture-create-goto-heading-command "* Job Search [/]")
                              :template ("* TODO [#%^{Priority|A|B|C}] %(org-get-link+) - %^{Company}"
                                         "  DEADLINE: %^{deadline}t"
                                         "%^{LOCATION}p%^{DURATION}p"
                                         "  %?"))))
                 ("Work"
                  :keys "w"
                  :type plain
                  :children (("Standup" :keys "s"
                              :file (lambda ()
                                      (format-time-string (join-path +notes-home "standup" "%Y-%m-%d.org")))
                              :template ("#+title: Standup %(format-time-string \"Q%q\")"
                                         ""
                                         "* What I did last time"
                                         "  %?"
                                         ""
                                         "* Plan for today"
                                         ""
                                         "* Questions"
                                         ""
                                         "* Notes"
                                         ""))))
                 (;; Group for notes. These are entire org-mode files containing detailed
                  ;; notes isolated to a specific topic for example a lecture or some agenda.
                  ;; Notes that go into here are often bisected and moved into my [[file:init.org::*org-roam][org-brain]].
                  "Notes"
                  :keys "n"
                  :type plain
                  :file (lambda ()
                          (format-time-string (join-path +notes-home "%Y%m%d%H%M%S.org")))
                  :title-format "%^{Title}"
                  :template ("#+title: %{title-format}"
                             "#+stamp: %U"
                             ""
                             "%?")
                  :children (("Note" :keys "n")
                             ("Agenda"
                              :keys "a"
                              :title-format "Agenda for meeting to be held %^{deadline}t")
                             ("Lecture"
                              :keys "l"
                              :template ("#+title: %{title-format}"
                                         "#+module: %^{Module}"
                                         "#+stamp: %U"
                                         ""
                                         "%?"))))))
               ("BibTex"
                :keys "b"
                :type plain
                :file ,(join-path +bib-home "index.bib")
                :template ("@%(completing-read \"Entry type: \" (mapcar #'car bibtex-entry-alist)){%^{Key},"
                           "  title = \"%^{Title}\","
                           "  DATE_ADDED = \"%<%a %b %d %H:%M:%S %Y>\","
                           "}")
                :children (("Entry" :keys "e")
                           ("Lecture" :keys "l"
                            :file ,(join-path +bib-home "uni.bib")))))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+org-capture)
    #+END_SRC

*** org-commands
    :PROPERTIES:
    :header-args+: :tangle (package-str! (lisp! "+org-commands.el") org)
    :END:

    #+BEGIN_SRC emacs-lisp :tangle (package-yes! org)
      (use-package +org-commands
        :commands (org-outline-smart-up-level
                   org-toggle-async-export+
                   org-completing-goto+
                   org-openable-p
                   org-find-file
                   org-clever-return
                   org-toggle-compile-on-save+)
        :init
        (defvar org-clever-return--insert-headings nil
          "When true, returning from the end of a heading inserts a heading.")

        :leader
        ("oo" 'org-find-file)
        (:mode 'org-mode
         "1" 'org-toggle-compile-on-save+)

        :general
        (:keymaps 'org-mode-map
         :states 'insert
         "RET"      'org-clever-return
         "<return>" 'org-clever-return)
        (:keymaps 'org-mode-map
         :states '(normal visual)
         "gh" 'org-outline-smart-up-level))
    #+END_SRC

    #+begin_src emacs-lisp
      (require 'org)
      (require 'evil)
    #+end_src

    #+begin_src emacs-lisp
      (defun org-completing-goto+ ()
        (interactive)
        (org-refile '(4)))
    #+end_src

    A jump command which moves you to the current branches heading when you're not at
    a heading, otherwise it moves you to the parent heading.

    #+begin_src emacs-lisp
      (defun org-outline-smart-up-level ()
        "when at a heading, move to parent
      otherwise move to current heading."
        (interactive)
        (call-interactively
         (if (org-at-heading-p)
             'outline-up-heading
           'outline-previous-heading)))

      (evil-set-command-property 'org-outline-smart-up-level :jump t)
    #+end_src

    A predicate to assert whether the element at point can be opened.

    #+begin_src emacs-lisp
      (defun org-openable-p ()
        (org-element-lineage
         (org-element-context)
         '(footnote-definition
           footnote-reference
           headline
           ;; inlinetask
           link
           timestamp)
         t))
    #+end_src

    An alternative ~"RET"~ binding for org-mode. This varies the affect of return
    depending on your position in the buffer. For example if you're in a table it
    inserts a new row.

    #+begin_src emacs-lisp
      ;;; `org-clever-return'
      (defun org-clever-return--open-line (above)
        (call-interactively
         (if above 'evil-open-above 'evil-open-below)))

      (defun org-clever-return--default-action (above interactive)
        (when (and (line-empty-p)
                   (not (zerop (column-number (point)))))
          ;; don't leave a trailing indent on current line unecessarily
          (delete-trailing-whitespace (line-beginning-position)
                                      (line-end-position)))

        (if (and interactive (not above))
            (funcall-interactively 'newline-and-indent)
          (org-clever-return--open-line above)))

      (defun org-clever-return (&optional above)
        "Smartly enter a newline in an org-mode buffer.

      Depending on the local state, inserts a heading, a table row an item or newline.
      this function is functionally similair to the result of evil-org-eol-call-anon, but
      instead of checking the line after moving to the end of it (which doesn't work for
      folded lines, such as headings), it checks before moving and then inserts the right
      items depending on how things looked where you were."
        (interactive)
        (cond
         ((and current-prefix-arg
               (listp current-prefix-arg))
          (let (current-prefix-arg)
            (org-clever-return--default-action above (called-interactively-p 'interactive))))

         ((org-at-table-p)
          (org-table-insert-row (not above))
          (evil-insert nil))

         ((and org-clever-return--insert-headings
               (org-at-heading-p))
          (org-clever-return--open-line above)
          (org-insert-heading))

         ((org-at-item-p)
          ;; position of cursor dictates where new point goes
          (goto-char (if above
                         (line-beginning-position)
                       (line-end-position)))
          (org-insert-item)
          (evil-append nil))

         (t
          (org-clever-return--default-action above (called-interactively-p 'interactive)))))
    #+end_src

    A special command to jump to some org files. By default it takes you exactly to
    your main notes file.
    With a prefix-argument it lists out files in your notes directory and some-other
    paths for org-files and lets you interactively select one to jump to.

    #+begin_src emacs-lisp
      ;;; `org-find-file'
      (defun org-find-file--generate-candidate (file)
        (let ((relative (file-relative-name file +notes-home)))
          (if (string-prefix-p ".." relative)
              (cons file file)
            (cons relative file))))

      (defun org-find-file (&optional arg initial-input)
        "Find an org file.
      By default this function simply finds the default notes file, as indicated
      by `org-default-notes-file'. When ARG is non-nil, you are instead prompted
      interactively with all org files known to emacs (through `+notes-home',
      `dotemacs-agenda-files' etc.) and then allowed to select which one to visit."
        (interactive "P")
        (if (not arg)
            (find-file org-default-notes-file)
          (let ((cands (mapcar #'org-find-file--generate-candidate
                               (cl-remove-duplicates
                                (cl-remove-if
                                 (apply-partially #'string-match-p
                                                  (rx (or (regexp +find-file-ignore-regexp)
                                                          (and (eval f--path-separator)
                                                               "brain"
                                                               (eval f--path-separator)))))
                                 (append (file-expand-wildcards (join-path +notes-home "*.org"))
                                         (file-expand-wildcards (join-path +notes-home "**/*.org"))
                                         org-agenda-files))
                                :test (lambda (x y) (or (null y) (equal x y)))
                                :from-end t))))
            (cond
             ((package! :consult)
              (find-file
               (consult--read cands
                              :prompt "Find file: "
                              :require-match t
                              :category 'file
                              :state (consult--file-preview)
                              :lookup #'consult--lookup-cdr)))
             (t (find-file
                 (alist-get (completing-read "Find file: " cands nil t initial-input)
                            nil nil #'string-equal)))))))
    #+end_src

    Toggle the ability to automatically compile the current org file to a pdf
    on write.

    This would've required a lot less effort in vim :cry:.

    #+BEGIN_SRC emacs-lisp
      (defvar org-compile-on-save-buffers+ nil
        "org buffers which when saved will be compiled.")

      (defvar org-compile-on-save-async+ t
        "whether compilation is asynchronous or concurrent.
      the async approach spawns a new emacs instance to compile the org-file.
      depending on your hardware this may be slower then simply waiting for
      your current emacs instance to finish.")

      (defun org-compile-on-save-command+ ()
        (when (cl-member (current-buffer) org-compile-on-save-buffers+ :test #'eq)
          (org-latex-export-to-pdf org-compile-on-save-async+)))

      ;; for some reason I can't make this hook buffer local :(
      (add-hook 'after-save-hook #'org-compile-on-save-command+)

      (defun org-toggle-compile-on-save+ (&optional arg)
        "When the current org buffer is saved, compile and render pdf output through latex."
        (interactive "P")
        (unless (derived-mode-p 'org-mode)
          (user-error "This function can only be called from an org-mode buffer."))

        (let* ((buf (if (bound-and-true-p org-capture-mode)
                        (plist-get org-capture-current-plist :buffer)
                      (current-buffer)))
               (member (member buf org-compile-on-save-buffers+))
               (value (if (not arg)
                          (not member)
                        (not (zerop (prefix-numeric-value arg))))))
          (unless (buffer-file-name buf)
            (user-error "cannot compile a buffer with no associated filename."))

          (if value
              (add-to-list 'org-compile-on-save-buffers+ buf nil #'eq)
            (setq org-compile-on-save-buffers+ (delq buf org-compile-on-save-buffers+)))

          ;; while I'm here, let's also remove any killed buffers.
          (setq org-compile-on-save-buffers+
                (cl-remove-if #'buffer-killed-p org-compile-on-save-buffers+))

          ;; notify the user about what's happened.
          (when (called-interactively-p 'interactive)
            (message "compile-on-save: %s"
                     (if value
                         (propertize "enabled" 'face 'compilation-info)
                       (propertize "disabled" 'face 'compilation-error))))))
    #+END_SRC

    #+begin_src emacs-lisp
      (defun org-toggle-async-export+ ()
        (interactive)
        (when (called-interactively-p 'interactive)
          (message "org-export-in-background: %s"
                   (if (setq org-export-in-background (not org-export-in-background))
                       (propertize "enabled" 'face 'compilation-info)
                     (propertize "disabled" 'face 'compilation-error)))))
    #+end_src

    #+begin_src emacs-lisp
      (provide '+org-commands)
    #+end_src

*** org-src
    #+BEGIN_SRC emacs-lisp
      (use-package org-src
        :custom
        (org-src-tab-acts-natively nil)                                               ; native tabs are slow and unreliable... :sad:
        (org-src-window-setup 'current-window)
        (org-src-ask-before-returning-to-edit-buffer nil)
        (org-edit-src-turn-on-auto-save nil)                                          ; WARN: Doesn't let you configure save path.
        (org-edit-src-auto-save-idle-delay 0)

        :init
        (advice-add 'org-edit-src-code :before
                    (defun org-edit-src-pre-exit-normal-state+ (&rest args)
                      (unless (eq evil-state 'normal)
                        (evil-normal-state))))

        :config
        ;; Trailing white-space is a pest that org-mode tacitly accepts.
        (advice-add #'org-src--contents-for-write-back :after
                    (defun org-edit-src-write-back-clean-whitespace+ (buf)
                      (with-current-buffer buf
                        (delete-trailing-whitespace (point-min) (point-max)))))

        (advice-add #'org-edit-src-save :around
                    (defun org-edit-src-save-buffer+ (func &rest args)
                      (if +indirect-edit-save-buffers
                          (apply func args)
                        (cl-letf (((symbol-function 'save-buffer)
                                   (symbol-function 'ignore)))
                          (apply func args)))))

        :leader
        (:mode 'org-src-mode
         :minor t
         :prefix leader-major-mode-prefix
         "," 'org-edit-src-exit
         "q" 'org-edit-src-abort
         "s" 'org-edit-src-save)

        :general
        (:keymaps 'org-src-mode-map
         [remap evil-write] 'org-edit-src-save
         [remap evil-quit] 'org-edit-src-abort
         ;; save and then quit
         [remap evil-save-and-close] 'org-edit-src-exit
         [remap evil-save-modified-and-close] 'org-edit-src-exit))
    #+END_SRC

*** org-links
    View org links in non-org buffers as you would in org buffers.

    #+BEGIN_SRC emacs-lisp
      (use-package ol :commands (org-insert-link-global org-store-link))

      (use-package orglink
        :straight t
        :after org
        :demand t

        :diminish orglink-mode

        :custom
        (orglink-activate-in-modes
         '(hledger-mode text-mode prog-mode conf-mode))
        (orglink-match-anywhere t)

        :config
        (global-orglink-mode +1)

        :config
        ;; Enable in all the existing buffers it should be enabled in.
        (dolist (buf (buffer-list))
          (with-current-buffer buf
            (when (and (not (bound-and-true-p orglink--mode))
                       (not (derived-mode-p 'org-mode)))
              (turn-on-orglink-mode-if-desired))))

        :config
        (defun orglink-enable-only-in-comments+ ()
          (setq-local orglink-match-anywhere nil))

        (add-hook 'sh-mode-hook 'orglink-enable-only-in-comments+))
    #+END_SRC

**** pdftools
     Adapted from [[https://github.com/fuxialexander/org-pdftools][org-pdftools]] this adds a link type to org mode which lets you link
     to and open PDFs. I've removed all the pdftools specific stuff so this is just a
     generic configuration section for pdf related actions in org mode.

     #+NAME: org-pdf-link
     #+BEGIN_SRC emacs-lisp
       (defvar +org-pdf-complete-link-page-history nil)

       (defun +org-pdf-complete-link (&optional arg)
         "Use the existing file name completion for file.
       Links to get the file name, then ask the user for the page number
       and append it. ARG is passed to `org-link-complete-file'."
         (let ((default-directory (or +docs-home default-directory)))
           (concat
            (replace-regexp-in-string
             "^file:"
             (concat "pdftools" ":")
             (org-link-complete-file arg))
            "::"
            (read-from-minibuffer "Page: " "1" nil nil +org-pdf-complete-link-page-history))))

       (defun +org-pdf-open (link)
         (save-match-data
           (unless (string-match (rx (group (one-or-more any))
                                     "::"
                                     (group (zero-or-more (any digit))))
                                 link)
             (warn "Failed to extract path/page from: %s" link))

           (xopen-pdf+ (expand-file-name (match-string 1 link)) (match-string 2 link))))

       (defun +org-pdf-export (link description format)
         "Export the pdfview LINK with DESCRIPTION for FORMAT from Org files."
         (let* (path page)
           (save-match-data
             (if (string-match "\\(.+\\)::\\(.*\\)" link)
                 (setq path (match-string 1 link)
                       page (match-string 2 link))
               (setq path link)))
           (setq path (org-export-file-uri (org-link-escape path)))

           (cond ((eq format 'html)
                  (format "<a href=\"%s#page=%s\">%s</a>" path page description))
                 ((eq format 'latex)
                  (format "\\href{%s}{%s}" path description))
                 ((eq format 'ascii)
                  (format "%s (%s)" description path))
                 (t path))))

       (with-eval-after-load 'org
         (org-link-set-parameters "pdftools"
                                  :follow   #'+org-pdf-open
                                  :complete #'+org-pdf-complete-link
                                  :export   #'+org-pdf-export))
     #+END_SRC

**** pdfbib
     A variant of the previous ~pdftools~ link which works using bibtex keys instead of
     PDF file paths.

     #+NAME: org-bib-pdf-link
     #+BEGIN_SRC emacs-lisp :tangle (package-yes! org bibtex)
       (defvar +org-pdf-bib-regex (rx (group (minimal-match (one-or-more any)))
                                      (optional
                                       "::"
                                       (group (one-or-more (any digit))))
                                       eol))

       (defun +org-pdf-bib-complete-link (&optional arg)
         (concat
          "pdfbib:"
          (cond
           ((package! :consult)
            (consult-bibtex--read-entry arg))
           (t (user-error "No bibtex key reader found")))
          ;; I want to be able to omit a page number but read-number doesn't allow that :cry:.
          (let ((page (read-from-minibuffer "Page: " nil nil nil +org-pdf-complete-link-page-history)))
            (unless (string-empty-p)
              (concat "::" page)))))

       (defun +org-pdf-bib-open (link)
         (save-match-data
           (unless (string-match +org-pdf-bib-regex link)
             (warn "Failed to extract path/page from: %s" link))

           (if-let* ((key (match-string 1 link))
                     (pdf (car (bibtex-completion-find-pdf key))))
               (+xopen-pdf pdf (match-string 2 link))
             (user-error "Failed to find PDF for bibentry with key: %s" key))))

       (defun +org-pdf-bib-export (link description format)
         "Export the pdfview LINK with DESCRIPTION for FORMAT from Org files."
         (let* (key)
           (save-match-data
             (if (string-match +org-pdf-bib-regex link)
                 (progn
                   (setq key  (match-string 1 link)))
               (setq key link)))

           (cond ((eq format 'latex)
                  (format "%s \\cite{%s}" description key))
                 ((eq format 'ascii)
                  (format "%s (%s)" description key))
                 (t key))))

       (defun +org-pdf-bib-eldoc (link)
         (or
          (cdr (assoc "title" (bibtex-completion-get-entry (substring link 0 (s-index-of ":" link)))))
          link))

       (with-eval-after-load 'org
         (org-link-set-parameters "pdfbib"
                                  :follow   #'+org-pdf-bib-open
                                  :complete #'+org-pdf-bib-complete-link
                                  :export   #'+org-pdf-bib-export
                                  :eldoc    #'+org-pdf-bib-eldoc))

       (with-eval-after-load 'org-ref
         (push '("pdfbib" "Citation type for pdfs at a specific page") org-ref-cite-types))

       (with-eval-after-load 'citeproc-org
         (advice-add #'citeproc-org-setup :after
                     (lambda ()
                       (add-hook 'org-export-before-parsing-hook
                                 (defun citeproc-fix-pdfbib+ (_backend)
                                   "Replace pdfbib links with their equivalent org-ref variants in citeproc style."
                                   (let ((inhibit-message t))
                                     (save-excursion
                                       (goto-char (point-min))

                                       (replace-regexp (rx "["
                                                           "[pdfbib:" (group (minimal-match (one-or-more (or any "\n")))) (optional "::" (group (one-or-more digit))) "]"
                                                           (optional (group "[" (minimal-match (one-or-more (or any "\n"))) "]"))
                                                           "]")
                                                       (query-replace-compile-replacement
                                                        "[[cite:\\1][see page \\2\\,(if \\3 (concat \", \" \\3) \"\")]]"
                                                        t)))))))))
     #+END_SRC

**** org-ref
     Add an eldoc handler for [[*org-ref][org-ref]] that can properly render all org-ref elements,
     this was mostly adapted from ~org-ref-link-message~ which used to use a custom
     timer and messages to do this.

     #+BEGIN_SRC emacs-lisp :tangle (package-yes! org bibtex)
       (defun org-ref-eldoc-cite+ (&optional _path)
         (let ((key (save-excursion
                      (org-ref-get-bibtex-key-under-cursor))))
           (if (string= "*" key)
               "*"
             (org-ref-format-entry key))))

       (with-eval-after-load 'org-ref
         (dolist (link org-ref-cite-types)
           (org-link-set-parameters (if (consp link) (car link) link) :eldoc #'org-ref-eldoc-cite+)))

       (defun org-ref-eldoc-ref+ (path)
         (if (= (org-ref-count-labels path)
                0)
             "!!! NO CONTEXT FOUND !!!count: 0"
           (format "%scount: %s"
                    (org-ref-get-label-context path)
                    (org-ref-count-labels path))))

       (with-eval-after-load 'org-ref
         (org-link-set-parameters "ref"     :eldoc #'org-ref-eldoc-ref+)
         (org-link-set-parameters "cref"    :eldoc #'org-ref-eldoc-ref+)
         (org-link-set-parameters "eqref"   :eldoc #'org-ref-eldoc-ref+)
         (org-link-set-parameters "pageref" :eldoc #'org-ref-eldoc-ref+)
         (org-link-set-parameters "nameref" :eldoc #'org-ref-eldoc-ref+)
         (org-link-set-parameters "autoref" :eldoc #'org-ref-eldoc-ref+))

       (defun org-ref-eldoc-label+ (path)
         (let ((count (org-ref-count-labels path)))
           ;; get plurality on occurrence correct
           (concat
            (number-to-string count)
            " occurrence"
            (when (or (= count 0)
                      (> count 1))
              "s"))))

       (with-eval-after-load 'org-ref
         (org-link-set-parameters "label" :eldoc #'org-ref-eldoc-label+))

       (defun org-ref-eldoc-bibliography+ (path)
         (s-join ", "
                 (cl-loop for it in (mapcar #'org-ref-strip-string (s-split "," path))
                          with file = nil
                          do (setq file (org-ref-find-bibfile it))
                          collect (format (if file
                                              "%s exists"
                                            "!!! %s NOT FOUND !!!")
                                          (or file it)))))

       (with-eval-after-load 'org-ref
         (org-link-set-parameters "bibliography" :eldoc #'org-ref-eldoc-bibliography+))
     #+END_SRC

**** org-id
     #+BEGIN_SRC emacs-lisp
       (defun org-eldoc-id+ (path)
         (gethash path org-id-locations path))

       (with-eval-after-load 'org-ref
         (org-link-set-parameters "id" :eldoc #'org-eldoc-id+))
     #+END_SRC

*** org-export
    Here we put configurations for various emacs org export backends including latex.

    These are the latex packages emacs should always require when using latex export.

    #+NAME: org-latex-packages
    | Options | Package    |
    |---------+------------|
    |         | mathdots   |
    |         | fourier    |
    |         | yfonts     |
    | super   | nth        |
    |         | siunitx    |
    |         | color      |
    |         | amssymb    |
    |         | amsthm     |
    |         | tikz       |
    |         | graphics   |
    |         | pgfplots   |

    #+NAME: org-latex-pkgs
    #+BEGIN_SRC emacs-lisp :var pkgs=org-latex-packages
      (with-eval-after-load 'org
        (setq org-latex-packages-alist (append pkgs org-latex-packages-alist)))
    #+END_SRC

    Here's the options used to configure various org backends and extensions.

    #+NAME: org-export-options
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :custom
        (org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
        (org-babel-python-command "python3")
        (org-ditaa-jar-path (cache! "org/bin/ditaa.jar"))
        (org-ditaa-eps-jar-path (cache! "org/bin/ditaaEps.jar"))
        (org-plantuml-jar-path (cache! "org/bin/plantuml.jar"))
        (org-export-with-toc nil)
        (org-latex-default-class "article")
        (org-confirm-babel-evaluate nil)
        (org-latex-classes
         '(("article" "\\documentclass[11pt]{article} \\setlength{\\parindent}{0in} \\setlength{\\parskip}{\\baselineskip}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ("report" "\\documentclass[11pt]{report}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ("book" "\\documentclass[11pt]{book}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
    #+END_SRC

**** org-async-init
     :PROPERTIES:
     :header-args+: :tangle (lisp! "+org-async-init.el")
     :END:

     ~init.el~ file for asynchronous org-mode export.

     #+BEGIN_SRC emacs-lisp :tangle (package-yes! org)
       (setq org-export-async-init-file (lisp! "+org-async-init.el")
             org-export-in-background nil)
     #+END_SRC

     #+BEGIN_SRC emacs-lisp :var pkgs=org-latex-packages
       (load (concat user-emacs-directory "early-init.el") nil t)

       (require 'ox)

       <<setup-paths>>
       <<org-latex-pkgs>>
       <<org-export-options>>
       <<org-pdf-link>>
       <<org-bib-pdf-link>>
       (require 'org-id)
       (when (file-exists-p org-id-locations-file)
         (org-id-locations-load))

       <<setup-straight-pacman>>
       (straight-use-package 'org-ref)
       (require 'org-ref)
     #+END_SRC

*** extensions
    org-mode is a relatively massive project with a bunch of built-in features. To
    simplify determining what's built in and what's external I've placed any external
    packages to org-mode itself into this sub-branch.

**** org-bullets
     Better heading indicators in org buffers.

     #+BEGIN_SRC emacs-lisp
       (use-package org-superstar
         :straight (org-superstar-mode :host github :repo "integral-dw/org-superstar-mode")
         :hook (org-mode . org-superstar-mode)
         :custom
         (org-superstar-todo-bullet-alist
          '(("TODO" . 9744)
            ("DONE" . 9745)))
         (org-superstar-cycle-headline-bullets t)
         (org-hide-leading-stars t)
         (org-superstar-special-todo-items t))
     #+END_SRC

**** orgit
     Link to magit buffers directly from org-mode.
     Autoloads have been disabled because otherwise magit is immeadiately loaded.

     #+BEGIN_SRC emacs-lisp
       (use-package orgit
         :straight (orgit :build (:not autoloads))
         :demand t
         :after (ol magit)
         :custom
         (orgit-store-repository-id t)

         ;; :hook (git-commit-post-finish . orgit-store-after-commit)
         ;; :config
         ;; (defun orgit-store-after-commit ()
         ;;   "Store orgit-link for latest commit after commit message editor is finished."
         ;;   (let* ((repo (orgit--current-repository))
         ;;          (rev (magit-git-string "rev-parse" "HEAD"))
         ;;          (link (format "orgit-rev:%s::%s" repo rev))
         ;;          (summary (substring-no-properties (magit-format-rev-summary rev)))
         ;;          (desc (format "%s (%s)" summary repo)))
         ;;     (push (list link desc) org-stored-links)))
         )
     #+END_SRC

**** org-fragtog
     Automatically render latex fragments in org mode.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package org-fragtog
         :straight t
         :after org)
     #+END_SRC

**** org-ql
     Lisp like query language for org mode.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package org-ql
         :straight t)
     #+END_SRC

**** company-org-block                                                  :comp:
     A better solution for inserting code-blocks or block-groups in org-mode.

     #+BEGIN_SRC emacs-lisp :tangle (package-yes! org company)
       (use-package company-org-block
         :straight (company-org-block :host github :repo "xenodium/company-org-block")
         :after org
         :demand t
         :custom
         (company-org-block-edit-style 'auto)
         (company-org-block-explicit-lang-defaults nil)

         :config
         (set-company-backend! 'org-mode
           'company-org-block))
     #+END_SRC

**** org-roam
     note taking system centred around org-mode. you can tag notes using the
     ~roam_tags~ keyword and you can reference sources using ~roam_key~.

     *Note*: protocol installation requires some manual setup, see [[https://www.orgroam.com/manual/Installation-_00281_0029.html#Installation-_00281_0029][here]].

     #+BEGIN_SRC emacs-lisp
       (use-package org-roam
         :straight t
         :hook ((org-roam-file-setup . flyspell-mode))
         :commands org-roam-rg
         :preface
         (setq org-roam-v2-ack t)
         (defvaralias 'org-roam-capture-function '+org-capture-function)

         :custom
         (org-roam-prefer-id-links t)
         (org-roam-completion-system 'default)
         (org-id-link-to-org-use-id 'use-existing)
         (org-roam-db-location (state! "org-roam.db"))

         :config
         (org-roam-db-autosync-mode +1)

         (require 'org-roam-protocol)

         (defun org-roam-rg ()
           "Run a rg session in your org roam directory."
           (interactive)
           (cond ((package! :consult)
                  (require 'consult)
                  (consult-ripgrep org-roam-directory))
                 (t (message "No rg package found"))))

         :config
         ;; Fix compatability with v1 when moving to v2... eventually this won't be
         ;; needed :-).
         (setq org-id-extra-files (directory-files org-roam-directory nil "\\.org$"))

         :custom
         (org-roam-node-display-template "${title} ${tags:0}")
         (org-roam-node-annotation-function #'org-roam-annotate-tag+)
         :commands (org-roam-annotate-tag+)
         :config
         (defun org-roam-annotate-tag+ (node)
           (let ((tags (mapconcat
                        (lambda (v)
                          (concat (or (cdr (assoc "tags" org-roam-node-template-prefixes))
                                      "")
                                  v))
                        (org-roam-node-tags node) " ")))
             (unless (string-empty-p tags)
               (concat
                " "
                (propertize " " 'display `(space :align-to (- right ,(+ 1 (length tags)))))
                (propertize tags 'face 'completions-annotations)))))

         :commands (org-roam-create-new-img+)
         :leader (:mode 'org-mode "f" 'org-roam-create-new-img+)
         :config
         (defun org-roam-create-new-img+ ()
           (interactive)
           (let* ((root (join-path default-directory "images"))
                  (template (join-path root "template.svg"))
                  (stamp (format-time-string "%Y%m%d%H%M%S"))
                  (copy (join-path root (concat stamp ".svg"))))
             (unless (file-exists-p template)
               (user-error "Template not found at path: %s" template))
             (copy-file template copy nil nil t t)

             (let ((company-org-block-edit-style 'inline))
               (company-org-block--wrap-point "src latex" "src"))
             (let ((space (make-string (- (line-end-position) (line-beginning-position)) ? )))
               (indent-region
                (point)
                (save-excursion
                  (insert (format (s-join "\n"
                                          `("\\begin{figure}[ht]"
                                            ,(concat space "  \\centering")
                                            ,(concat space "  \\incfig{%s}")
                                            ,(concat space "\\end{figure}")))
                                  stamp))
                  (point)))
               (next-line 2)
               (forward-char 2))

             (message "Opening new figure in inkscape.")
             (start-process "inkscape" nil "inkscape" copy)))

         :commands org-roam-node-formatter+
         :custom (org-roam-node-formatter #'org-roam-node-formatter+)
         :config
         ;; If an anagram (all uppercase) keep as is, otherwise downcase.
         (defun org-roam-node-formatter+ (node)
           (let* ((title (org-roam-node-title node))
                  (title-upcase (upcase title)))
             (cond
              ((string-equal title title-upcase)
               title-upcase)
              (t
               (downcase title)))))

         :leader
         ("ox" 'org-roam-capture
          "oF" 'org-roam-ref-find
          "of" 'org-roam-node-find
          "op" 'org-roam-node-insert
          "oz" 'org-roam-alias-add
          "oZ" 'org-roam-alias-delete
          "ot" 'org-roam-tag-add
          "oT" 'org-roam-tag-remove
          "or" 'org-roam-buffer-toggle
          "oR" 'org-roam-buffer-render
          "os" 'org-roam-rg)

         :general
         (:keymaps '(org-roam-node-map
                     org-roam-preview-map)
          "SPC" nil)
         (:keymaps 'org-roam-node-map
          :states 'motion
          "RET" 'org-roam-visit-thing))
     #+END_SRC

***** org-roam-ui
      #+BEGIN_SRC emacs-lisp
        (use-package simple-httpd :straight t)
        (use-package websocket :straight t)

        (use-package org-roam-ui
          :straight (org-roam-ui :host github :repo "org-roam/org-roam-ui" :files ("*.el" "out"))
          :config
          (require 'org-roam)

          :leader
          ("oG" 'org-roam-ui-mode)

          :preface
          (setq org-roam-ui-port 8967))
      #+END_SRC

**** org-ref
     :PROPERTIES:
     :header-args+: :tangle (package-yes! org bibtex)
     :END:
     Support citations, references and links in org mode documents.

     WARN for bibliographies to show up you have to specify a biliographystyle (use
     unsrt when unsure).

     #+BEGIN_SRC emacs-lisp
       (use-package org-ref
         :straight t
         :after org
         :demand t
         :leader
         (:mode 'org-mode
          "]" 'org-ref-insert-link)
         ("ov" 'doi-utils-add-bibtex-entry-from-doi)

         :init
         (defvaralias 'reftex-default-bibliography 'org-cite-global-bibliography)

         :custom
         (org-ref-bibtex-completion-add-keywords-field nil)
         (org-ref-show-citation-on-enter nil)
         (helm-minibuffer-history-key nil)

         :config
         (setq org-ref-latex-bibliography-absolute-p t
               org-ref-latex-bib-resolve-func #'expand-file-name))
     #+END_SRC

**** citeproc-org
     :PROPERTIES:
     :header-args+: :tangle (package-yes! org bibtex citeproc)
     :END:

     #+begin_src emacs-lisp
       (use-package citeproc-org
         :straight t
         :demand t
         :after org-ref
         :custom
         (citeproc-org-ignore-backends '(beamer))
         :config
         (citeproc-org-setup))
     #+end_src

**** org-appear
     #+BEGIN_SRC emacs-lisp
       (use-package org-appear
         :straight t
         :defer t
         :hook (org-mode . org-appear-mode)
         :custom
         (org-hide-emphasis-markers t)
         (org-appear-autolinks nil))
     #+END_SRC

**** org-toc
     Automatically [[https://github.com/snosov1/toc-org][refreshes]] any table of contents in the current org or markdown
     buffer on save. Works by finding org any headings with ~:TOC:~ field (or markdown
     headings with a trailing ~<-- :TOC: -->~ comment) and then rebuilding them whenever
     the file is saved.

     #+BEGIN_SRC emacs-lisp
       (use-package toc-org
         :straight t
         :hook (;; (org-mode . toc-org-mode)
                (markdown-mode . toc-org-mode)))
     #+END_SRC

** xml
   :PROPERTIES:
   :header-args+: :tangle (package-yes! xml)
   :END:

   #+begin_src emacs-lisp
     (use-package nxml-mode
       :hook (nxml-mode . +flylint)
       :init
       (push '(nxml-mode . 2) +indent-config)

       :config
       ;; Technically its builtin so its better, but it doesn't cooperate with
       ;; with flymake/flycheck and I'm not interested in re-learning how to
       ;; navigate errors this new way.
       (advice-add #'rng-nxml-mode-init :override #'ignore)

       :lazy-leader
       (:mode 'nxml-mode
        "s" 'nxml-split-element)
       :general
       (:keymaps 'nxml-mode-map
        :states 'insert
        "/" 'nxml-electric-slash))
   #+end_src

*** company-xml                                                         :comp:
    #+begin_src emacs-lisp :tangle (package-yes! xml company)
      (set-company-backend! 'nxml-mode #'company-nxml)
    #+end_src

** lua
   :PROPERTIES:
   :header-args+: :tangle (package-yes! lua)
   :END:

   #+begin_src emacs-lisp
     (use-package lua-mode
       :straight t
       :hook (lua-mode . +flylint)
       :init
       (push '(lua-mode . 2) +indent-config)

       :leader
       (:mode 'lua-mode
        "h" '(:ignore t :wk "help")
        "hd" 'lua-search-documentation

        "s" '(:ignore t :wk "REPL")
        "sb" 'lua-send-buffer
        "sf" 'lua-send-defun
        "sl" 'lua-send-current-line
        "sr" 'lua-send-region
        "'"  'lua-show-process-buffer))
   #+end_src

*** company-lua                                                         :comp:
    #+begin_src emacs-lisp :tangle (package-yes! lua company)
      (use-package company-lua
        :straight t
        :init
        (set-company-backend! 'lua-mode 'company-lua))
    #+end_src

*** lua-language-server                                                 :lsp:
    #+begin_src emacs-lisp :tangle (package-yes! lua :lsp)
      (add-hook 'lua-mode-hook +lsp-command)
    #+end_src

    #+begin_src emacs-lisp :tangle (package-yes! lua eglot)
      (with-eval-after-load 'eglot
        (push '(lua-mode "lua-language-server")
              eglot-server-programs))
    #+end_src

** perl
   :PROPERTIES:
   :header-args+: :tangle (package-yes! perl)
   :END:

   #+begin_src emacs-lisp
     (use-package cperl-mode
       :mode (rx "." (or (and "p" (or "l" "m") (optional "x"))
                         (and "P" (or "L" "M") (optional "X")))
                 eol)
       :interpreter "perl"
       :interpreter "perl5"
       :hook ((perl-mode cperl-mode) . +flylint)
       :custom
       (cperl-highlight-variables-indiscriminately t)
       (cperl-indent-parens-as-block t "Parentheses are indented with the block and not with scope")
       ;; These should be set by `+indent-config' but it can't support negatives yet.
       (cperl-indent-level 4 "4 spaces is the standard indentation")
       (cperl-close-paren-offset -4 "Indent the closing paren back four spaces")
       (cperl-continued-statement-offset 4 "If a statement continues indent it to four spaces")

       :config
       ;; Don't highlight arrays and hashes in comments, from [[https://github.com/syl20bnr/spacemacs/blob/63056ecb50f93808781b97feab1c3225d35c7aa1/layers/%2Blang/perl5/packages.el#L65][here]].
       (font-lock-remove-keywords 'cperl-mode
        '(("\\(\\([@%]\\|\\$#\\)[a-zA-Z_:][a-zA-Z0-9_:]*\\)" 1
           (if (eq (char-after (match-beginning 2)) 37)
               'cperl-hash-face 'cperl-array-face) t)
          ("\\(\\([$@]+\\)[a-zA-Z_:][a-zA-Z0-9_:]*\\)[ \t]*\\([[{]\\)" 1
           (if (= (- (match-end 2) (match-beginning 2)) 1)
               (if (eq (char-after (match-beginning 3)) 123)
                   'cperl-hash-face 'cperl-array-face)
             font-lock-variable-name-face) t)
          ("\\([]}\\\\%@>*&]\\|\\$[a-zA-Z0-9_:]*\\)[ \t]*{[ \t]*\\(-?[a-zA-Z0-9_:]+\\)[ \t]*}"
           (2 font-lock-string-face t)
           ("\\=[ \t]*{[ \t]*\\(-?[a-zA-Z0-9_:]+\\)[ \t]*}" nil nil
            (1 font-lock-string-face t)))
          ("[[ \t{,(]\\(-?[a-zA-Z0-9_:]+\\)[ \t]*=>" 1 font-lock-string-face t)))
       (font-lock-add-keywords 'cperl-mode
        '(("\\(\\([@%]\\|\\$#\\)[a-zA-Z_:][a-zA-Z0-9_:]*\\)" 1
           (if (nth 4 (syntax-ppss))
               'font-lock-comment-face
             (if (eq (char-after (match-beginning 2)) ?%)
                 'cperl-hash-face
               'cperl-array-face)) t)
          ("\\(\\([$@]+\\)[a-zA-Z_:][a-zA-Z0-9_:]*\\)[ \t]*\\([[{]\\)" 1
           (if (nth 4 (syntax-ppss))
               'font-lock-comment-face
             (if (= (- (match-end 2) (match-beginning 2)) 1)
                 (if (eq (char-after (match-beginning 3)) ?{)
                     'cperl-hash-face
                   'cperl-array-face)
               font-lock-variable-name-face)) t)
          ("\\([]}\\\\%@>*&]\\|\\$[a-zA-Z0-9_:]*\\)[ \t]*{[ \t]*\\(-?[a-zA-Z0-9_:]+\\)[ \t]*}"
           (2 (if (nth 4 (syntax-ppss))
                  'font-lock-comment-face
                'font-lock-string-face) t)
           ("\\=[ \t]*{[ \t]*\\(-?[a-zA-Z0-9_:]+\\)[ \t]*}" nil nil
            (1 (if (nth 4 (syntax-ppss))
                   'font-lock-comment-face
                 'font-lock-string-face) t)))
          ("[[ \t{,(]\\(-?[a-zA-Z0-9_:]+\\)[ \t]*=>" 1
           (if (nth 4 (syntax-ppss))
               'font-lock-comment-face
             'font-lock-string-face) t)))

       (font-lock-add-keywords 'cperl-mode
        '(("\\_<say\\_>" . cperl-nonoverridable-face)))

        :custom (cperl-lazy-help-time nil "Permanently disable non-eldoc help.")
        :config
        ;; Eldoc intergration using `cperl-lazy-install'.

        (defun cperl-eldoc--regexp+ (word)
          "Taken directly from `cperl-describe-perl-symbol'."
          (cond
           ((string-match "^[&*][a-zA-Z_]" word)
            (setq word (concat (substring word 0 1) "NAME")))
           ((string-match "^[$@]\\([a-zA-Z_:0-9]+\\)[ \t]*\\[" word)
            (setq word (concat "@" (substring word 1 (match-end 1)))))
           ((string-match "^[$@]\\([a-zA-Z_:0-9]+\\)[ \t]*{" word)
            (setq word (concat "%" (substring word 1 (match-end 1)))))
           ((and (string= word "x") (string-match "^x=" word))
            (setq word "x="))
           ((string-match "^\\$[\C-a-\C-z]" word)
            (setq word (concat "$^" (char-to-string (+ ?A -1 (aref word 1))))))
           ((string-match "^CORE::" word)
            (setq word "CORE::"))
           ((string-match "^SUPER::" word)
            (setq word "SUPER::"))
           ((and (string= "<" word) (string-match "^<\\$?[a-zA-Z0-9_:]+>" word))
            (setq word "<NAME>")))

          (concat "^"
                  "\\([^a-zA-Z0-9_:]+[ \t]+\\)?"
                  (regexp-quote word)
                  "\\([ \t([/]\\|$\\)"))

        (defun cperl-eldoc+ (cb)
          (when-let ((val (save-excursion
                            ;; moves point for some reason..
                            (cperl-word-at-point-hard))))
            (let ((cperl-message-on-help-error nil)
                  (cperl-help-from-timer t)
                  (case-fold-search nil)
                  (regexp (cperl-eldoc--regexp+ val)))
              (cperl-switch-to-doc-buffer)
              (with-current-buffer cperl-doc-buffer
                (save-excursion
                  (goto-char (point-min))
                  (when (re-search-forward regexp (point-max) t)
                    (save-excursion
                      (beginning-of-line 1)
                      (let ((lnstart (point)))
                        (end-of-line)
                        (funcall cb (buffer-substring lnstart (point)))))))))))

        (defun cperl-setup-eldoc+ ()
          (add-hook 'eldoc-documentation-functions 'cperl-eldoc+ nil t))
        :hook ((perl-mode cperl-mode) . cperl-setup-eldoc+)

        :general
        (:keymaps 'cperl-mode-map
         [override-state] 'insert                                                    ; Gives access to a bunch of electric keys
         "TAB" nil                                                                   ; Restore indent-for-tab-command
         "C-j" nil)
        :lazy-leader
        (:mode '(perl-mode cperl-mode)
         ;; Unbound commands:
         ;; + cperl-next-interpolated-REx
         ;; + cperl-next-interpolated-REx-0
         ;; + cperl-next-interpolated-REx-1

         "b" 'cperl-find-bad-style
         "d" 'cperl-here-doc-spell
         "n" 'cperl-narrow-to-here-doc
         "p" 'cperl-pod-spell
         "i" 'cperl-invert-if-unless

         "h" '(:ignore t :wk "help")
         "hF" 'cperl-info-on-command
         "hf" 'cperl-info-on-current-command
         "hP" 'cperl-perldoc-at-point
         "hp" 'cperl-perldoc
         "hh" 'cperl-get-help

         "t" '(:ignore t :wk "toggle")
         "ta" 'cperl-toggle-auto-newline
         "tk" 'cperl-toggle-abbrev
         "te" 'cperl-toggle-electric
         "tw" 'cperl-toggle-construct-fix))
   #+end_src

*** company-plsense                                                    :comp:
    #+begin_src emacs-lisp
      (use-package company-plsense
        :straight t
        :after perl-mode
        :when (executable-find "plsense")
        :init
        (set-company-backend! 'perl-mode 'company-plsense)
        (set-company-backend! 'cperl-mode 'company-plsense))
    #+end_src

*** perl-languageserver                                                 :lsp:
    :PROPERTIES:
    :header-args+: :tangle (package-yes! perl :lsp)
    :END:
    Requires [[https://github.com/richterger/Perl-LanguageServer][Perl-LanguageServer]].

    #+begin_src emacs-lisp
      (add-hook 'perl-mode-hook +lsp-command)
    #+end_src

    #+begin_src emacs-lisp :tangle (package-yes! perl eglot)
      (with-eval-after-load 'eglot
        (push `(perl-mode . ("perl"
                             "-MPerl::LanguageServer"
                             "-e" "Perl::LanguageServer::run"
                             "--" "--port" :autoport "--version" "2.1.0"))
              eglot-server-programs))
    #+end_src

* Script
  :PROPERTIES:
  :header-args+: :shebang "#!/usr/bin/env emacs-script\n;; -*- mode: emacs-lisp; lexical-binding: t -*-"
  :END:

  Quick init is a minimalist emacs start-up config that makes sure some sane defaults
  (such as path configurations are setup). It's useful as an alternative to =init.el=
  when trying to debug a package. You can run it using:
  =emacs -Q --load $EMACS_HOME/quick-init.el=.

  #+NAME: quick-init
  #+BEGIN_SRC emacs-lisp :tangle quick-init.el :shebang ";; -*- lexical-binding: t -*-"
    (let ((early-init (concat user-emacs-directory "early-init.el")))
      (load early-init t t))

    <<setup-paths>>
    <<setup-straight-pacman>>
    <<setup-packages>>
  #+END_SRC

  Script init is an extension to quick-init that sets up an environment for command
  line based emacs scripts. This essentially replaces the lacklustre completing-read
  interface in command-line scripts with =fzf=, disables some unnecessary warnings and
  adds some useful packages for scripts.

  #+NAME: script-init
  #+BEGIN_SRC emacs-lisp :tangle no
    <<quick-init>>

    ;; fixes annoying issues with :leader
    (setq use-package-ignore-unknown-keywords t)
    (setq warning-minimum-log-level :emergency)

    ;; Allow scripts to defer to fzf for completing-read like selection.
    (defvar fzf-cmd '("fzf"))

    (defun fzf--base (cands &rest fzf-args)
      (with-temp-buffer
        (insert (s-join "\n" cands))
        (let* ((temp (make-temp-file "emacs-fzf-"))
               (fzf-cmd (concat (s-join " " (mapcar #'shell-quote-argument
                                                    (delq nil (append fzf-cmd fzf-args))))
                                " > "
                                (shell-quote-argument temp))))
          (unwind-protect
              (progn
                (if (eq 0 (call-process-region
                           (point-min) (point-max) "sh" nil
                           `((:file "/dev/stdout")
                             "/dev/stderr")
                           nil "-c" fzf-cmd))
                    (with-current-buffer (find-file temp)
                      (s-split "\n" (string-remove-suffix "\n" (buffer-substring (point-min) (point-max)))))
                  (error "fzf exited with non-zero exit-code")))
            (delete-file temp)))))

    (defun fzf (cands &rest fzf-args)
      (car (apply #'fzf--base cands fzf-args)))

    (defun fzf-multi (cands &rest fzf-args)
      (apply #'fzf--base cands "--multi" fzf-args))

    (defvar fzf-silent-p t)

    (defun fzf-completing-read--base (fzf-function prompt collection &optional
                                                   predicate _require-match initial-input
                                                   hist def _inherit-input-method)
      (let* ((collection (if predicate
                             (seq-filter predicate collection)
                           collection))
             (args `("--prompt" ,(concat prompt) ,@(and initial-input
                                                        (list "--query" initial-input))))
             (choice (or (apply fzf-function collection args)
                         def)))
        (unless fzf-silent-p
          (message "%s%s" prompt choice))
        choice))

    (setq completing-read-function (apply-partially #'fzf-completing-read--base #'fzf))
    (advice-add #'completing-read-multiple :override (apply-partially #'fzf-completing-read--base #'fzf-multi))

    ;; A command line [[https://github.com/rejeep/commander.el][parser]] designed for emacs lisp
    (use-package commander :straight t :demand t)
  #+END_SRC

** bin/skeletor
   #+BEGIN_SRC emacs-lisp :tangle bin/skeletor
     <<script-init>>
     <<package-skeletor>>

     (require 'skeletor)

     (defvar dest-dir default-directory)
     (setq fzf-silent-p t)

     (advice-add #'skeletor--insert-shell-command-arrow :before
                 (lambda (dir cmd)
                   (message "--> [%s]: %s" (f-short dir) cmd)))

     (defun list-skeletor-projects ()
       (princ (concat
               (string-join (->> skeletor--project-types
                                 (-map 'SkeletorProjectType-title)
                                 (-sort 'string<))
                            "\n")
               "\n")))

     (defun create-skeletor-project (&optional project)
       (if-let ((skeleton (if project
                              (--first (equal project (SkeletorProjectType-title it))
                                       skeletor--project-types)
                            (skeletor--read-project-type))))
           (skeletor-expand-project+ skeleton dest-dir)
         (error "Failed to find project type %s" project)))

     (condition-case err
         (commander
          (description "Generate project directories from skeletor templates")
          (option "--help, -h" "Show usage information"
                  (lambda ()
                    (commander-print-usage)
                    (kill-emacs 0)))
          (command "list" "Show a list of all known skeletons" list-skeletor-projects)
          (command "create [project]"
                   "Create a new project from a template"
                   create-skeletor-project nil)
          (option "--output, -o <dir>" "Create project in DIR instead of: %s"
                  (lambda (arg) (setq dest-dir (file-truename arg)))))
       (error (progn
                (message "error: %s" err)
                (kill-emacs 1))))
   #+END_SRC

* Themes
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :family "Meslo LG S DZ")
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'custom-theme-load-path (etc! "themes"))
    (load-theme 'an-old-hope t)
  #+END_SRC

   Define some extra faces for use in a few different places.

   Custom face declarations like these should be put into ~early-init.el~ so they can
   be used in any packages in my config without needing to wait for all of ~init.el~ to
   be loaded.

   #+BEGIN_SRC emacs-lisp :tangle early-init.el
     (defface tab-bar-separator '((t (:inherit font-lock-string-face))) "")
     (defface tab-bar-inactive-separator '((t (:inherit shadow))) "")
   #+END_SRC

** an-old-hope
   :PROPERTIES:
   :header-args+: :tangle (etc! "themes/an-old-hope-theme.el")
   :END:

   #+NAME: an-old-hope-theme-description
   #+BEGIN_EXAMPLE
      Emacs theme inspired by a galaxy far far away...

      This theme is largely just a shot for shot copy of [[https://github.com/jesseleite/an-old-hope-syntax-atom][jesseleite/an-old-hope-syntax-atom]]
      ported to emacs because I refuse to live with an IDE that doesn't look like it XD.
      This theme isn't compatible with emacs in the terminal yet, when I find an easy way
      to approximate true-color colors to non-true-color colors, then I'll add support for
      it.
   #+END_EXAMPLE

   #+HEADER: :shebang ;; an-old-hope-theme.el -- a syntax theme from a galaxy far away... -*- lexical-binding: t -*-"
   #+BEGIN_SRC emacs-lisp :comments no
     ;; Author: Mohsin Kaleem
     ;; URL: https://github.com/MoHKale/an-old-hope-theme
     ;; Version: 0.1.0
     ;; Keywords: color, theme
     ;; Package-Requires: ((emacs "24"))

     ;; This file is not part of GNU Emacs

     ;; This file is free software; you can redistribute it and/or modify
     ;; it under the terms of the GNU General Public License as published by
     ;; the Free Software Foundation; either version 3, or (at your option)
     ;; any later version.

     ;; This program is distributed in the hope that it will be useful,
     ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ;; GNU General Public License for more details.

     ;; For a full copy of the GNU General Public License
     ;; see <http://www.gnu.org/licenses/>.

     ;; Commentary:
     ;; see https://github.com/MoHKale/an-old-hope-theme/tree/master/emacs
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :results silent :var desc=an-old-hope-theme-description
     (deftheme an-old-hope
       desc)
   #+END_SRC

   A helper which converts HSL values into RGB ratios and then RGB hex.

   #+NAME: aoh-gen-color
   #+BEGIN_SRC emacs-lisp :results value :tangle no :exports none :var hue=0 sat=0 light=0 approx=(eval nil)
     (require 'color)
     (require 'cl-lib)

     (cl-letf (((symbol-function 'smart-num)
                (lambda (arg)
                  (if (numberp arg)
                      arg
                    (string-to-number arg)))))
       (let* ((hue   (/ (smart-num hue)   360.0))
              (sat   (/ (smart-num sat)   100.0))
              (light (/ (smart-num light) 100.0))

              (rgb (color-hsl-to-rgb hue sat light)))
         (color-rgb-to-hex (nth 0 rgb) (nth 1 rgb) (nth 2 rgb) 2)))
   #+END_SRC

   Here we define the faces used by this theme, all of the an-old-hope colors are
   evaluated using the above helper and I provide 256-bit variants using the same
   HSL values and some of the various emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Terminal-Colors.html][text-terminal-colors]] functions.

   I define both the actual colors and the closest 256-color approximation of them.
   You can create more of these by spawning an emacs-terminal without 24-bit color
   and using the following function:

   #+BEGIN_SRC emacs-lisp :tangle no
     (defun aoh-gen-256-approximation (hue sat light)
       (cl-letf (((symbol-function 'smart-num)
                  (lambda (arg)
                    (if (numberp arg)
                        arg
                      (string-to-number arg)))))
         (let* ((hue   (/ (smart-num hue)   360.0))
                (sat   (/ (smart-num sat)   100.0))
                (light (/ (smart-num light) 100.0))

                (rgb (color-hsl-to-rgb hue sat light))
                (name (car (tty-color-approximate
                            (mapcar (lambda (c) (ceiling (* 65280 c))) rgb)))))
           (cons name
                 (apply 'format "#%02x%02x%02x"
                        (mapcar (lambda (c) (ash c -8))
                                (color-values name)))))))
   #+END_SRC

*** faces
    :PROPERTIES:
    :header-args+: :var cls=(eval t) tru=(quote ((type graphic) (min-colors 16777216))) gui=(quote ((type graphic)))
    :header-args+: :var   very-light-grey=aoh-gen-color(hue=228, sat=7,   light=81)     very-light-grey-256="#d0d0d0"
    :header-args+: :var        light-grey=aoh-gen-color(hue=228, sat=7,   light=55)          light-grey-256="#8a8a8a"
    :header-args+: :var              grey=aoh-gen-color(hue=228, sat=7,   light=44)                grey-256="#6c6c6c"
    :header-args+: :var         dark-grey=aoh-gen-color(hue=228, sat=7,   light=29)           dark-grey-256="#5f5f87"
    :header-args+: :var    very-dark-grey=aoh-gen-color(hue=228, sat=7,   light=12)      very-dark-grey-256="#1c1c1c"
    :header-args+: :var               red=aoh-gen-color(hue=352, sat=81,  light=58)                 red-256="#d75f5f"
    :header-args+: :var           red-dim=aoh-gen-color(hue=352, sat=60,  light=58)             red-dim-256="#d75f5f"
    :header-args+: :var           red-int=aoh-gen-color(hue=360, sat=90,  light=58)             red-int-256="#ff5f5f"
    :header-args+: :var            orange=aoh-gen-color(hue=25,  sat=86,  light=55)              orange-256="#ff8700"
    :header-args+: :var        orange-dim=aoh-gen-color(hue=25,  sat=60,  light=60)          orange-dim-256="#d7875f"
    :header-args+: :var        orange-int=aoh-gen-color(hue=25,  sat=86,  light=65)          orange-int-256="#ff875f"
    :header-args+: :var            yellow=aoh-gen-color(hue=50,  sat=74,  light=61)              yellow-256="#d7d75f"
    :header-args+: :var        yellow-dim=aoh-gen-color(hue=50,  sat=74,  light=31)          yellow-dim-256="#878700"
    :header-args+: :var        yellow-int=aoh-gen-color(hue=50,  sat=100, light=61)          yellow-int-256="#ffd75f"
    :header-args+: :var             green=aoh-gen-color(hue=107, sat=40,  light=57)               green-256="#87af5f"
    :header-args+: :var         green-int=aoh-gen-color(hue=120, sat=50,  light=57)           green-int-256="#5fd75f"
    :header-args+: :var         green-dim=aoh-gen-color(hue=107, sat=30,  light=50)           green-dim-256="#87af5f"
    :header-args+: :var              blue=aoh-gen-color(hue=196, sat=64,  light=58)                blue-256="#5fafd7"
    :header-args+: :var          blue-dim=aoh-gen-color(hue=200, sat=44,  light=58)            blue-dim-256="#5fafaf"
    :header-args+: :var          blue-int=aoh-gen-color(hue=220, sat=84,  light=64)            blue-int-256="#5f87ff"
    :header-args+: :var            purple=aoh-gen-color(hue=313, sat=32,  light=60)              purple-256="#af87af"
    :header-args+: :var        purple-dim=aoh-gen-color(hue=313, sat=32,  light=70)          purple-dim-256="#d787af"
    :header-args+: :var        purple-int=aoh-gen-color(hue=313, sat=40,  light=60)          purple-int-256="#af5faf"
    :header-args+: :var         turquoise=aoh-gen-color(hue=165, sat=70,  light=65)           turquoise-256="#5fd7d7"
    :header-args+: :var     turquoise-dim=aoh-gen-color(hue=165, sat=60,  light=85)       turquoise-dim-256="#afffd7"
    :header-args+: :var     turquoise-int=aoh-gen-color(hue=165, sat=80,  light=50)       turquoise-int-256="#00d7af"
    :header-args+: :var             black=aoh-gen-color(hue=240, sat=6,   light=14)               black-256="#262626"
    :header-args+: :var         black-dim=aoh-gen-color(hue=240, sat=10,  light=20)           black-dim-256="#00005f"
    :header-args+: :var         black-int=aoh-gen-color(hue=240, sat=6,   light=0)            black-int-256="#000000"
    :header-args+: :var             white=aoh-gen-color(hue=0,   sat=100, light=100)              white-256="#ffffff"
    :header-args+: :var line-highlight-bg=aoh-gen-color(hue=228, sat=7,   light=21)   line-highlight-bg-256="#303030"
    :header-args+: :var   extra-dark-grey=aoh-gen-color(hue=228, sat=7,   light=10)     extra-dark-grey-256="#00005f"
    :header-args+: :var             debug=aoh-gen-color(hue=198, sat=91,  light=13)               debug-256="#00005f"
    :header-args+: :var rainbow-delimeters-colors=(list "#E6B422" "#C70067" "#00A960" "#FC7482")
    :END:

    #+BEGIN_SRC emacs-lisp :tangle "early-init.el" :results silent
      (defface aoh-very-light-grey `((,tru (:foreground ,very-light-grey)) (,cls (:foreground ,very-light-grey-256))) "Face containing fg color very-light-grey from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-light-grey      `((,tru (:foreground ,light-grey))      (,cls (:foreground ,light-grey-256)))      "Face containing fg color light-grey from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-grey            `((,tru (:foreground ,grey))            (,cls (:foreground ,grey-256)))            "Face containing fg color grey from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-dark-grey       `((,tru (:foreground ,dark-grey))       (,cls (:foreground ,dark-grey-256)))       "Face containing fg color dark-grey from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-very-dark-grey  `((,tru (:foreground ,very-dark-grey))  (,cls (:foreground ,very-dark-grey-256)))  "Face containing fg color very-dark-grey from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-red             `((,tru (:foreground ,red))             (,cls (:foreground ,red-256)))             "Face containing fg color red from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-red-dim         `((,tru (:foreground ,red-dim))         (,cls (:foreground ,red-dim-256)))         "Face containing fg color red-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-red-int         `((,tru (:foreground ,red-int))         (,cls (:foreground ,red-int-256)))         "Face containing fg color red-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-orange          `((,tru (:foreground ,orange))          (,cls (:foreground ,orange-256)))          "Face containing fg color orange from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-orange-dim      `((,tru (:foreground ,orange-dim))      (,cls (:foreground ,orange-dim-256)))      "Face containing fg color orange-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-orange-int      `((,tru (:foreground ,orange-int))      (,cls (:foreground ,orange-int-256)))      "Face containing fg color orange-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-yellow          `((,tru (:foreground ,yellow))          (,cls (:foreground ,yellow-256)))          "Face containing fg color yellow from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-yellow-dim      `((,tru (:foreground ,yellow-dim))      (,cls (:foreground ,yellow-dim-256)))      "Face containing fg color yellow-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-yellow-int      `((,tru (:foreground ,yellow-int))      (,cls (:foreground ,yellow-int-256)))      "Face containing fg color yellow-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-green           `((,tru (:foreground ,green))           (,cls (:foreground ,green-256)))           "Face containing fg color green from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-green-int       `((,tru (:foreground ,green-int))       (,cls (:foreground ,green-int-256)))       "Face containing fg color green-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-green-dim       `((,tru (:foreground ,green-dim))       (,cls (:foreground ,green-dim-256)))       "Face containing fg color green-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-blue            `((,tru (:foreground ,blue))            (,cls (:foreground ,blue-256)))            "Face containing fg color blue from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-blue-dim        `((,tru (:foreground ,blue-dim))        (,cls (:foreground ,blue-dim-256)))        "Face containing fg color blue-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-blue-int        `((,tru (:foreground ,blue-int))        (,cls (:foreground ,blue-int-256)))        "Face containing fg color blue-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-purple          `((,tru (:foreground ,purple))          (,cls (:foreground ,purple-256)))          "Face containing fg color purple from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-purple-dim      `((,tru (:foreground ,purple-dim))      (,cls (:foreground ,purple-dim-256)))      "Face containing fg color purple-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-purple-int      `((,tru (:foreground ,purple-int))      (,cls (:foreground ,purple-int-256)))      "Face containing fg color purple-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-turquoise       `((,tru (:foreground ,turquoise))       (,cls (:foreground ,turquoise-256)))       "Face containing fg color turquoise from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-turquoise-dim   `((,tru (:foreground ,turquoise-dim))   (,cls (:foreground ,turquoise-dim-256)))   "Face containing fg color turquoise-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-turquoise-int   `((,tru (:foreground ,turquoise-int))   (,cls (:foreground ,turquoise-int-256)))   "Face containing fg color turquoise-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-black           `((,tru (:foreground ,black))           (,cls (:foreground ,black-256)))           "Face containing fg color black from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-black-dim       `((,tru (:foreground ,black-dim))       (,cls (:foreground ,black-dim-256)))       "Face containing fg color black-dim from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-black-int       `((,tru (:foreground ,black-int))       (,cls (:foreground ,black-int-256)))       "Face containing fg color black-int from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
      (defface aoh-white           `((,tru (:foreground ,white))           (,cls (:foreground ,white-256)))           "Face containing fg color white from [[https://github.com/mohkale/an-old-hope-theme][an-old-hope-theme]].")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :results silent
      (custom-theme-set-faces 'an-old-hope
      ;;; defaults
       `(default
          ((,tru (:foreground ,very-light-grey :background ,very-dark-grey))
           ;; let the terminal inherit its background from the terminals default.
           (,cls (:foreground ,very-light-grey-256))))

       `(italic ((,cls (:italic t))))
       `(shadow ((,cls (:foreground ,light-grey))))
       `(hl-line ((,cls (:background ,line-highlight-bg))))

       `(error   ((,cls (:background ,red        :distant-foreground ,red        :foreground ,very-dark-grey :inherit bold))))
       `(success ((,cls (:background ,green-int  :distant-foreground ,green-int  :foreground ,very-dark-grey :inherit bold))))
       `(warning ((,cls (:background ,yellow-int :distant-foreground ,yellow-int :foreground ,very-dark-grey :inherit bold))))

       `(cursor ((,cls (:background ,blue))))
       `(custom-button ((,cls (:background ,very-dark-grey
                               :foreground ,very-light-grey
                               :box (:line-width 2 :style released-button)))))

      ;;; font-lock - Syntax Highlighting Colors
       `(font-lock-builtin-face ((,cls (:foreground ,blue))))
       `(font-lock-comment-face ((,cls (:foreground ,grey))))
       `(font-lock-keyword-face ((,cls (:foreground ,green-256))))
       `(font-lock-constant-face ((,cls (:foreground ,red-256 :inherit bold))))
       `(font-lock-function-name-face ((,cls (:foreground ,yellow-int-256))))
       `(font-lock-negation-char-face ((,cls (:foreground ,red-256))))
       `(font-lock-preprocessor-face ((,cls (:inherit font-lock-keyword-face))))
       `(font-lock-string-face ((,cls (:foreground ,blue))))
       `(font-lock-doc-face ((t (:foreground ,blue))))
       `(font-lock-type-face ((,cls (:foreground ,red-256))))
       `(font-lock-variable-name-face ((,cls (:foreground ,yellow-int-256))))
       `(font-lock-warning-face ((,cls (:background ,yellow-int
                                        :foreground ,very-dark-grey
                                        :distant-foreground ,yellow-int
                                        :underline nil :inherit bold))))

      ;;; Tree sitter
       ;; An alternative to `font-lock-mode' with considerably more diverse highlighting.
       `(tree-sitter-hl-face:number ((,cls (:inherit default))))
       `(tree-sitter-hl-face:doc ((,cls (:inherit font-lock-comment-face))))
       `(tree-sitter-hl-face:property ((,cls (:inherit default))))
       `(tree-sitter-hl-face:tag ((,cls (:inherit font-lock-type-face))))
       `(tree-sitter-hl-face:attribute ((,cls (:inherit font-lock-variable-name-face))))
       `(tree-sitter-hl-face:attribute ((,cls (:inherit font-lock-variable-name-face))))
       `(tree-sitter-hl-face:constructor ((,cls (:inherit font-lock-function-name-face))))
       `(tree-sitter-hl-face:method.call ((,cls (:inherit font-lock-function-name-face))))
       `(tree-sitter-hl-face:function.call ((,cls (:inherit font-lock-function-name-face))))
       `(tree-sitter-hl-face:string.special ((,cls (:inherit font-lock-string-face))))
       `(tree-sitter-hl-face:type.parameter ((,cls (:inherit font-lock-variable-name-face))))
       `(tree-sitter-hl-face:function.special ((,cls (:inherit font-lock-builtin-face))))
       `(tree-sitter-hl-face:variable.special ((,cls (:inherit (;italic
                                              font-lock-variable-name-face)))))

       ;; Fringe has a different background on the GUI and the terminal, because the default bg
       ;; on the terminal is taken from the terminal bg. We apply a variant color for the fringe
       ;; on the terminal to make it distinctive.
       `(fringe
          ((,gui (:background ,black))
           (,cls (:background ,very-dark-grey))))
       `(header-line ((,cls (:background ,very-dark-grey :foreground ,blue))))
       `(line-number ((,cls (:foreground ,very-light-grey :inherit fringe))))
       `(line-number-current-line ((,cls (:foreground ,blue :inherit line-number))))
       `(vertical-border ((,cls (:foreground ,grey))))
       `(internal-border ((,cls (:foreground ,white :background ,white))))
       `(completions-annotations ((,cls (:inherit shadow))))
       `(minibuffer-prompt ((,cls (:foreground ,yellow-256 :weight bold))))
       `(minibuffer-depth-indicator ((,cls (:foreground ,yellow-256 :weight bold))))
       `(tooltip ((,cls (:background ,dark-grey :foreground ,very-light-grey))))

       `(highlight ((,cls (:foreground ,very-dark-grey :background ,blue :inherit bold))))

       `(region ((,cls (:background ,dark-grey :weight bold))))
       `(secondary-selection ((,cls (:inherit region))))

       ;; face for current search match. exiting now takes you to it.
       `(isearch ((,cls (:background ,blue-int :inherit bold))))
       `(isearch-fail ((,cls (:inherit compilation-mode-line-fail))))
       `(match ((,cls (:foreground ,green-int))))
       ;; face for matches other than the current match
       `(evil-ex-search ((,cls (:background ,purple :inherit bold))))
       `(lazy-highlight ((,cls (:background ,blue-int :foreground ,black-dim))))

       `(separator-line ((,cls (:foreground ,blue))))

       ;; delimeter colors just taken from https://github.com/gastrodia/rainbow-brackets
       ;; colors 5-9 just recycle 1-4, maybe come up with more.
       `(rainbow-delimiters-depth-1-face ((,cls (:foreground ,(nth 0 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-2-face ((,cls (:foreground ,(nth 1 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-3-face ((,cls (:foreground ,(nth 2 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-4-face ((,cls (:foreground ,(nth 3 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-5-face ((,cls (:foreground ,(nth 0 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-6-face ((,cls (:foreground ,(nth 1 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-7-face ((,cls (:foreground ,(nth 2 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-8-face ((,cls (:foreground ,(nth 3 rainbow-delimeters-colors)))))
       `(rainbow-delimiters-depth-9-face ((,cls (:foreground ,(nth 0 rainbow-delimeters-colors)))))

       ;; hyperlinks and path links
       `(link ((,cls (:foreground ,blue))))
       `(link-visited ((,cls (:foreground ,turquoise :inherit link))))

       `(hl-todo ((,cls (:foreground ,yellow-int :inherit bold))))

      ;;; modeline
       `(mode-line ((,cls
                     (:background ,very-light-grey :foreground ,very-dark-grey
                      :box (:line-width 1 :color ,very-light-grey :style none)))))
       `(mode-line-inactive ((,cls
                              (:weight light :foreground "grey80" :background "grey30"
                               :box (:line-width 1 :color "grey40" :style none)))))
       `(mode-line-highlight ((,cls (:inherit italic))))

       `(+mode-line-linter-info ((,cls (:foreground ,green-dim))))
       `(+mode-line-linter-warning ((,cls (:foreground ,blue-dim))))
       `(+mode-line-linter-error ((,cls (:foreground ,red-dim))))

       `(+mode-line-evil-normal-state  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background "DarkGoldenrod2"))))
       `(+mode-line-evil-emacs-state   ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,blue))))
       `(+mode-line-evil-insert-state  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,green-int-256))))
       `(+mode-line-evil-motion-state  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,purple-int))))
       `(+mode-line-evil-visual-state  ((,cls (:inherit mode-line :foreground ,very-light-grey :background ,dark-grey))))
       `(+mode-line-evil-operator-state ((,cls (:weight normal :inherit (error spaceline-evil-motion)))))
       `(+mode-line-evil-replace-state ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,turquoise-int))))
       `(+mode-line-buffer-minor-mode ((,cls (:foreground ,purple))))

       `(+mode-line-host-face ((,cls (:inherit +mode-line-host-face))))

       `(compilation-mode-line-fail ((,cls (:inherit bold :foreground ,red-dim))))
       `(compilation-mode-line-run  ((,cls (:inherit bold :foreground ,orange-dim))))
       `(compilation-mode-line-exit  ((,cls (:inherit bold :foreground ,green-dim))))

       `(magit-mode-line-process-error ((,cls (:inherit compilation-mode-line-fail))))

      ;;; powerline
       `(powerline-active1 ((,gui (:background ,black :foreground ,very-light-grey :inherit mode-line))
                            (,cls (:foreground ,very-light-grey :inherit default))))
       `(powerline-active2 ((,cls (:inherit powerline-active1))))
       `(powerline-inactive1 ((,cls (:box (:line-width 1 :color "grey40" :style none)
                                     :inherit powerline-active1))))

      ;;; spaceline
       `(spaceline-evil-normal  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background "DarkGoldenrod2"))))
       `(spaceline-evil-insert  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,green-int-256))))
       `(spaceline-evil-emacs   ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,blue))))
       `(spaceline-evil-replace ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,turquoise-int))))
       `(spaceline-evil-visual  ((,cls (:inherit mode-line :foreground ,very-light-grey :background ,dark-grey))))
       `(spaceline-evil-motion  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,purple-int))))
       `(spaceline-minibuffer   ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,blue))))
       `(spaceline-evil-operator ((,cls (:weight normal :inherit (error spaceline-evil-motion)))))

       `(spaceline-flycheck-error   ((,cls (:inherit compilation-mode-line-fail))))
       `(spaceline-flycheck-warning ((,cls (:inherit compilation-mode-line-run))))
       `(spaceline-flycheck-info    ((,cls (:inherit compilation-mode-line-exit))))

      ;;; doom-modeline
       `(doom-modeline-evil-normal-state ((,cls (:inherit +mode-line-evil-normal-state))))
       `(doom-modeline-evil-emacs-state ((,cls (:inherit +mode-line-evil-emacs-state))))
       `(doom-modeline-evil-insert-state ((,cls (:inherit +mode-line-evil-insert-state))))
       `(doom-modeline-evil-motion-state ((,cls (:inherit +mode-line-evil-motion-state))))
       `(doom-modeline-evil-visual-state ((,cls (:inherit +mode-line-evil-visual-state))))
       `(doom-modeline-evil-operator-state ((,cls (:inherit +mode-line-evil-operator-state))))
       `(doom-modeline-evil-replace-state ((,cls (:inherit +mode-line-evil-replace-state))))

       `(doom-modeline-buffer-modified ((,cls (:inherit doom-modeline-buffer-file))))
       `(doom-modeline-lsp-error ((,cls (:inherit compilation-mode-line-fail))))
       `(doom-modeline-lsp-warning ((,cls (:inherit compilation-mode-line-run))))
       `(doom-modeline-lsp-success ((,cls ())))
       `(doom-modeline-lsp-running ((,cls (:foreground ,blue-int :inherit compilation-mode-line-run))))

       `(doom-modeline-urgent ((,cls (:inherit compilation-mode-line-fail))))
       `(doom-modeline-debug ((,cls (:inherit compilation-mode-line-run))))
       `(doom-modeline-info ((,cls (:inherit compilation-mode-line-exit))))

       `(doom-modeline-buffer-minor-mode ((,cls (:inherit +mode-line-buffer-minor-mode))))
       `(doom-modeline-panel ((,cls (:foreground ,very-dark-grey))))

      ;;; magit/forge
       `(forge-post-author ((,cls (:inherit magit-log-author))))

      ;;; evil
       `(vimish-fold-overlay ((,cls (:background ,dark-grey :foreground ,green))))

      ;;; flycheck
       `(flycheck-fringe-info    ((,cls (:foreground ,green-int  :inherit fringe))))
       `(flycheck-fringe-warning ((,cls (:foreground ,yellow-int :inherit fringe))))
       `(flycheck-fringe-error   ((,cls (:foreground ,red-int    :inherit fringe))))

       `(flycheck-info      ((,cls (:underline (:style wave :color ,green)))))
       `(flycheck-warning   ((,cls (:underline (:style wave :color ,yellow)))))
       `(flycheck-duplicate ((,cls (:underline (:style wave :color ,orange)))))
       `(flycheck-error     ((,gui (:underline (:style wave :color ,red)))
                             (,cls (:background ,red-256 :inherit error))))

      ;;; flymake
       `(flymake-note    ((,cls (:underline (:style wave :color ,green)))))
       `(flymake-warning ((,cls (:underline (:style wave :color ,yellow)))))
       `(flymake-error   ((,gui (:underline (:style wave :color ,red)))
                          (,cls (:background ,red-256 :inherit error))))

      ;;; flyspell
       `(flyspell-duplicate ((,cls (:foreground ,orange-dim :underline t))))
       `(flyspell-incorrect ((,cls (:foreground ,red-dim :underline t))))

      ;;; avy
       `(avy-background-face ((,cls (:foreground ,grey))))

       ;; Same as the corresponding evil faces but adjustedusing [[https://webaim.org/resources/contrastchecker/][contrast-checker]].
       `(avy-lead-face   ((,cls (:background "#B00303" :foreground ,white))))
       `(avy-lead-face-0 ((,cls (:background "#124FCA" :foreground ,white))))
       `(avy-lead-face-1 ((,cls (:background ,very-light-grey :foreground ,very-dark-grey))))
       `(avy-lead-face-2 ((,cls (:background "#883A77" :foreground ,white))))

       ;; Not avy, but avy like enough
       `(selectrum-quick-keys-highlight ((,cls (:background "#B00303" :foreground ,white))))
       `(selectrum-quick-keys-match ((,cls (:background "#124FCA" :foreground ,white))))
       `(vertico-quick1 ((,cls (:background "#B00303" :foreground ,white))))
       `(vertico-quick1 ((,cls (:background "#124FCA" :foreground ,white))))

       `(frog-menu-border ((,cls (:background ,white :foreground ,white))))
       `(frog-menu-posframe-background-face ((,cls (:background ,very-dark-grey))))

      ;;; company - intellisense
       `(company-tooltip-mouse ((,cls (:foreground ,turquoise-int))))
       `(company-template-field ((,cls (:foreground ,turquoise-int))))

       ;; scrollbar
       `(company-tooltip-scrollbar-track ((,cls (:background ,line-highlight-bg :foreground ,very-light-grey))))
       `(company-tooltip-scrollbar-thumb ((,cls (:background ,red               :foreground ,dark-grey))))

       `(company-preview ((,cls (:foreground ,blue-int :weight bold :inherit hl-line))))
       `(company-preview-common ((,cls (:inherit company-preview))))
       `(company-preview-search ((,cls (:foreground ,orange-int :weight normal :inherit company-preview))))

       ;; NOTE tooltip is the drop down menu which shows up when multiple results exist
       `(company-tooltip ((,cls (:background ,black-dim :inherit tooltip))))
       `(company-tooltip-common ((,cls (:foreground ,red :inherit (company-tooltip bold)))))
       `(company-tooltip-search ((,cls (:foreground ,blue-int :inherit company-tooltip))))
       `(company-tooltip-search-common ((,cls (:inherit company-tooltip-search))))

       `(company-tooltip-selection ((,cls (:background ,dark-grey :inherit company-tooltip))))
       `(company-tooltip-common-selection ((,cls (:background ,dark-grey :inherit company-tooltip-common))))
       `(company-tooltip-search-selection ((,cls (:background ,dark-grey :inherit (company-tooltip-search)))))

       `(company-icon+ ((,cls (:weight normal :inherit company-tooltip))))
       `(company-current-icon+ ((,cls (:weight normal :inherit company-tooltip-selection))))

       ;; NOTE annotations are extra information in the tooltip
       `(company-tooltip-annotation ((,cls (:weight bold :foreground ,grey))))
       `(company-tooltip-annotation-selection ((,cls (:inherit company-tooltip-annotation))))

       `(popup ((,cls (:inherit popup-face))))

      ;;;; custom mode variants
      ;;; whitespace-mode
       `(whitespace-space ((,cls (:foreground ,dark-grey))))
       `(trailing-whitespace ((,cls (:background ,dark-grey))))

      ;;; auto-highlight-symbol mode
       ;; NOTE: distant foreground is meaningless here because the faces are always given priority.
       `(ahs-definition-face ((,cls (:background ,blue-dim :distant-foreground ,blue-dim :foreground ,dark-grey))))
       `(ahs-edit-mode-face ((,cls (:background ,red-dim :distant-foreground ,red-dim :foreground ,very-light-grey))))
       `(ahs-face ((,cls (:background ,very-light-grey :foreground ,black :inherit bold))))
       `(ahs-plugin-whole-buffer-face ((,cls (:background ,blue :distant-foreground ,green :foreground ,black))))
       `(ahs-plugin-bod-face ((,cls (:background ,blue-int :distant-foreground ,blue-int :foreground ,black))))
       `(ahs-plugin-defalt-face ((,cls (:background ,orange-dim :distant-foreground ,orange-dim :foreground ,black))))
       `(ahs-warning-face ((,cls (:foreground ,red-dim))))

      ;;; compilation mode
       `(compilation-line-number ((,cls (:foreground ,yellow))))
       `(compilation-column-number ((,cls (:inherit font-lock-doc-face))))

       ;; NOTE also represents value count in mode line
       `(compilation-error ((,cls (:foreground ,red :inherit bold))))
       `(compilation-info ((,cls (:foreground ,green-int :inherit bold))))
       `(compilation-warning ((,cls (:foreground ,orange-int :inherit bold))))

      ;;; markdown-mode
       `(markdown-code-face ((,cls (:inherit default))))

      ;;; anzu
       `(anzu-mode-line ((,cls (:foreground ,very-dark-grey :inherit bold))))
       `(anzu-mode-line-no-match ((,cls (:foreground ,red-int :inherit bold))))

      ;;; hydra-posframe
       ;; for some reason... if hydra-posframe-face inherits default, internal border won't work
       `(hydra-posframe-face ((,cls (:background ,very-dark-grey :foreground ,very-light-grey))))
       `(hydra-posframe-border-face ((,cls (:inherit internal-border))))

      ;;; selectrum
       ;; TODO: Remove non-prescient variants
       `(selectrum-current-candidate ((,cls (:foreground ,very-dark-grey :weight bold :inherit highlight))))
       `(selectrum-primary-highlight ((,cls (:background "#555555"))))
       `(selectrum-prescient-current-candidate ((,cls (:foreground ,very-dark-grey :weight bold :inherit highlight))))
       `(selectrum-prescient-primary-highlight ((,cls (:background "#555555"))))
       `(selectrum-secondary-highlight ((,cls (:background "#7777FF")))) ;; #8A498A
       `(selectrum-mouse-highlight ((,cls (:underline t))))

      ;;; consult
       `(consult-async-finished ((,cls (:inherit compilation-info))))
       `(consult-async-running ((,cls (:inherit compilation-warning))))
       `(consult-async-failed ((,cls (:inherit compilation-error))))
       `(consult-narrow-indicator ((,cls (:foreground ,blue :weight bold))))
       `(consult-preview-match ((,cls (:foreground ,blue-int :weight bold))))

      ;;; orderless
       ;; Match face were taken from ivys default match faces.
       `(orderless-match-face-0 ((,cls (:background "#555555"))))
       `(orderless-match-face-1 ((,cls (:background "#777777"))))
       `(orderless-match-face-2 ((,cls (:background "#7777ff"))))
       `(orderless-match-face-3 ((,cls (:background "#8a498a"))))
       `(completions-common-part ((,cls (:background "#555555"))))
       `(completions-first-difference ((,cls )))

      ;;; swiper
       `(swiper-match-face-1 ((,cls (:background "#555555"))))
       `(swiper-match-face-2 ((,cls (:background "#777777"))))
       `(swiper-match-face-3 ((,cls (:background "#7777ff"))))
       `(swiper-match-face-4 ((,cls (:background "#8a498a"))))

      ;;; ivy
       ;; by default, it seems if ivy-highlight-face has its own spec, it'll interfere
       ;; with the face of ivy-current-match. Which'll make it harder to tell which
       ;; candidate is the current candidate.
       ;;
       ;; If ivy-highlight-face just inherits another face, then when both it and
       ;; ivy-current-match are applied to a string, ivy-current-match will override
       ;; ivy-highlight-face. Thus, this.
       `(ivy-actual-highlight-face ((,cls (:foreground ,very-dark-grey :background ,turquoise
                                           :distant-foreground ,turquoise :inherit bold))))
       `(ivy-highlight-face ((,cls (:inherit ivy-actual-highlight-face))))
       `(ivy-current-match ((,cls (:foreground ,very-dark-grey :weight bold :inherit highlight))))

      ;;; org-mode
       `(org-link ((,cls (:inherit (link bold)))))
       `(org-footnote ((,cls (:foreground ,blue))))
       `(org-tag ((,cls (:foreground ,purple-int :inherit bold))))
       `(org-code ((,cls (:inherit shadow))))

      ;;; org-ref
       ;; All of these have their own distinct look and feel, but honestly
       ;; their just links so distinguishing them is unecessary in most cases.
       `(org-ref-ref-face ((,cls (:inherit org-link))))
       `(org-ref-cite-face ((,cls (:foreground ,green-int :inherit org-link))))
       `(org-ref-label-face ((,cls (:inherit org-link))))
       `(org-ref-acronym-face ((,cls (:inherit org-link))))
       `(org-ref-glossary-face ((,cls (:inherit org-link))))

       ;; Overridden by hl-todo-keyword-faces
       `(org-todo ((,cls (:foreground ,purple-int :inherit bold))))
       `(org-done ((,cls (:foreground ,green-int :inherit bold))))

       `(org-upcoming-deadline ((,cls (:foreground ,red-dim))))
       `(org-warning ((,cls (:foreground ,orange :inherit bold))))
       `(org-scheduled-today ((,cls (:foreground ,green-int))))
       `(org-block-begin-line ((,cls (:background "royalblue4" :distant-foreground "royalblue4" :foreground "steelblue1" :extend t))))
       `(org-meta-line ((,cls (:inherit font-lock-comment-face))))

       `(org-block ((,cls (:background ,extra-dark-grey :extend t))))
       `(org-document-title ((,cls (:foreground ,white :height 1.3 :inherit bold))))

      ;;; rust[ic]-mode
       `(rustic-compilation-warning ((,cls (:inherit compilation-warning))))
       `(rustic-compilation-info ((,cls (:inherit compilation-info))))
       `(rustic-compilation-error ((,cls (:inherit compilation-error))))
       `(rustic-compilation-column ((,cls (:inherit compilation-column-number))))
       `(rustic-compilation-line ((,cls (:inherit compilation-line-number))))

      ;;; dired
       `(dired-symlink ((,cls (:foreground ,blue))))
       `(dired-special ((,cls (:foreground ,purple))))

       `(diredfl-dir-name ((,cls (:inherit dired-directory))))
       `(diredfl-file-name ((,cls (:inherit default))))
       `(diredfl-dir-heading ((,cls (:inherit dired-header))))
       `(diredfl-number ((,cls (:inherit font-lock-function-name-face))))
       `(diredfl-date-time ((,cls (:inherit shadow))))
       `(diredfl-file-suffix ((,cls (:inherit default))))
       `(diredfl-symlink ((,cls (:inherit font-lock-doc-face))))
       `(diredfl-deletion ((,cls (:inherit error))))
       `(diredfl-deletion-file-name ((,cls (:foreground ,red :inherit bold))))
       `(diredfl-flag-mark ((,cls (:inherit diredfl-deletion-file-name))))
       `(diredfl-flag-mark-line ((,cls (:foreground ,yellow))))
       `(diredfl-no-priv ((,cls (:inherit shadow))))
       `(diredfl-read-priv ((,cls (:foreground ,red))))
       `(diredfl-write-priv ((,cls (:foreground ,green))))
       `(diredfl-exec-priv ((,cls (:foreground ,yellow))))
       `(diredfl-rare-priv ((,cls (:foreground ,blue :inherit bold))))
       `(diredfl-dir-priv ((,cls (:foreground ,yellow :inherit bold))))

      ;;; neotree
       `(neo-dir-link-face ((,cls (:inherit dired-directory))))
       `(neo-root-dir-face ((,cls (:inherit dired-header))))
       `(neo-banner-face ((,cls (:inherit dired-header))))
       `(neo-header-face ((,cls (:inherit dired-header))))
       `(neo-vc-added-face ((,cls (:inherit green-int))))
       `(neo-vc-edited-face ((,cls (:inherit purple-int))))
       `(neo-vc-ignored-face ((,cls (:inherit shadow))))

      ;;; dashboard
       `(dashboard-text-banner ((,cls (:foreground ,orange-int))))
       `(dashboard-items-face ((,cls (:weight normal))))
       `(dashboard-no-items-face ((,cls (:weight normal))))
       `(dashboard-heading ((,cls (:inherit (bold dashboard-navigator)))))

      ;;; eshell-prompt-extras
       `(epe-remote-face ((,cls (:foreground ,turquoise))))
       `(epe-venv-face ((,cls (:foreground ,purple))))

      ;;; typescript
       `(typescript-primitive-face ((,cls (:inherit font-lock-type-face))))

      ;;; latex
       `(font-latex-sedate-face       ((,cls (:inherit font-lock-keyword-face))))
       `(font-latex-sectioning-0-face ((,cls (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-1-face ((,cls (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-2-face ((,cls (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-3-face ((,cls (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-4-face ((,cls (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-5-face ((,cls (:inherit font-lock-function-name-face))))

      ;;; man/woman
       `(Man-underline  ((,cls (:foreground ,green-int :inherit bold))))
       `(Man-overstrike ((,cls (:foreground ,red :inherit bold))))
       `(woman-addition ((,cls (:foreground ,purple))))
       `(woman-bold     ((,cls (:foreground ,red :inherit bold))))
       `(woman-italic   ((,cls (:foreground ,green))))
       `(woman-unknown  ((,cls (:inherit error))))

      ;;; vline
       `(vline ((,cls (:inherit hl-line))))
       `(vline-visual ((,cls (:inherit hl-line))))

      ;;; marginalia
       `(marginalia-documentation ((,cls (:inherit font-lock-comment-face))))
       `(marginalia-on ((,cls (:foreground ,green-int :inherit bold))))
       `(marginalia-off ((,cls (:foreground ,red :inherit bold))))

      ;;; embark
       `(embark-target ((,cls (:foreground ,blue :inherit bold))))
       `(embark-keybinding ((,cls (:foreground ,green-int :inherit bold))))

      ;;; term
       `(term-color-black ((,cls (:foreground ,dark-grey :background ,dark-grey))))
       `(term-color-red ((,cls (:foreground ,red :background ,red))))
       `(term-color-cyan ((,cls (:foreground ,turquoise :background ,turquoise))))
       `(term-color-blue ((,cls (:foreground ,blue :background ,blue))))
       `(term-color-white ((,cls (:foreground ,white :background ,white))))
       `(term-color-green ((,cls (:foreground ,green :background ,green))))
       `(term-color-yellow ((,cls (:foreground ,yellow :background ,yellow))))
       `(term-color-magenta ((,cls (:foreground ,purple :background ,purple))))

      ;;; logview-mode
       `(logview-pulse ((,cls (:inherit highlight))))
       `(logview-highlight ((,cls (:inherit evil-ex-lazy-highlight))))
       `(logview-level-trace ((,cls (:inherit font-lock-comment-face))))
       `(logview-level-debug ((,cls (:inherit font-lock-function-name-face))))
       `(logview-level-information ((,cls (:inherit font-lock-keyword-face))))
       `(logview-level-warning ((,cls (:foreground ,orange-int))))
       `(logview-level-error ((,cls (:inherit font-lock-type-face))))

       `(logview-trace-entry ((,cls (:inherit default))))
       `(logview-debug-entry ((,cls (:inherit default))))
       `(logview-information-entry ((,cls (:inherit default))))
       `(logview-warning-entry ((,cls (:inherit default))))
       `(logview-error-entry ((,cls (:inherit default))))

      ;;; GNU info
       `(info-title-1 ((,cls (:inherit (font-lock-function-name-face bold)))))
       `(info-title-2 ((,cls (:foreground ,red-256))))
       `(info-title-3 ((,cls (:foreground ,green-256))))
       `(info-title-4 ((,cls (:foreground ,green-256))))
       `(info-quoted ((,cls (:inherit shadow))))
       `(info-menu-star ((,cls (:foreground ,red))))
       `(info-xref ((,cls (:inherit (link bold)))))
       `(info-xref-visited ((,cls (:underline ,blue :inherit (link bold)))))
       `(info-menu-header ((,cls (:inherit info-header-node)))) ;; not sure what the difference is

      ;;; xref
       `(xref-match ((,cls (:foreground ,red :inherit bold))))

      ;;; help
       `(help-key-binding ((,cls (:foreground ,turquoise))))

      ;;; mu4e/gnus/message/notmuch
       `(message-header-name ((,cls (:inherit font-lock-keyword-face))))
       `(message-header-other ((,cls (:inherit default))))
       `(message-header-to ((,cls (:inherit (bold font-lock-function-name-face)))))
       `(message-header-subject ((,cls (:inherit font-lock-type-face))))
       `(message-header-cc ((,cls (:inherit font-lock-string-face))))
       `(message-header-xheader ((,cls (:foreground ,turquoise-int))))
       `(message-header-newsgroups ((,cls (:inherit (italic message-header-other)))))
       `(message-separator ((,cls (:inherit shadow))))
       `(message-mml ((,cls (:foreground ,turquoise-int))))
       ;; message-cited-text-1
       ;; message-cited-text-2
       ;; message-cited-text-3
       ;; message-cited-text-4

       `(mu4e-highlight-face ((,cls (:inherit (bold font-lock-string-face)))))

       `(gnus-header-from ((,cls (:inherit message-header-to))))
       `(gnus-header-name ((,cls (:inherit message-header-name))))
       `(gnus-header-content ((,cls (:inherit message-header-other))))
       `(gnus-header-subject ((,cls (:inherit message-header-subject))))
       `(gnus-header-newsgroups ((,cls (:inherit message-header-newsgroups))))

       `(notmuch-tag-face ((,cls (:inherit font-lock-keyword-face))))
       `(notmuch-tag-unread ((,cls (:inherit font-lock-type-face))))
       `(notmuch-tag-flagged ((,cls (:inherit font-lock-string-face))))
       `(notmuch-tree-match-tag-face ((,cls (:inherit (bold notmuch-tag-face)))))
       `(notmuch-crypto-signature-bad ((,cls (:inherit error :weight normal))))
       `(notmuch-crypto-signature-unknown ((,cls (:foreground ,yellow))))
       `(notmuch-crypto-signature-good ((,cls (:foreground ,green-int))))
       `(notmuch-crypto-signature-good-key ((,cls (:inherit notmuch-crypto-signature-good))))
       `(notmuch-crypto-decryption ((,cls (:inherit notmuch-crypto-signature-good))))
       `(notmuch-search-matching-authors ((,cls (:inherit notmuch-tree-match-author-face))))

      ;;; tab-bar
       ;; `(tab-bar)
       `(tab-bar-tab ((,cls (:foreground ,white :inherit default))))
       `(tab-bar-tab-inactive ((,cls (:foreground ,very-light-grey :background ,black-dim))))
       `(tab-bar-separator ((,cls (:foreground ,blue :inherit tab-bar-tab))))
       `(tab-bar-inactive-separator ((,cls (:foreground "black" :inherit tab-bar-tab-inactive))))

       ;; (tab-bar-tab-ungrouped)
       ;; (tab-bar-tab-group-current)
       ;; (tab-bar-tab-group-inactive)

      ;;; git-gutter
       `(git-gutter:added ((,cls (:foreground ,green-int :inherit bold))))
       `(git-gutter:deleted ((,cls (:foreground ,red-int :inherit bold))))
       `(git-gutter:modified ((,cls (:foreground ,purple-int :inherit bold))))
       `(git-gutter:modified ((,cls (:foreground ,light-grey :inherit bold))))
       `(git-gutter:separator ((,cls (:foreground ,turquoise :inherit bold))))

       `(diff-hl-change ((,cls (:foreground ,purple-int :inherit bold))))
       `(diff-hl-insert ((,cls (:foreground ,green-int :inherit bold))))
       `(diff-hl-delete ((,cls (:foreground ,red-int :inherit bold))))

      ;;; sh-mode
       `(sh-heredoc ((,cls (:inherit font-lock-string-face))))

      ;;; diffs
       ;; These were taken directly from `magit'.
       `(diff-added   ((,cls (:foreground "#ddffdd" :background "#335533" :extend t)))) ;; `magit-diff-added'
       `(diff-removed ((,cls (:foreground "#ffdddd" :background "#553333" :extend t)))) ;; `magit-diff-removed'
       `(diff-changed ((,cls (:foreground "#ffddff" :background "#553355" :extend t)))) ;; Adapted from `magit-diff-base'

       `(magit-diff-base ((,cls (:inherit diff-changed))))
       `(diff-refine-changed ((,cls (:background "#aa22aa"))))

      ;;; evil-traces
       ;; Taken almost directly from `evil-traces-use-diff-faces'.
       ;; Except diff-changed has been converted to the default-face.
       `(evil-traces-change           ((t (:inherit diff-removed))))
       `(evil-traces-copy-preview     ((t (:inherit diff-added))))
       `(evil-traces-copy-range       ((t (:inherit default))))
       `(evil-traces-delete           ((t (:inherit diff-removed))))
       `(evil-traces-global-match     ((t (:inherit diff-added))))
       `(evil-traces-global-range     ((t (:inherit default))))
       `(evil-traces-join-indicator   ((t (:inherit diff-added))))
       `(evil-traces-join-range       ((t (:inherit default))))
       `(evil-traces-move-preview     ((t (:inherit diff-added))))
       `(evil-traces-move-range       ((t (:inherit diff-removed))))
       `(evil-traces-normal           ((t (:inherit default))))
       `(evil-traces-shell-command    ((t (:inherit default))))
       `(evil-traces-substitute-range ((t (:inherit default))))
       `(evil-traces-yank             ((t (:inherit default))))
       `(evil-ex-substitute-matches
         ((t (:inherit diff-removed :foreground unspecified :background unspecified))))
       `(evil-ex-substitute-replacement
         ((t (:inherit diff-added :foreground unspecified :background unspecified))))

      ;; ansi-colors
       ;; TODO: On terminal frames inherit from terminal instead of custom colors.
       `(ansi-color-red ((,cls (:foreground ,red :background ,red))))
       `(ansi-color-blue ((,cls (:foreground ,blue :background ,blue))))
       `(ansi-color-cyan ((,cls (:foreground ,turquoise :background ,turquoise))))
       `(ansi-color-black ((,cls (:foreground ,black :background ,black))))
       `(ansi-color-green ((,cls (:foreground ,green :background ,green))))
       `(ansi-color-white ((,cls (:foreground ,white :background ,white))))
       `(ansi-color-yellow ((,cls (:foreground ,yellow :background ,yellow))))
       `(ansi-color-magenta ((,cls (:foreground ,purple :background ,purple))))

       `(ansi-color-bright-red ((,cls (:foreground ,red-int :background ,red-int))))
       `(ansi-color-bright-blue ((,cls (:foreground ,blue-int :background ,blue-int))))
       `(ansi-color-bright-cyan ((,cls (:foreground ,turquoise-int :background ,turquoise-int))))
       `(ansi-color-bright-black ((,cls (:foreground ,dark-grey :background ,dark-grey))))
       `(ansi-color-bright-green ((,cls (:foreground ,green-int :background ,green-int))))
       `(ansi-color-bright-white ((,cls (:foreground ,white :background ,white))))
       `(ansi-color-bright-yellow ((,cls (:foreground ,yellow-int :background ,yellow-int))))
       `(ansi-color-bright-magenta ((,cls (:foreground ,purple-int :background ,purple-int))))

      ;; outline
       ;; `(outline-1 ((,cls (:inherit font-lock-function-name-face))))
       ;; `(outline-2 ((,cls (:inherit font-lock-variable-name-face))))
       ;; `(outline-3 ((,cls (:inherit font-lock-keyword-face))))
       ;; `(outline-4 ((,cls (:inherit font-lock-comment-face))))
       ;; `(outline-5 ((,cls (:inherit font-lock-type-face))))
       `(outline-6 ((,cls (:inherit font-lock-constant-face :weight normal))))
       ;; `(outline-7 ((,cls (:inherit font-lock-builtin-face))))
       ;; `(outline-8 ((,cls (:inherit font-lock-string-face))))
       )

      (custom-theme-set-variables 'an-old-hope
        `(hl-todo-keyword-faces
          '(("TODO"        ,red)
            ("NEXT"        ,red)
            ("RANT"        ,red)
            ("SEE"         ,red)
            ("SKIP"        ,red)
            ("LATE"        ,red)
            ("THEM"        ,purple)
            ("PROG"        ,blue-int)
            ("OKAY"        ,blue-int)
            ("DONT"        ,green-int)
            ("FAIL"        ,red)
            ("DONE"        ,green-int)
            ("NOTE"        ,yellow-int)
            ("WAIT"        ,yellow-int)
            ("KLUDGE"      ,yellow-int)
            ("HACK"        ,yellow-int)
            ("TEMP"        ,yellow-int)
            ("FIXME"       ,orange)
            ("WARN"        ,orange)
            ("XXX+"        ,orange)
            ("\\?\\?\\?+"  ,orange)))
        `(ansi-color-names-vector
          '(,dark-grey ,red ,green ,yellow ,blue ,purple ,turquoise ,white)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
       (provide-theme 'an-old-hope)
    #+END_SRC

* Appendix                                                          :ARCHIVE:
  This trailing section just defines some file-local variables for this file.

# Local Variables:
# coding: utf-8-unix
# eval: (auto-fill-mode)
# eval: (display-line-numbers-mode -1)
# eval: (and (functionp #'diff-hl-mode) (diff-hl-mode))
# fill-column: 85
# End:

#  LocalWords:  config emacs src backend flymake flycheck restclient elisp JSON YAML
#  LocalWords:  Apheleia ui Spacemacs lsp Solargraph Gemfile init noweb performant
#  LocalWords:  dotfiles eln gccemacs spaceline builtins utils lockfiles encodings
#  LocalWords:  keymap num Ctrl LFD RET ESC spaceleader alist uniarg plist Lorem Avy
#  LocalWords:  whitespace editorconfig unpackaged ipsum orderless hotfuzz matchit
#  LocalWords:  anzu multiedit args easymotion vimish backends quickhelp docstring
#  LocalWords:  avy url emojify eyebrowse gitlink fns modeline hl todo autoloads vlc
#  LocalWords:  posframe winman ibuffer vdiff iedit flyspell ialign miniedit pcre el
#  LocalWords:  minibuffer perl sudo colors fu uuidgen emacsclient winum yasnippet
#  LocalWords:  yas aas ditributed unicode presym calc comint dired color ediff gud
#  LocalWords:  eldoc wgrep gamegrid vc imenu selectrum kmacro edmacro smtpmail SMTP
#  LocalWords:  linter eglot paren parens proced eshell smerge vline xwin vertico na
#  LocalWords:  bufler notmuch bibtex eob affe apheleia isearch glitchy Stallman RSA
#  LocalWords:  bleeep blooop Optimus recurse faicon gitlab reddit wicon firefox pos
#  LocalWords:  alltheicon ebuku DuckDuckGo ggtags parsers ctags magit rebase scrapy
#  LocalWords:  neotree olivetti pdftools skeletor Makefile golang gradle lua xml ql
#  LocalWords:  hindent powershell contrib orgit fragtog vscode css haskell nimlsp
#  LocalWords:  gitattributes gitconfig yapfify makefile citeproc ebdb asm nim php
#  LocalWords:  JavaDocs Github MicrosoftDocs NyaaLiterature MyAnimeList Youtube gpg
#  LocalWords:  NyaaLiteratureAll Nyaa NyaaGames NyaaSoftware NyaaImages NyaaMusic
#  LocalWords:  NyaaLiveActionAll NyaaLiveAction NyaaAnimeAll NyaaAnime CppReference
#  LocalWords:  microsoft github godoc SchoolsColors StackOverflow GoogleMaps cmake
#  LocalWords:  GoogleImages separedit csharp impl gopls analyzer plsense glsl mml
#  LocalWords:  languageserver roslyn recentf verilog toc cpp
